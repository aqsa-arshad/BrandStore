// --------------------------------------------------------------------------------
// Copyright AspDotNetStorefront.com. All Rights Reserved.
// http://www.aspdotnetstorefront.com
// For details on this license please visit the product homepage at the URL above.
// THE ABOVE NOTICE MUST REMAIN INTACT. 
// --------------------------------------------------------------------------------
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.832
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 2.0.50727.832.
// 
#pragma warning disable 1591

namespace AspDotNetStorefrontGateways.CardiaAPI {
    using System.Diagnostics;
    using System.Web.Services;
    using System.ComponentModel;
    using System.Web.Services.Protocols;
    using System;
    using System.Xml.Serialization;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="TransactionSoap", Namespace="https://secure.cardia.no/Service/Card/Transaction/1.2/Transaction.asmx")]
    public partial class Transaction : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback PrepareTransactionOperationCompleted;
        
        private System.Threading.SendOrPostCallback RegisterCardTransactionOperationCompleted;
        
        private System.Threading.SendOrPostCallback ReturnTransactionStatusOperationCompleted;
        
        private System.Threading.SendOrPostCallback CreditTransactionOperationCompleted;
        
        private System.Threading.SendOrPostCallback RevertOnHoldTransactionOperationCompleted;
        
        private System.Threading.SendOrPostCallback ChangeAmountOperationCompleted;
        
        private System.Threading.SendOrPostCallback VoidTransactionOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public Transaction() {
            this.Url = global::AspDotNetStorefrontGateways.Properties.Settings.Default.AspDotNetStorefrontGateways_CardiaAPI_Transaction;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event PrepareTransactionCompletedEventHandler PrepareTransactionCompleted;
        
        /// <remarks/>
        public event RegisterCardTransactionCompletedEventHandler RegisterCardTransactionCompleted;
        
        /// <remarks/>
        public event ReturnTransactionStatusCompletedEventHandler ReturnTransactionStatusCompleted;
        
        /// <remarks/>
        public event CreditTransactionCompletedEventHandler CreditTransactionCompleted;
        
        /// <remarks/>
        public event RevertOnHoldTransactionCompletedEventHandler RevertOnHoldTransactionCompleted;
        
        /// <remarks/>
        public event ChangeAmountCompletedEventHandler ChangeAmountCompleted;
        
        /// <remarks/>
        public event VoidTransactionCompletedEventHandler VoidTransactionCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://secure.cardia.no/Service/Card/Transaction/1.2/Transaction.asmx/PrepareTra" +
            "nsaction", RequestNamespace="https://secure.cardia.no/Service/Card/Transaction/1.2/Transaction.asmx", ResponseNamespace="https://secure.cardia.no/Service/Card/Transaction/1.2/Transaction.asmx", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public PreparationDetail PrepareTransaction(string merchantToken, string applicationIdentifier, string store, string orderDescription, string merchantReference, string currencyCode, string successfulTransactionUrl, string unsuccessfulTransactionUrl, string authorizedNotAuthenticatedUrl, decimal amount, bool skipFirstPage, bool skipLastPage, bool isOnHold, bool useThirdPartySecurity, int paymentMethod) {
            object[] results = this.Invoke("PrepareTransaction", new object[] {
                        merchantToken,
                        applicationIdentifier,
                        store,
                        orderDescription,
                        merchantReference,
                        currencyCode,
                        successfulTransactionUrl,
                        unsuccessfulTransactionUrl,
                        authorizedNotAuthenticatedUrl,
                        amount,
                        skipFirstPage,
                        skipLastPage,
                        isOnHold,
                        useThirdPartySecurity,
                        paymentMethod});
            return ((PreparationDetail)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginPrepareTransaction(
                    string merchantToken, 
                    string applicationIdentifier, 
                    string store, 
                    string orderDescription, 
                    string merchantReference, 
                    string currencyCode, 
                    string successfulTransactionUrl, 
                    string unsuccessfulTransactionUrl, 
                    string authorizedNotAuthenticatedUrl, 
                    decimal amount, 
                    bool skipFirstPage, 
                    bool skipLastPage, 
                    bool isOnHold, 
                    bool useThirdPartySecurity, 
                    int paymentMethod, 
                    System.AsyncCallback callback, 
                    object asyncState) {
            return this.BeginInvoke("PrepareTransaction", new object[] {
                        merchantToken,
                        applicationIdentifier,
                        store,
                        orderDescription,
                        merchantReference,
                        currencyCode,
                        successfulTransactionUrl,
                        unsuccessfulTransactionUrl,
                        authorizedNotAuthenticatedUrl,
                        amount,
                        skipFirstPage,
                        skipLastPage,
                        isOnHold,
                        useThirdPartySecurity,
                        paymentMethod}, callback, asyncState);
        }
        
        /// <remarks/>
        public PreparationDetail EndPrepareTransaction(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((PreparationDetail)(results[0]));
        }
        
        /// <remarks/>
        public void PrepareTransactionAsync(string merchantToken, string applicationIdentifier, string store, string orderDescription, string merchantReference, string currencyCode, string successfulTransactionUrl, string unsuccessfulTransactionUrl, string authorizedNotAuthenticatedUrl, decimal amount, bool skipFirstPage, bool skipLastPage, bool isOnHold, bool useThirdPartySecurity, int paymentMethod) {
            this.PrepareTransactionAsync(merchantToken, applicationIdentifier, store, orderDescription, merchantReference, currencyCode, successfulTransactionUrl, unsuccessfulTransactionUrl, authorizedNotAuthenticatedUrl, amount, skipFirstPage, skipLastPage, isOnHold, useThirdPartySecurity, paymentMethod, null);
        }
        
        /// <remarks/>
        public void PrepareTransactionAsync(
                    string merchantToken, 
                    string applicationIdentifier, 
                    string store, 
                    string orderDescription, 
                    string merchantReference, 
                    string currencyCode, 
                    string successfulTransactionUrl, 
                    string unsuccessfulTransactionUrl, 
                    string authorizedNotAuthenticatedUrl, 
                    decimal amount, 
                    bool skipFirstPage, 
                    bool skipLastPage, 
                    bool isOnHold, 
                    bool useThirdPartySecurity, 
                    int paymentMethod, 
                    object userState) {
            if ((this.PrepareTransactionOperationCompleted == null)) {
                this.PrepareTransactionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnPrepareTransactionOperationCompleted);
            }
            this.InvokeAsync("PrepareTransaction", new object[] {
                        merchantToken,
                        applicationIdentifier,
                        store,
                        orderDescription,
                        merchantReference,
                        currencyCode,
                        successfulTransactionUrl,
                        unsuccessfulTransactionUrl,
                        authorizedNotAuthenticatedUrl,
                        amount,
                        skipFirstPage,
                        skipLastPage,
                        isOnHold,
                        useThirdPartySecurity,
                        paymentMethod}, this.PrepareTransactionOperationCompleted, userState);
        }
        
        private void OnPrepareTransactionOperationCompleted(object arg) {
            if ((this.PrepareTransactionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.PrepareTransactionCompleted(this, new PrepareTransactionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://secure.cardia.no/Service/Card/Transaction/1.2/Transaction.asmx/RegisterCa" +
            "rdTransaction", RequestNamespace="https://secure.cardia.no/Service/Card/Transaction/1.2/Transaction.asmx", ResponseNamespace="https://secure.cardia.no/Service/Card/Transaction/1.2/Transaction.asmx", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ReturnDetail RegisterCardTransaction(string merchantToken, string userToken, string merchantReference, string store, string orderDescription, string cardNumber, string expiryDate, string cvc2Code, string currencyCode, string instanceId, decimal amount, System.DateTime purchaseDate, bool isOnHold, bool isPreRegistered) {
            object[] results = this.Invoke("RegisterCardTransaction", new object[] {
                        merchantToken,
                        userToken,
                        merchantReference,
                        store,
                        orderDescription,
                        cardNumber,
                        expiryDate,
                        cvc2Code,
                        currencyCode,
                        instanceId,
                        amount,
                        purchaseDate,
                        isOnHold,
                        isPreRegistered});
            return ((ReturnDetail)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginRegisterCardTransaction(
                    string merchantToken, 
                    string userToken, 
                    string merchantReference, 
                    string store, 
                    string orderDescription, 
                    string cardNumber, 
                    string expiryDate, 
                    string cvc2Code, 
                    string currencyCode, 
                    string instanceId, 
                    decimal amount, 
                    System.DateTime purchaseDate, 
                    bool isOnHold, 
                    bool isPreRegistered, 
                    System.AsyncCallback callback, 
                    object asyncState) {
            return this.BeginInvoke("RegisterCardTransaction", new object[] {
                        merchantToken,
                        userToken,
                        merchantReference,
                        store,
                        orderDescription,
                        cardNumber,
                        expiryDate,
                        cvc2Code,
                        currencyCode,
                        instanceId,
                        amount,
                        purchaseDate,
                        isOnHold,
                        isPreRegistered}, callback, asyncState);
        }
        
        /// <remarks/>
        public ReturnDetail EndRegisterCardTransaction(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((ReturnDetail)(results[0]));
        }
        
        /// <remarks/>
        public void RegisterCardTransactionAsync(string merchantToken, string userToken, string merchantReference, string store, string orderDescription, string cardNumber, string expiryDate, string cvc2Code, string currencyCode, string instanceId, decimal amount, System.DateTime purchaseDate, bool isOnHold, bool isPreRegistered) {
            this.RegisterCardTransactionAsync(merchantToken, userToken, merchantReference, store, orderDescription, cardNumber, expiryDate, cvc2Code, currencyCode, instanceId, amount, purchaseDate, isOnHold, isPreRegistered, null);
        }
        
        /// <remarks/>
        public void RegisterCardTransactionAsync(string merchantToken, string userToken, string merchantReference, string store, string orderDescription, string cardNumber, string expiryDate, string cvc2Code, string currencyCode, string instanceId, decimal amount, System.DateTime purchaseDate, bool isOnHold, bool isPreRegistered, object userState) {
            if ((this.RegisterCardTransactionOperationCompleted == null)) {
                this.RegisterCardTransactionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRegisterCardTransactionOperationCompleted);
            }
            this.InvokeAsync("RegisterCardTransaction", new object[] {
                        merchantToken,
                        userToken,
                        merchantReference,
                        store,
                        orderDescription,
                        cardNumber,
                        expiryDate,
                        cvc2Code,
                        currencyCode,
                        instanceId,
                        amount,
                        purchaseDate,
                        isOnHold,
                        isPreRegistered}, this.RegisterCardTransactionOperationCompleted, userState);
        }
        
        private void OnRegisterCardTransactionOperationCompleted(object arg) {
            if ((this.RegisterCardTransactionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RegisterCardTransactionCompleted(this, new RegisterCardTransactionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://secure.cardia.no/Service/Card/Transaction/1.2/Transaction.asmx/ReturnTran" +
            "sactionStatus", RequestNamespace="https://secure.cardia.no/Service/Card/Transaction/1.2/Transaction.asmx", ResponseNamespace="https://secure.cardia.no/Service/Card/Transaction/1.2/Transaction.asmx", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public TransactionDetail ReturnTransactionStatus(string merchantToken, string merchantReference) {
            object[] results = this.Invoke("ReturnTransactionStatus", new object[] {
                        merchantToken,
                        merchantReference});
            return ((TransactionDetail)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginReturnTransactionStatus(string merchantToken, string merchantReference, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("ReturnTransactionStatus", new object[] {
                        merchantToken,
                        merchantReference}, callback, asyncState);
        }
        
        /// <remarks/>
        public TransactionDetail EndReturnTransactionStatus(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((TransactionDetail)(results[0]));
        }
        
        /// <remarks/>
        public void ReturnTransactionStatusAsync(string merchantToken, string merchantReference) {
            this.ReturnTransactionStatusAsync(merchantToken, merchantReference, null);
        }
        
        /// <remarks/>
        public void ReturnTransactionStatusAsync(string merchantToken, string merchantReference, object userState) {
            if ((this.ReturnTransactionStatusOperationCompleted == null)) {
                this.ReturnTransactionStatusOperationCompleted = new System.Threading.SendOrPostCallback(this.OnReturnTransactionStatusOperationCompleted);
            }
            this.InvokeAsync("ReturnTransactionStatus", new object[] {
                        merchantToken,
                        merchantReference}, this.ReturnTransactionStatusOperationCompleted, userState);
        }
        
        private void OnReturnTransactionStatusOperationCompleted(object arg) {
            if ((this.ReturnTransactionStatusCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ReturnTransactionStatusCompleted(this, new ReturnTransactionStatusCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://secure.cardia.no/Service/Card/Transaction/1.2/Transaction.asmx/CreditTran" +
            "saction", RequestNamespace="https://secure.cardia.no/Service/Card/Transaction/1.2/Transaction.asmx", ResponseNamespace="https://secure.cardia.no/Service/Card/Transaction/1.2/Transaction.asmx", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ReturnDetail CreditTransaction(string merchantToken, string merchantReference, decimal amount) {
            object[] results = this.Invoke("CreditTransaction", new object[] {
                        merchantToken,
                        merchantReference,
                        amount});
            return ((ReturnDetail)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginCreditTransaction(string merchantToken, string merchantReference, decimal amount, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("CreditTransaction", new object[] {
                        merchantToken,
                        merchantReference,
                        amount}, callback, asyncState);
        }
        
        /// <remarks/>
        public ReturnDetail EndCreditTransaction(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((ReturnDetail)(results[0]));
        }
        
        /// <remarks/>
        public void CreditTransactionAsync(string merchantToken, string merchantReference, decimal amount) {
            this.CreditTransactionAsync(merchantToken, merchantReference, amount, null);
        }
        
        /// <remarks/>
        public void CreditTransactionAsync(string merchantToken, string merchantReference, decimal amount, object userState) {
            if ((this.CreditTransactionOperationCompleted == null)) {
                this.CreditTransactionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCreditTransactionOperationCompleted);
            }
            this.InvokeAsync("CreditTransaction", new object[] {
                        merchantToken,
                        merchantReference,
                        amount}, this.CreditTransactionOperationCompleted, userState);
        }
        
        private void OnCreditTransactionOperationCompleted(object arg) {
            if ((this.CreditTransactionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CreditTransactionCompleted(this, new CreditTransactionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://secure.cardia.no/Service/Card/Transaction/1.2/Transaction.asmx/RevertOnHo" +
            "ldTransaction", RequestNamespace="https://secure.cardia.no/Service/Card/Transaction/1.2/Transaction.asmx", ResponseNamespace="https://secure.cardia.no/Service/Card/Transaction/1.2/Transaction.asmx", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ReturnDetail RevertOnHoldTransaction(string merchantToken, string merchantReference) {
            object[] results = this.Invoke("RevertOnHoldTransaction", new object[] {
                        merchantToken,
                        merchantReference});
            return ((ReturnDetail)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginRevertOnHoldTransaction(string merchantToken, string merchantReference, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("RevertOnHoldTransaction", new object[] {
                        merchantToken,
                        merchantReference}, callback, asyncState);
        }
        
        /// <remarks/>
        public ReturnDetail EndRevertOnHoldTransaction(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((ReturnDetail)(results[0]));
        }
        
        /// <remarks/>
        public void RevertOnHoldTransactionAsync(string merchantToken, string merchantReference) {
            this.RevertOnHoldTransactionAsync(merchantToken, merchantReference, null);
        }
        
        /// <remarks/>
        public void RevertOnHoldTransactionAsync(string merchantToken, string merchantReference, object userState) {
            if ((this.RevertOnHoldTransactionOperationCompleted == null)) {
                this.RevertOnHoldTransactionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRevertOnHoldTransactionOperationCompleted);
            }
            this.InvokeAsync("RevertOnHoldTransaction", new object[] {
                        merchantToken,
                        merchantReference}, this.RevertOnHoldTransactionOperationCompleted, userState);
        }
        
        private void OnRevertOnHoldTransactionOperationCompleted(object arg) {
            if ((this.RevertOnHoldTransactionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RevertOnHoldTransactionCompleted(this, new RevertOnHoldTransactionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://secure.cardia.no/Service/Card/Transaction/1.2/Transaction.asmx/ChangeAmou" +
            "nt", RequestNamespace="https://secure.cardia.no/Service/Card/Transaction/1.2/Transaction.asmx", ResponseNamespace="https://secure.cardia.no/Service/Card/Transaction/1.2/Transaction.asmx", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ReturnDetail ChangeAmount(string merchantToken, string merchantReference, decimal amount) {
            object[] results = this.Invoke("ChangeAmount", new object[] {
                        merchantToken,
                        merchantReference,
                        amount});
            return ((ReturnDetail)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginChangeAmount(string merchantToken, string merchantReference, decimal amount, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("ChangeAmount", new object[] {
                        merchantToken,
                        merchantReference,
                        amount}, callback, asyncState);
        }
        
        /// <remarks/>
        public ReturnDetail EndChangeAmount(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((ReturnDetail)(results[0]));
        }
        
        /// <remarks/>
        public void ChangeAmountAsync(string merchantToken, string merchantReference, decimal amount) {
            this.ChangeAmountAsync(merchantToken, merchantReference, amount, null);
        }
        
        /// <remarks/>
        public void ChangeAmountAsync(string merchantToken, string merchantReference, decimal amount, object userState) {
            if ((this.ChangeAmountOperationCompleted == null)) {
                this.ChangeAmountOperationCompleted = new System.Threading.SendOrPostCallback(this.OnChangeAmountOperationCompleted);
            }
            this.InvokeAsync("ChangeAmount", new object[] {
                        merchantToken,
                        merchantReference,
                        amount}, this.ChangeAmountOperationCompleted, userState);
        }
        
        private void OnChangeAmountOperationCompleted(object arg) {
            if ((this.ChangeAmountCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ChangeAmountCompleted(this, new ChangeAmountCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://secure.cardia.no/Service/Card/Transaction/1.2/Transaction.asmx/VoidTransa" +
            "ction", RequestNamespace="https://secure.cardia.no/Service/Card/Transaction/1.2/Transaction.asmx", ResponseNamespace="https://secure.cardia.no/Service/Card/Transaction/1.2/Transaction.asmx", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ReturnDetail VoidTransaction(string merchantToken, string userToken, string merchantReference) {
            object[] results = this.Invoke("VoidTransaction", new object[] {
                        merchantToken,
                        userToken,
                        merchantReference});
            return ((ReturnDetail)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginVoidTransaction(string merchantToken, string userToken, string merchantReference, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("VoidTransaction", new object[] {
                        merchantToken,
                        userToken,
                        merchantReference}, callback, asyncState);
        }
        
        /// <remarks/>
        public ReturnDetail EndVoidTransaction(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((ReturnDetail)(results[0]));
        }
        
        /// <remarks/>
        public void VoidTransactionAsync(string merchantToken, string userToken, string merchantReference) {
            this.VoidTransactionAsync(merchantToken, userToken, merchantReference, null);
        }
        
        /// <remarks/>
        public void VoidTransactionAsync(string merchantToken, string userToken, string merchantReference, object userState) {
            if ((this.VoidTransactionOperationCompleted == null)) {
                this.VoidTransactionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnVoidTransactionOperationCompleted);
            }
            this.InvokeAsync("VoidTransaction", new object[] {
                        merchantToken,
                        userToken,
                        merchantReference}, this.VoidTransactionOperationCompleted, userState);
        }
        
        private void OnVoidTransactionOperationCompleted(object arg) {
            if ((this.VoidTransactionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.VoidTransactionCompleted(this, new VoidTransactionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.832")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="https://secure.cardia.no/Service/Card/Transaction/1.2/Transaction.asmx")]
    public partial class PreparationDetail {
        
        private byte responseCodeField;
        
        private string addressField;
        
        private string errorField;
        
        private string referenceGuidField;
        
        /// <remarks/>
        public byte ResponseCode {
            get {
                return this.responseCodeField;
            }
            set {
                this.responseCodeField = value;
            }
        }
        
        /// <remarks/>
        public string Address {
            get {
                return this.addressField;
            }
            set {
                this.addressField = value;
            }
        }
        
        /// <remarks/>
        public string Error {
            get {
                return this.errorField;
            }
            set {
                this.errorField = value;
            }
        }
        
        /// <remarks/>
        public string ReferenceGuid {
            get {
                return this.referenceGuidField;
            }
            set {
                this.referenceGuidField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.832")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="https://secure.cardia.no/Service/Card/Transaction/1.2/Transaction.asmx")]
    public partial class TransactionDetail {
        
        private byte statusCodeField;
        
        private decimal amountField;
        
        private short responseCodeField;
        
        private string currencyCodeField;
        
        private string recurringCodeField;
        
        /// <remarks/>
        public byte StatusCode {
            get {
                return this.statusCodeField;
            }
            set {
                this.statusCodeField = value;
            }
        }
        
        /// <remarks/>
        public decimal Amount {
            get {
                return this.amountField;
            }
            set {
                this.amountField = value;
            }
        }
        
        /// <remarks/>
        public short ResponseCode {
            get {
                return this.responseCodeField;
            }
            set {
                this.responseCodeField = value;
            }
        }
        
        /// <remarks/>
        public string CurrencyCode {
            get {
                return this.currencyCodeField;
            }
            set {
                this.currencyCodeField = value;
            }
        }
        
        /// <remarks/>
        public string RecurringCode {
            get {
                return this.recurringCodeField;
            }
            set {
                this.recurringCodeField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.832")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="https://secure.cardia.no/Service/Card/Transaction/1.2/Transaction.asmx")]
    public partial class ReturnDetail {
        
        private byte statusCodeField;
        
        private string messageField;
        
        /// <remarks/>
        public byte StatusCode {
            get {
                return this.statusCodeField;
            }
            set {
                this.statusCodeField = value;
            }
        }
        
        /// <remarks/>
        public string Message {
            get {
                return this.messageField;
            }
            set {
                this.messageField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")]
    public delegate void PrepareTransactionCompletedEventHandler(object sender, PrepareTransactionCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class PrepareTransactionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal PrepareTransactionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public PreparationDetail Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((PreparationDetail)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")]
    public delegate void RegisterCardTransactionCompletedEventHandler(object sender, RegisterCardTransactionCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RegisterCardTransactionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal RegisterCardTransactionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ReturnDetail Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ReturnDetail)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")]
    public delegate void ReturnTransactionStatusCompletedEventHandler(object sender, ReturnTransactionStatusCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ReturnTransactionStatusCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ReturnTransactionStatusCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public TransactionDetail Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((TransactionDetail)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")]
    public delegate void CreditTransactionCompletedEventHandler(object sender, CreditTransactionCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CreditTransactionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CreditTransactionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ReturnDetail Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ReturnDetail)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")]
    public delegate void RevertOnHoldTransactionCompletedEventHandler(object sender, RevertOnHoldTransactionCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RevertOnHoldTransactionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal RevertOnHoldTransactionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ReturnDetail Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ReturnDetail)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")]
    public delegate void ChangeAmountCompletedEventHandler(object sender, ChangeAmountCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ChangeAmountCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ChangeAmountCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ReturnDetail Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ReturnDetail)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")]
    public delegate void VoidTransactionCompletedEventHandler(object sender, VoidTransactionCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class VoidTransactionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal VoidTransactionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ReturnDetail Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ReturnDetail)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591
