// --------------------------------------------------------------------------------
// Copyright AspDotNetStorefront.com. All Rights Reserved.
// http://www.aspdotnetstorefront.com
// For details on this license please visit the product homepage at the URL above.
// THE ABOVE NOTICE MUST REMAIN INTACT. 
// --------------------------------------------------------------------------------
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3053
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by wsdl, Version=2.0.50727.3038.
// 
namespace AspDotNetStorefrontGateways.Processors.NetaxeptAPI
{        
    using System.Diagnostics;
    using System.Web.Services;
    using System.ComponentModel;
    using System.Web.Services.Protocols;
    using System;
    using System.Xml.Serialization;


    /// <remarks/>
    // CODEGEN: The optional WSDL extension element 'PolicyReference' from namespace 'http://schemas.xmlsoap.org/ws/2004/09/policy' was not handled.
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name = "Endpoint", Namespace = "http://tempuri.org/")]
    public partial class TokenService : System.Web.Services.Protocols.SoapHttpClientProtocol
    {

        private System.Threading.SendOrPostCallback SetupOperationCompleted;

        private System.Threading.SendOrPostCallback SetupPaymentWithUIOperationCompleted;

        private System.Threading.SendOrPostCallback SetupPaymentOperationCompleted;

        private System.Threading.SendOrPostCallback SetupCallcenterPaymentOperationCompleted;

        private System.Threading.SendOrPostCallback ProcessSetupOperationCompleted;

        private System.Threading.SendOrPostCallback SaleOperationCompleted;

        private System.Threading.SendOrPostCallback AuthOperationCompleted;

        private System.Threading.SendOrPostCallback CaptureOperationCompleted;

        private System.Threading.SendOrPostCallback AnnulOperationCompleted;

        private System.Threading.SendOrPostCallback CreditOperationCompleted;

        private System.Threading.SendOrPostCallback ReconOperationCompleted;

        /// <remarks/>
        public TokenService()
        {
            this.Url = "https://epayment.bbs.no/Service.svc";
        }

        /// <remarks/>
        public event SetupCompletedEventHandler SetupCompleted;

        /// <remarks/>
        public event SetupPaymentWithUICompletedEventHandler SetupPaymentWithUICompleted;

        /// <remarks/>
        public event SetupPaymentCompletedEventHandler SetupPaymentCompleted;

        /// <remarks/>
        public event SetupCallcenterPaymentCompletedEventHandler SetupCallcenterPaymentCompleted;

        /// <remarks/>
        public event ProcessSetupCompletedEventHandler ProcessSetupCompleted;

        /// <remarks/>
        public event SaleCompletedEventHandler SaleCompleted;

        /// <remarks/>
        public event AuthCompletedEventHandler AuthCompleted;

        /// <remarks/>
        public event CaptureCompletedEventHandler CaptureCompleted;

        /// <remarks/>
        public event AnnulCompletedEventHandler AnnulCompleted;

        /// <remarks/>
        public event CreditCompletedEventHandler CreditCompleted;

        /// <remarks/>
        public event ReconCompletedEventHandler ReconCompleted;

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://BBS.EPayment/IToken/Setup", RequestNamespace = "http://BBS.EPayment", ResponseNamespace = "http://BBS.EPayment", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable = true)]
        public string Setup([System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] string token, [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] string merchantId, [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] SetupRequest request)
        {
            object[] results = this.Invoke("Setup", new object[] {
                        token,
                        merchantId,
                        request});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginSetup(string token, string merchantId, SetupRequest request, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("Setup", new object[] {
                        token,
                        merchantId,
                        request}, callback, asyncState);
        }

        /// <remarks/>
        public string EndSetup(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void SetupAsync(string token, string merchantId, SetupRequest request)
        {
            this.SetupAsync(token, merchantId, request, null);
        }

        /// <remarks/>
        public void SetupAsync(string token, string merchantId, SetupRequest request, object userState)
        {
            if ((this.SetupOperationCompleted == null))
            {
                this.SetupOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetupOperationCompleted);
            }
            this.InvokeAsync("Setup", new object[] {
                        token,
                        merchantId,
                        request}, this.SetupOperationCompleted, userState);
        }

        private void OnSetupOperationCompleted(object arg)
        {
            if ((this.SetupCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetupCompleted(this, new SetupCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://BBS.EPayment/IToken/SetupPaymentWithUI", RequestNamespace = "http://BBS.EPayment", ResponseNamespace = "http://BBS.EPayment", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable = true)]
        public string SetupPaymentWithUI([System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] string token, [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] string merchantId, [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] string currencyCode, [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] string transactionId, [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] string amount, [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] string orderNumber, [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] string orderDescription, [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] string customerEmail, [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] string customerPhoneNumber, [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] string description, [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] string redirectUrl, [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] string language, [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] string sessionId)
        {
            object[] results = this.Invoke("SetupPaymentWithUI", new object[] {
                        token,
                        merchantId,
                        currencyCode,
                        transactionId,
                        amount,
                        orderNumber,
                        orderDescription,
                        customerEmail,
                        customerPhoneNumber,
                        description,
                        redirectUrl,
                        language,
                        sessionId});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginSetupPaymentWithUI(string token, string merchantId, string currencyCode, string transactionId, string amount, string orderNumber, string orderDescription, string customerEmail, string customerPhoneNumber, string description, string redirectUrl, string language, string sessionId, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("SetupPaymentWithUI", new object[] {
                        token,
                        merchantId,
                        currencyCode,
                        transactionId,
                        amount,
                        orderNumber,
                        orderDescription,
                        customerEmail,
                        customerPhoneNumber,
                        description,
                        redirectUrl,
                        language,
                        sessionId}, callback, asyncState);
        }

        /// <remarks/>
        public string EndSetupPaymentWithUI(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void SetupPaymentWithUIAsync(string token, string merchantId, string currencyCode, string transactionId, string amount, string orderNumber, string orderDescription, string customerEmail, string customerPhoneNumber, string description, string redirectUrl, string language, string sessionId)
        {
            this.SetupPaymentWithUIAsync(token, merchantId, currencyCode, transactionId, amount, orderNumber, orderDescription, customerEmail, customerPhoneNumber, description, redirectUrl, language, sessionId, null);
        }

        /// <remarks/>
        public void SetupPaymentWithUIAsync(string token, string merchantId, string currencyCode, string transactionId, string amount, string orderNumber, string orderDescription, string customerEmail, string customerPhoneNumber, string description, string redirectUrl, string language, string sessionId, object userState)
        {
            if ((this.SetupPaymentWithUIOperationCompleted == null))
            {
                this.SetupPaymentWithUIOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetupPaymentWithUIOperationCompleted);
            }
            this.InvokeAsync("SetupPaymentWithUI", new object[] {
                        token,
                        merchantId,
                        currencyCode,
                        transactionId,
                        amount,
                        orderNumber,
                        orderDescription,
                        customerEmail,
                        customerPhoneNumber,
                        description,
                        redirectUrl,
                        language,
                        sessionId}, this.SetupPaymentWithUIOperationCompleted, userState);
        }

        private void OnSetupPaymentWithUIOperationCompleted(object arg)
        {
            if ((this.SetupPaymentWithUICompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetupPaymentWithUICompleted(this, new SetupPaymentWithUICompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://BBS.EPayment/IToken/SetupPayment", RequestNamespace = "http://BBS.EPayment", ResponseNamespace = "http://BBS.EPayment", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable = true)]
        public string SetupPayment([System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] string token, [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] string merchantId, [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] string currencyCode, [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] string transactionId, [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] string amount, [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] string orderNumber, [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] string orderDescription, [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] string customerEmail, [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] string customerPhoneNumber, [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] string description, [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] string redirectUrl, [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] string sessionId)
        {
            object[] results = this.Invoke("SetupPayment", new object[] {
                        token,
                        merchantId,
                        currencyCode,
                        transactionId,
                        amount,
                        orderNumber,
                        orderDescription,
                        customerEmail,
                        customerPhoneNumber,
                        description,
                        redirectUrl,
                        sessionId});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginSetupPayment(string token, string merchantId, string currencyCode, string transactionId, string amount, string orderNumber, string orderDescription, string customerEmail, string customerPhoneNumber, string description, string redirectUrl, string sessionId, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("SetupPayment", new object[] {
                        token,
                        merchantId,
                        currencyCode,
                        transactionId,
                        amount,
                        orderNumber,
                        orderDescription,
                        customerEmail,
                        customerPhoneNumber,
                        description,
                        redirectUrl,
                        sessionId}, callback, asyncState);
        }

        /// <remarks/>
        public string EndSetupPayment(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void SetupPaymentAsync(string token, string merchantId, string currencyCode, string transactionId, string amount, string orderNumber, string orderDescription, string customerEmail, string customerPhoneNumber, string description, string redirectUrl, string sessionId)
        {
            this.SetupPaymentAsync(token, merchantId, currencyCode, transactionId, amount, orderNumber, orderDescription, customerEmail, customerPhoneNumber, description, redirectUrl, sessionId, null);
        }

        /// <remarks/>
        public void SetupPaymentAsync(string token, string merchantId, string currencyCode, string transactionId, string amount, string orderNumber, string orderDescription, string customerEmail, string customerPhoneNumber, string description, string redirectUrl, string sessionId, object userState)
        {
            if ((this.SetupPaymentOperationCompleted == null))
            {
                this.SetupPaymentOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetupPaymentOperationCompleted);
            }
            this.InvokeAsync("SetupPayment", new object[] {
                        token,
                        merchantId,
                        currencyCode,
                        transactionId,
                        amount,
                        orderNumber,
                        orderDescription,
                        customerEmail,
                        customerPhoneNumber,
                        description,
                        redirectUrl,
                        sessionId}, this.SetupPaymentOperationCompleted, userState);
        }

        private void OnSetupPaymentOperationCompleted(object arg)
        {
            if ((this.SetupPaymentCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetupPaymentCompleted(this, new SetupPaymentCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://BBS.EPayment/IToken/SetupCallcenterPayment", RequestNamespace = "http://BBS.EPayment", ResponseNamespace = "http://BBS.EPayment", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable = true)]
        public string SetupCallcenterPayment([System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] string token, [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] string merchantId, [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] string currencyCode, [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] string transactionId, [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] string amount, [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] string orderNumber, [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] string orderDescription, [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] string customerEmail, [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] string customerPhoneNumber, [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] string description, [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] string sessionId)
        {
            object[] results = this.Invoke("SetupCallcenterPayment", new object[] {
                        token,
                        merchantId,
                        currencyCode,
                        transactionId,
                        amount,
                        orderNumber,
                        orderDescription,
                        customerEmail,
                        customerPhoneNumber,
                        description,
                        sessionId});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginSetupCallcenterPayment(string token, string merchantId, string currencyCode, string transactionId, string amount, string orderNumber, string orderDescription, string customerEmail, string customerPhoneNumber, string description, string sessionId, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("SetupCallcenterPayment", new object[] {
                        token,
                        merchantId,
                        currencyCode,
                        transactionId,
                        amount,
                        orderNumber,
                        orderDescription,
                        customerEmail,
                        customerPhoneNumber,
                        description,
                        sessionId}, callback, asyncState);
        }

        /// <remarks/>
        public string EndSetupCallcenterPayment(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void SetupCallcenterPaymentAsync(string token, string merchantId, string currencyCode, string transactionId, string amount, string orderNumber, string orderDescription, string customerEmail, string customerPhoneNumber, string description, string sessionId)
        {
            this.SetupCallcenterPaymentAsync(token, merchantId, currencyCode, transactionId, amount, orderNumber, orderDescription, customerEmail, customerPhoneNumber, description, sessionId, null);
        }

        /// <remarks/>
        public void SetupCallcenterPaymentAsync(string token, string merchantId, string currencyCode, string transactionId, string amount, string orderNumber, string orderDescription, string customerEmail, string customerPhoneNumber, string description, string sessionId, object userState)
        {
            if ((this.SetupCallcenterPaymentOperationCompleted == null))
            {
                this.SetupCallcenterPaymentOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetupCallcenterPaymentOperationCompleted);
            }
            this.InvokeAsync("SetupCallcenterPayment", new object[] {
                        token,
                        merchantId,
                        currencyCode,
                        transactionId,
                        amount,
                        orderNumber,
                        orderDescription,
                        customerEmail,
                        customerPhoneNumber,
                        description,
                        sessionId}, this.SetupCallcenterPaymentOperationCompleted, userState);
        }

        private void OnSetupCallcenterPaymentOperationCompleted(object arg)
        {
            if ((this.SetupCallcenterPaymentCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetupCallcenterPaymentCompleted(this, new SetupCallcenterPaymentCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://BBS.EPayment/IToken/ProcessSetup", RequestNamespace = "http://BBS.EPayment", ResponseNamespace = "http://BBS.EPayment", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable = true)]
        public Result ProcessSetup([System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] string token, [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] string merchantId, [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] string transactionString)
        {
            object[] results = this.Invoke("ProcessSetup", new object[] {
                        token,
                        merchantId,
                        transactionString});
            return ((Result)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginProcessSetup(string token, string merchantId, string transactionString, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("ProcessSetup", new object[] {
                        token,
                        merchantId,
                        transactionString}, callback, asyncState);
        }

        /// <remarks/>
        public Result EndProcessSetup(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((Result)(results[0]));
        }

        /// <remarks/>
        public void ProcessSetupAsync(string token, string merchantId, string transactionString)
        {
            this.ProcessSetupAsync(token, merchantId, transactionString, null);
        }

        /// <remarks/>
        public void ProcessSetupAsync(string token, string merchantId, string transactionString, object userState)
        {
            if ((this.ProcessSetupOperationCompleted == null))
            {
                this.ProcessSetupOperationCompleted = new System.Threading.SendOrPostCallback(this.OnProcessSetupOperationCompleted);
            }
            this.InvokeAsync("ProcessSetup", new object[] {
                        token,
                        merchantId,
                        transactionString}, this.ProcessSetupOperationCompleted, userState);
        }

        private void OnProcessSetupOperationCompleted(object arg)
        {
            if ((this.ProcessSetupCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ProcessSetupCompleted(this, new ProcessSetupCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://BBS.EPayment/IToken/Sale", RequestNamespace = "http://BBS.EPayment", ResponseNamespace = "http://BBS.EPayment", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable = true)]
        public Result Sale([System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] string token, [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] string merchantId, [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] string transactionId, [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] string transactionReconRef, [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] string batchReconRef)
        {
            object[] results = this.Invoke("Sale", new object[] {
                        token,
                        merchantId,
                        transactionId,
                        transactionReconRef,
                        batchReconRef});
            return ((Result)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginSale(string token, string merchantId, string transactionId, string transactionReconRef, string batchReconRef, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("Sale", new object[] {
                        token,
                        merchantId,
                        transactionId,
                        transactionReconRef,
                        batchReconRef}, callback, asyncState);
        }

        /// <remarks/>
        public Result EndSale(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((Result)(results[0]));
        }

        /// <remarks/>
        public void SaleAsync(string token, string merchantId, string transactionId, string transactionReconRef, string batchReconRef)
        {
            this.SaleAsync(token, merchantId, transactionId, transactionReconRef, batchReconRef, null);
        }

        /// <remarks/>
        public void SaleAsync(string token, string merchantId, string transactionId, string transactionReconRef, string batchReconRef, object userState)
        {
            if ((this.SaleOperationCompleted == null))
            {
                this.SaleOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSaleOperationCompleted);
            }
            this.InvokeAsync("Sale", new object[] {
                        token,
                        merchantId,
                        transactionId,
                        transactionReconRef,
                        batchReconRef}, this.SaleOperationCompleted, userState);
        }

        private void OnSaleOperationCompleted(object arg)
        {
            if ((this.SaleCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SaleCompleted(this, new SaleCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://BBS.EPayment/IToken/Auth", RequestNamespace = "http://BBS.EPayment", ResponseNamespace = "http://BBS.EPayment", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable = true)]
        public Result Auth([System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] string token, [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] string merchantId, [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] string transactionId, [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] string batchReconRef)
        {
            object[] results = this.Invoke("Auth", new object[] {
                        token,
                        merchantId,
                        transactionId,
                        batchReconRef});
            return ((Result)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginAuth(string token, string merchantId, string transactionId, string batchReconRef, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("Auth", new object[] {
                        token,
                        merchantId,
                        transactionId,
                        batchReconRef}, callback, asyncState);
        }

        /// <remarks/>
        public Result EndAuth(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((Result)(results[0]));
        }

        /// <remarks/>
        public void AuthAsync(string token, string merchantId, string transactionId, string batchReconRef)
        {
            this.AuthAsync(token, merchantId, transactionId, batchReconRef, null);
        }

        /// <remarks/>
        public void AuthAsync(string token, string merchantId, string transactionId, string batchReconRef, object userState)
        {
            if ((this.AuthOperationCompleted == null))
            {
                this.AuthOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAuthOperationCompleted);
            }
            this.InvokeAsync("Auth", new object[] {
                        token,
                        merchantId,
                        transactionId,
                        batchReconRef}, this.AuthOperationCompleted, userState);
        }

        private void OnAuthOperationCompleted(object arg)
        {
            if ((this.AuthCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AuthCompleted(this, new AuthCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://BBS.EPayment/IToken/Capture", RequestNamespace = "http://BBS.EPayment", ResponseNamespace = "http://BBS.EPayment", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable = true)]
        public Result Capture([System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] string token, [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] string merchantId, [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] string transactionId, [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] string description, [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] string transactionAmount, [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] string transactionReconRef)
        {
            object[] results = this.Invoke("Capture", new object[] {
                        token,
                        merchantId,
                        transactionId,
                        description,
                        transactionAmount,
                        transactionReconRef});
            return ((Result)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginCapture(string token, string merchantId, string transactionId, string description, string transactionAmount, string transactionReconRef, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("Capture", new object[] {
                        token,
                        merchantId,
                        transactionId,
                        description,
                        transactionAmount,
                        transactionReconRef}, callback, asyncState);
        }

        /// <remarks/>
        public Result EndCapture(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((Result)(results[0]));
        }

        /// <remarks/>
        public void CaptureAsync(string token, string merchantId, string transactionId, string description, string transactionAmount, string transactionReconRef)
        {
            this.CaptureAsync(token, merchantId, transactionId, description, transactionAmount, transactionReconRef, null);
        }

        /// <remarks/>
        public void CaptureAsync(string token, string merchantId, string transactionId, string description, string transactionAmount, string transactionReconRef, object userState)
        {
            if ((this.CaptureOperationCompleted == null))
            {
                this.CaptureOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCaptureOperationCompleted);
            }
            this.InvokeAsync("Capture", new object[] {
                        token,
                        merchantId,
                        transactionId,
                        description,
                        transactionAmount,
                        transactionReconRef}, this.CaptureOperationCompleted, userState);
        }

        private void OnCaptureOperationCompleted(object arg)
        {
            if ((this.CaptureCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CaptureCompleted(this, new CaptureCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://BBS.EPayment/IToken/Annul", RequestNamespace = "http://BBS.EPayment", ResponseNamespace = "http://BBS.EPayment", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable = true)]
        public Result Annul([System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] string token, [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] string merchantId, [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] string transactionId, [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] string description, [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] string transactionAmount)
        {
            object[] results = this.Invoke("Annul", new object[] {
                        token,
                        merchantId,
                        transactionId,
                        description,
                        transactionAmount});
            return ((Result)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginAnnul(string token, string merchantId, string transactionId, string description, string transactionAmount, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("Annul", new object[] {
                        token,
                        merchantId,
                        transactionId,
                        description,
                        transactionAmount}, callback, asyncState);
        }

        /// <remarks/>
        public Result EndAnnul(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((Result)(results[0]));
        }

        /// <remarks/>
        public void AnnulAsync(string token, string merchantId, string transactionId, string description, string transactionAmount)
        {
            this.AnnulAsync(token, merchantId, transactionId, description, transactionAmount, null);
        }

        /// <remarks/>
        public void AnnulAsync(string token, string merchantId, string transactionId, string description, string transactionAmount, object userState)
        {
            if ((this.AnnulOperationCompleted == null))
            {
                this.AnnulOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAnnulOperationCompleted);
            }
            this.InvokeAsync("Annul", new object[] {
                        token,
                        merchantId,
                        transactionId,
                        description,
                        transactionAmount}, this.AnnulOperationCompleted, userState);
        }

        private void OnAnnulOperationCompleted(object arg)
        {
            if ((this.AnnulCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AnnulCompleted(this, new AnnulCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://BBS.EPayment/IToken/Credit", RequestNamespace = "http://BBS.EPayment", ResponseNamespace = "http://BBS.EPayment", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable = true)]
        public Result Credit([System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] string token, [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] string merchantId, [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] string transactionId, [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] string description, [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] string transactionAmount)
        {
            object[] results = this.Invoke("Credit", new object[] {
                        token,
                        merchantId,
                        transactionId,
                        description,
                        transactionAmount});
            return ((Result)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginCredit(string token, string merchantId, string transactionId, string description, string transactionAmount, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("Credit", new object[] {
                        token,
                        merchantId,
                        transactionId,
                        description,
                        transactionAmount}, callback, asyncState);
        }

        /// <remarks/>
        public Result EndCredit(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((Result)(results[0]));
        }

        /// <remarks/>
        public void CreditAsync(string token, string merchantId, string transactionId, string description, string transactionAmount)
        {
            this.CreditAsync(token, merchantId, transactionId, description, transactionAmount, null);
        }

        /// <remarks/>
        public void CreditAsync(string token, string merchantId, string transactionId, string description, string transactionAmount, object userState)
        {
            if ((this.CreditOperationCompleted == null))
            {
                this.CreditOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCreditOperationCompleted);
            }
            this.InvokeAsync("Credit", new object[] {
                        token,
                        merchantId,
                        transactionId,
                        description,
                        transactionAmount}, this.CreditOperationCompleted, userState);
        }

        private void OnCreditOperationCompleted(object arg)
        {
            if ((this.CreditCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CreditCompleted(this, new CreditCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://BBS.EPayment/IToken/Recon", RequestNamespace = "http://BBS.EPayment", ResponseNamespace = "http://BBS.EPayment", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable = true)]
        public ReconResult Recon([System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] string token, [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] string merchantId, [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] string currencyCode, [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] string numberCredits, [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] string numberDebits, [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] string amountCredits, [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] string amountDebits, [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] string amountNet, [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] string batchReconRef, [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] string sessionNumber, [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] string issuerId)
        {
            object[] results = this.Invoke("Recon", new object[] {
                        token,
                        merchantId,
                        currencyCode,
                        numberCredits,
                        numberDebits,
                        amountCredits,
                        amountDebits,
                        amountNet,
                        batchReconRef,
                        sessionNumber,
                        issuerId});
            return ((ReconResult)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginRecon(string token, string merchantId, string currencyCode, string numberCredits, string numberDebits, string amountCredits, string amountDebits, string amountNet, string batchReconRef, string sessionNumber, string issuerId, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("Recon", new object[] {
                        token,
                        merchantId,
                        currencyCode,
                        numberCredits,
                        numberDebits,
                        amountCredits,
                        amountDebits,
                        amountNet,
                        batchReconRef,
                        sessionNumber,
                        issuerId}, callback, asyncState);
        }

        /// <remarks/>
        public ReconResult EndRecon(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((ReconResult)(results[0]));
        }

        /// <remarks/>
        public void ReconAsync(string token, string merchantId, string currencyCode, string numberCredits, string numberDebits, string amountCredits, string amountDebits, string amountNet, string batchReconRef, string sessionNumber, string issuerId)
        {
            this.ReconAsync(token, merchantId, currencyCode, numberCredits, numberDebits, amountCredits, amountDebits, amountNet, batchReconRef, sessionNumber, issuerId, null);
        }

        /// <remarks/>
        public void ReconAsync(string token, string merchantId, string currencyCode, string numberCredits, string numberDebits, string amountCredits, string amountDebits, string amountNet, string batchReconRef, string sessionNumber, string issuerId, object userState)
        {
            if ((this.ReconOperationCompleted == null))
            {
                this.ReconOperationCompleted = new System.Threading.SendOrPostCallback(this.OnReconOperationCompleted);
            }
            this.InvokeAsync("Recon", new object[] {
                        token,
                        merchantId,
                        currencyCode,
                        numberCredits,
                        numberDebits,
                        amountCredits,
                        amountDebits,
                        amountNet,
                        batchReconRef,
                        sessionNumber,
                        issuerId}, this.ReconOperationCompleted, userState);
        }

        private void OnReconOperationCompleted(object arg)
        {
            if ((this.ReconCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ReconCompleted(this, new ReconCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        public new void CancelAsync(object userState)
        {
            base.CancelAsync(userState);
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://schemas.datacontract.org/2004/07/BBS.EPayment.ServiceLibrary")]
    public partial class SetupRequest
    {

        private string amountField;

        private string currencyCodeField;

        private string customerEmailField;

        private string customerPhoneNumberField;

        private string descriptionField;

        private string languageField;

        private string orderDescriptionField;

        private string orderNumberField;

        private string panHashField;

        private string recurringExpiryDateField;

        private string recurringFrequencyField;

        private string recurringTypeField;

        private string redirectUrlField;

        private string serviceTypeField;

        private string sessionIdField;

        private string transactionIdField;

        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)]
        public string Amount
        {
            get
            {
                return this.amountField;
            }
            set
            {
                this.amountField = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)]
        public string CurrencyCode
        {
            get
            {
                return this.currencyCodeField;
            }
            set
            {
                this.currencyCodeField = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)]
        public string CustomerEmail
        {
            get
            {
                return this.customerEmailField;
            }
            set
            {
                this.customerEmailField = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)]
        public string CustomerPhoneNumber
        {
            get
            {
                return this.customerPhoneNumberField;
            }
            set
            {
                this.customerPhoneNumberField = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)]
        public string Description
        {
            get
            {
                return this.descriptionField;
            }
            set
            {
                this.descriptionField = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)]
        public string Language
        {
            get
            {
                return this.languageField;
            }
            set
            {
                this.languageField = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)]
        public string OrderDescription
        {
            get
            {
                return this.orderDescriptionField;
            }
            set
            {
                this.orderDescriptionField = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)]
        public string OrderNumber
        {
            get
            {
                return this.orderNumberField;
            }
            set
            {
                this.orderNumberField = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)]
        public string PanHash
        {
            get
            {
                return this.panHashField;
            }
            set
            {
                this.panHashField = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)]
        public string RecurringExpiryDate
        {
            get
            {
                return this.recurringExpiryDateField;
            }
            set
            {
                this.recurringExpiryDateField = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)]
        public string RecurringFrequency
        {
            get
            {
                return this.recurringFrequencyField;
            }
            set
            {
                this.recurringFrequencyField = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)]
        public string RecurringType
        {
            get
            {
                return this.recurringTypeField;
            }
            set
            {
                this.recurringTypeField = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)]
        public string RedirectUrl
        {
            get
            {
                return this.redirectUrlField;
            }
            set
            {
                this.redirectUrlField = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)]
        public string ServiceType
        {
            get
            {
                return this.serviceTypeField;
            }
            set
            {
                this.serviceTypeField = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)]
        public string SessionId
        {
            get
            {
                return this.sessionIdField;
            }
            set
            {
                this.sessionIdField = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)]
        public string TransactionId
        {
            get
            {
                return this.transactionIdField;
            }
            set
            {
                this.transactionIdField = value;
            }
        }
    }

    /// <remarks/>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ReconResult))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://schemas.datacontract.org/2004/07/BBS.EPayment.ServiceLibrary")]
    public partial class Result
    {

        private string authenticatedStatusField;

        private string authenticatedWithField;

        private string authorizationCodeField;

        private string authorizationIdField;

        private string cardExpiryDateField;

        private string customerIPField;

        private System.DateTime executionTimeField;

        private bool executionTimeFieldSpecified;

        private string issuerCountryField;

        private string issuerCountryCodeField;

        private string issuerIdField;

        private string merchantIdField;

        private string panHashField;

        private string recurringTypeField;

        private string responseCodeField;

        private string responseSourceField;

        private string responseTextField;

        private string sessionIdField;

        private string sessionNumberField;

        private string transactionIdField;

        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)]
        public string AuthenticatedStatus
        {
            get
            {
                return this.authenticatedStatusField;
            }
            set
            {
                this.authenticatedStatusField = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)]
        public string AuthenticatedWith
        {
            get
            {
                return this.authenticatedWithField;
            }
            set
            {
                this.authenticatedWithField = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)]
        public string AuthorizationCode
        {
            get
            {
                return this.authorizationCodeField;
            }
            set
            {
                this.authorizationCodeField = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)]
        public string AuthorizationId
        {
            get
            {
                return this.authorizationIdField;
            }
            set
            {
                this.authorizationIdField = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)]
        public string CardExpiryDate
        {
            get
            {
                return this.cardExpiryDateField;
            }
            set
            {
                this.cardExpiryDateField = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)]
        public string CustomerIP
        {
            get
            {
                return this.customerIPField;
            }
            set
            {
                this.customerIPField = value;
            }
        }

        /// <remarks/>
        public System.DateTime ExecutionTime
        {
            get
            {
                return this.executionTimeField;
            }
            set
            {
                this.executionTimeField = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ExecutionTimeSpecified
        {
            get
            {
                return this.executionTimeFieldSpecified;
            }
            set
            {
                this.executionTimeFieldSpecified = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)]
        public string IssuerCountry
        {
            get
            {
                return this.issuerCountryField;
            }
            set
            {
                this.issuerCountryField = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)]
        public string IssuerCountryCode
        {
            get
            {
                return this.issuerCountryCodeField;
            }
            set
            {
                this.issuerCountryCodeField = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)]
        public string IssuerId
        {
            get
            {
                return this.issuerIdField;
            }
            set
            {
                this.issuerIdField = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)]
        public string MerchantId
        {
            get
            {
                return this.merchantIdField;
            }
            set
            {
                this.merchantIdField = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)]
        public string PanHash
        {
            get
            {
                return this.panHashField;
            }
            set
            {
                this.panHashField = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)]
        public string RecurringType
        {
            get
            {
                return this.recurringTypeField;
            }
            set
            {
                this.recurringTypeField = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)]
        public string ResponseCode
        {
            get
            {
                return this.responseCodeField;
            }
            set
            {
                this.responseCodeField = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)]
        public string ResponseSource
        {
            get
            {
                return this.responseSourceField;
            }
            set
            {
                this.responseSourceField = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)]
        public string ResponseText
        {
            get
            {
                return this.responseTextField;
            }
            set
            {
                this.responseTextField = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)]
        public string SessionId
        {
            get
            {
                return this.sessionIdField;
            }
            set
            {
                this.sessionIdField = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)]
        public string SessionNumber
        {
            get
            {
                return this.sessionNumberField;
            }
            set
            {
                this.sessionNumberField = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)]
        public string TransactionId
        {
            get
            {
                return this.transactionIdField;
            }
            set
            {
                this.transactionIdField = value;
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://schemas.datacontract.org/2004/07/BBS.EPayment.ServiceLibrary")]
    public partial class ReconResult : Result
    {

        private string amountCreditsField;

        private string amountDebitsField;

        private string amountNetField;

        private string batchReconRefField;

        private string currencyCodeField;

        private int numberCreditsField;

        private bool numberCreditsFieldSpecified;

        private int numberDebitsField;

        private bool numberDebitsFieldSpecified;

        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)]
        public string AmountCredits
        {
            get
            {
                return this.amountCreditsField;
            }
            set
            {
                this.amountCreditsField = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)]
        public string AmountDebits
        {
            get
            {
                return this.amountDebitsField;
            }
            set
            {
                this.amountDebitsField = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)]
        public string AmountNet
        {
            get
            {
                return this.amountNetField;
            }
            set
            {
                this.amountNetField = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)]
        public string BatchReconRef
        {
            get
            {
                return this.batchReconRefField;
            }
            set
            {
                this.batchReconRefField = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)]
        public string CurrencyCode
        {
            get
            {
                return this.currencyCodeField;
            }
            set
            {
                this.currencyCodeField = value;
            }
        }

        /// <remarks/>
        public int NumberCredits
        {
            get
            {
                return this.numberCreditsField;
            }
            set
            {
                this.numberCreditsField = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool NumberCreditsSpecified
        {
            get
            {
                return this.numberCreditsFieldSpecified;
            }
            set
            {
                this.numberCreditsFieldSpecified = value;
            }
        }

        /// <remarks/>
        public int NumberDebits
        {
            get
            {
                return this.numberDebitsField;
            }
            set
            {
                this.numberDebitsField = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool NumberDebitsSpecified
        {
            get
            {
                return this.numberDebitsFieldSpecified;
            }
            set
            {
                this.numberDebitsFieldSpecified = value;
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void SetupCompletedEventHandler(object sender, SetupCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SetupCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal SetupCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void SetupPaymentWithUICompletedEventHandler(object sender, SetupPaymentWithUICompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SetupPaymentWithUICompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal SetupPaymentWithUICompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void SetupPaymentCompletedEventHandler(object sender, SetupPaymentCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SetupPaymentCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal SetupPaymentCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void SetupCallcenterPaymentCompletedEventHandler(object sender, SetupCallcenterPaymentCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SetupCallcenterPaymentCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal SetupCallcenterPaymentCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void ProcessSetupCompletedEventHandler(object sender, ProcessSetupCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ProcessSetupCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal ProcessSetupCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public Result Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((Result)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void SaleCompletedEventHandler(object sender, SaleCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SaleCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal SaleCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public Result Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((Result)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void AuthCompletedEventHandler(object sender, AuthCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AuthCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal AuthCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public Result Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((Result)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void CaptureCompletedEventHandler(object sender, CaptureCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CaptureCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal CaptureCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public Result Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((Result)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void AnnulCompletedEventHandler(object sender, AnnulCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AnnulCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal AnnulCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public Result Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((Result)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void CreditCompletedEventHandler(object sender, CreditCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CreditCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal CreditCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public Result Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((Result)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void ReconCompletedEventHandler(object sender, ReconCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ReconCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal ReconCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public ReconResult Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((ReconResult)(this.results[0]));
            }
        }
    }
}
