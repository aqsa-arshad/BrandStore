<?xml version="1.0" standalone="yes" ?>
<!-- ##################################################################################	-->
<!-- Copyright AspDotNetStorefront.com. All Rights Reserved.							-->
<!-- http://www.aspdotnetstorefront.com													-->
<!-- For details on this license please visit the product homepage at the URL above.	-->
<!-- THE ABOVE NOTICE MUST REMAIN INTACT.												-->
<!-- ##################################################################################	-->
<!-- This XML package displays information for simple single-variant products.  -->
<!-- This package is not designed for truly responsive skins, however it uses a basic grid system that will make pages somewhat resizeable. -->
<package version="2.1" displayname="Simple Product" debug="false" includeentityhelper="true">
  <query name="Products" rowElementName="Product" runif="showproduct">
    <sql>
      <![CDATA[
				exec dbo.aspdnsf_ProductInfo
					@ProductID = @ProductID,
					@CustomerLevelID = @CustomerLevelID,
					@DefaultVariantOnly = 1,
					@AffiliateID = @AffiliateID,
					@StoreID = @StoreID
      ]]>
    </sql>
    <queryparam paramname="@ProductID"				paramtype="request"	requestparamname="ProductID"				sqlDataType="int"	defvalue="0"	validationpattern="^\d{1,10}$" />
    <queryparam paramname="@CustomerLevelID"	paramtype="runtime"	requestparamname="CustomerLevelID"	sqlDataType="int"	defvalue="0"	validationpattern="" />
    <queryparam paramname="@AffiliateID"			paramtype="system"	requestparamname="AffiliateID"			sqlDataType="int"	defvalue="0"	validationpattern="" />
    <queryparam paramname="@StoreID"					paramtype="runtime"	requestparamname="StoreID"					sqlDataType="int"	defvalue="1"	validationpattern="" />
  </query>


  <query name="Products" rowElementName="Product" runif="edit">
    <sql>
      <![CDATA[
                exec dbo.aspdnsf_EditOrderProduct @ShoppingCartRecID, @CustomerLevelID
            ]]>
    </sql>
    <queryparam paramname="@ShoppingCartRecID" paramtype="request" requestparamname="CartRecID"       sqlDataType="int" defvalue="0"  validationpattern="^\d{1,10}$" />
    <queryparam paramname="@CustomerLevelID"   paramtype="system"  requestparamname="CustomerLevelID" sqlDataType="int" defvalue="0"  validationpattern="" />
  </query>

  <PackageTransform>
    <xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:aspdnsf="urn:aspdnsf" exclude-result-prefixes="aspdnsf">
      <xsl:output method="html" omit-xml-declaration="yes" />

      <xsl:param name="LocaleSetting" select="/root/Runtime/LocaleSetting" />
      <xsl:param name="WebConfigLocaleSetting" select="/root/Runtime/WebConfigLocaleSetting" />
      <xsl:param name="XmlPackageName" select="/root/System/XmlPackageName" />
      <xsl:param name="SecID">
        <xsl:choose>
          <xsl:when test="count(/root/QueryString/sectionid) &gt; 0">
            <xsl:value-of select="/root/QueryString/sectionid" />
          </xsl:when>
          <xsl:otherwise>0</xsl:otherwise>
        </xsl:choose>
      </xsl:param>
      <xsl:param name="CatID">
        <xsl:choose>
          <xsl:when test="count(/root/QueryString/categoryid) &gt; 0">
            <xsl:value-of select="/root/QueryString/categoryid" />
          </xsl:when>
          <xsl:otherwise>0</xsl:otherwise>
        </xsl:choose>
      </xsl:param>
      <xsl:variable name="ProductIdsOnPage">
        <xsl:for-each select="/root/Products/Product/ProductID">
          <xsl:value-of select="." />
          <xsl:if test="position() != last()">
            <xsl:text>,</xsl:text>
          </xsl:if>
        </xsl:for-each>
      </xsl:variable>
      <xsl:variable name="AvailablePromotions" select="aspdnsf:XmlPackageAsXml('availablePromotions.xml.config', concat('productIdList=', $ProductIdsOnPage))/root/Promotions" />
      <xsl:variable name="schemaProductURL" select="concat(aspdnsf:GetCurrentProtocol(), '://schema.org/Product')"/>

      <!-- This is the main template for this package.  It runs once regardless of how this product is configured. -->
      <xsl:template match="/">
        <div class="content-box-03">
          <div class="page-wrap product-page" itemscope="" itemtype="{$schemaProductURL}">
            <xsl:choose>
              <xsl:when test="count(root/Products/Product) &gt; 1">
                <xsl:for-each select="/root/Products/Product[position()=1]">
                  <xsl:call-template name="MultiVariant"/>
                </xsl:for-each>
              </xsl:when>
              <xsl:otherwise>
                <xsl:apply-templates select="/root/Products/Product" />
              </xsl:otherwise>
            </xsl:choose>
          </div>
        </div>
      </xsl:template>

      <!-- Runs if the product contains more than one variant. -->
      <xsl:template name="MultiVariant">
        <div class="page-row">
          Display of multi-variant products is not supported by this XmlPackage. XmlPackage=<xsl:value-of select="$XmlPackageName" />
        </div>
      </xsl:template>

      <!-- Runs if the product contains only one variant. -->
      <xsl:template match="Product">
        <xsl:param name="pName" select="aspdnsf:GetMLValue(Name)"></xsl:param>
        <xsl:param name="pDescription" select="aspdnsf:GetMLValue(Description)"></xsl:param>
        <xsl:param name="pSalesPromptName" select="aspdnsf:GetMLValue(SalesPromptName)"></xsl:param>
        <xsl:param name="AltText">
          <xsl:choose>
            <xsl:when test="aspdnsf:GetMLValue(SEAltText)=''">
              <xsl:value-of select="aspdnsf:GetMLValue(Name)" />
            </xsl:when>
            <xsl:otherwise>
              <xsl:value-of select="aspdnsf:GetMLValue(SEAltText)" />
            </xsl:otherwise>
          </xsl:choose>
        </xsl:param>
        <xsl:variable name="productId" select="ProductID" />
        <xsl:variable name="pManufacturerName" select="aspdnsf:GetMLValue(ProductManufacturerName)"/>
        <xsl:variable name="productSKU" select="/root/Products/Product/SKU" />
        <xsl:variable name="pImageLarge" select="aspdnsf:ProductImageUrl(ProductID, ImageFileNameOverride, SKU, 'large', 1)"/>
        <xsl:variable name="schemaOfferURL" select="concat(aspdnsf:GetCurrentProtocol(), '://schema.org/Offer')"/>
        <xsl:variable name="schemaOrganizationURL" select="concat(aspdnsf:GetCurrentProtocol(), '://schema.org/Organization')"/>
        <xsl:variable name="schemaProductLink" select="aspdnsf:ProductLink(ProductID, SEName, '0', '0', '0', '1')" />
        <xsl:variable name="pManufacturerLink">
          <xsl:choose>
            <xsl:when test="string-length(ProductManufacturerId) &gt; 0 and string-length(ProductManufacturerSEName) &gt; 0">
              <xsl:value-of select="aspdnsf:ManufacturerLink(ProductManufacturerId, ProductManufacturerSEName, '0', '0', '1')" />
            </xsl:when>
          </xsl:choose>
        </xsl:variable>
        <xsl:variable name="fullSku" select="concat($productSKU, SkuSuffix)" />
        <xsl:variable name="productConditionText" select="aspdnsf:RetrieveProductConditionText(Condition)" />
        <xsl:variable name="mpn" select="concat(ManufacturerPartNumber, VariantManufacturerPartNumber)" />
        <xsl:variable name="GTINValue" select="aspdnsf:ValidateGTIN(GTIN)" />
        <xsl:variable name="stockStatusText" select="aspdnsf:GetStockStatusText(ProductID, VariantID, 'Product')" />
        <xsl:variable name="productStartDateTime" select="aspdnsf:GetISODateTime(AvailableStartDate)" />
        <xsl:variable name="productEndDateTime" select="aspdnsf:GetISODateTime(AvailableStopDate)" />
        <xsl:variable name="dimensionUnits" select="aspdnsf:ToLower(aspdnsf:AppConfig('Localization.DimensionUnits'))" />
        <xsl:variable name="weightUnits" select="aspdnsf:ToLower(aspdnsf:AppConfig('Localization.WeightUnits'))" />

        <xsl:choose>
          <xsl:when test="IsAKit=1">
            <div class="page-row">
              Display of Kit Products is not supported by this XmlPackage. XmlPackage=<xsl:value-of select="$XmlPackageName" />
            </div>
          </xsl:when>
          <xsl:otherwise>
            <xsl:if test="string-length($GTINValue) &gt; 0">
              <meta itemprop="{substring-before($GTINValue, '|')}" content="{substring-after($GTINValue, '|')}"/>
            </xsl:if>
            <xsl:if test="string-length($mpn) &gt; 0">
              <meta itemprop="mpn" content="{$mpn}"/>
            </xsl:if>
            <xsl:if test="string-length(Dimensions) &gt; 0 and string-length($dimensionUnits) &gt; 0">
              <xsl:variable name="pWidth" select="aspdnsf:RetrieveDimension(Dimensions, 'width')" />
              <xsl:if test="string-length($pWidth) &gt; 0">
                <meta itemprop="width" content="{concat($pWidth, ' ', $dimensionUnits)}"/>
              </xsl:if>
              <xsl:variable name="pHeight" select="aspdnsf:RetrieveDimension(Dimensions, 'height')" />
              <xsl:if test="string-length($pHeight) &gt; 0">
                <meta itemprop="height" content="{concat($pHeight, ' ', $dimensionUnits)}"/>
              </xsl:if>
              <xsl:variable name="pDepth" select="aspdnsf:RetrieveDimension(Dimensions, 'depth')" />
              <xsl:if test="string-length($pDepth) &gt; 0">
                <meta itemprop="depth" content="{concat($pDepth, ' ', $dimensionUnits)}"/>
              </xsl:if>
            </xsl:if>
            <xsl:if test="string-length(Weight) &gt; 0 and string-length($weightUnits) &gt; 0">
              <xsl:variable name="pWeight" select="aspdnsf:ValidateWeight(Weight)" />
              <xsl:if test="string-length($pWeight) &gt; 0">
                <meta itemprop="weight" content="{concat(aspdnsf:FormatDecimal($pWeight, '2'), ' ', $weightUnits)}"/>
              </xsl:if>
            </xsl:if>
            <xsl:if test="string-length($productConditionText) &gt; 0">
              <link itemprop="itemCondition" href="{concat(aspdnsf:GetCurrentProtocol(), '://schema.org/', concat($productConditionText, 'Condition'))}" content="{aspdnsf:ToLower($productConditionText)}"/>
            </xsl:if>
            <xsl:if test="string-length($fullSku) &gt; 0">
              <meta itemprop="sku" content="{$fullSku}"/>
            </xsl:if>
            <xsl:if test="$productId &gt; 0">
              <meta itemprop="productID" content="{$productId}"/>
            </xsl:if>
            <xsl:if test="((string-length($pImageLarge) &gt; 0) and (contains(substring-after($pImageLarge, 'images/'),'.')) and (not(contains($pImageLarge, 'nopicture.gif'))) and (not(contains($pImageLarge, 'nopictureicon.gif'))))">
              <!--This is necessary to escape ampersands in watermaked urls-->
              <xsl:variable name="BeginningImageMetaTag">
                <xsl:text>&lt;meta itemprop="image" content="</xsl:text>
              </xsl:variable>
              <xsl:variable name="EndImageMetaTag">
                <xsl:text>" /&gt;</xsl:text>
              </xsl:variable>
              <xsl:value-of select="$BeginningImageMetaTag" disable-output-escaping="yes" />
              <xsl:value-of select="$pImageLarge" disable-output-escaping="yes" />
              <xsl:value-of select="$EndImageMetaTag" disable-output-escaping="yes" />
            </xsl:if>
            <xsl:if test="((string-length($pManufacturerName) &gt; 0) or (string-length($pManufacturerLink) &gt; 0))">
              <span itemprop="manufacturer" itemscope="" itemtype="{$schemaOrganizationURL}">
                <xsl:if test="string-length($pManufacturerName) &gt; 0">
                  <meta itemprop="name" content="{$pManufacturerName}"/>
                </xsl:if>
                <xsl:if test="string-length($pManufacturerLink) &gt; 0">
                  <meta itemprop="url" content="{$pManufacturerLink}"/>
                </xsl:if>
              </span>
            </xsl:if>
            <xsl:if test="string-length($schemaProductLink) &gt; 0">
              <meta itemprop="url" content="{$schemaProductLink}"/>
            </xsl:if>

            <div class="page-row">
              <div class="col-md-5">
                <xsl:value-of select="aspdnsf:LookupProductImageForDetail(ProductID, ImageFilenameOverride, SKU, 'icon', 1, $AltText)" disable-output-escaping="yes"/>
              </div>
              <div class="col-md-6 item-detail-box pull-right">
                <div>
                  <h5 class="product-page-header" itemprop="name">
                    <xsl:value-of select="$pName" disable-output-escaping="yes" />
                  </h5>
                  <p itemprop="description">
                    <xsl:value-of select="$pDescription" disable-output-escaping="yes"/>
                  </p>
                  <p itemprop="ProductID">
                    <span>
                      <font>Product ID: </font>
                      <xsl:value-of select="ProductID" />
                    </span>
                  </p>
                  <xsl:value-of select="aspdnsf:ProductNavLinks(ProductID, /root/Runtime/EntityID, /root/Runtime/EntityName, /root/EntityHelpers/*[name()=/root/Runtime/EntityName]/descendant::Entity[EntityID=/root/Runtime/EntityID]/SEName, 0, 1, 1)" disable-output-escaping="yes" />
                  <xsl:if test="number(CustomerEntersPrice)=0">
                    <!-- Add a dynamically-named div to the page that the add to cart form will look for to find the price -->
                    <div itemprop="offers" itemscope="" itemtype="{$schemaOfferURL}">
                      <xsl:attribute name="id">
                        VariantPrice_<xsl:value-of select="VariantID"/>
                      </xsl:attribute>
                      <xsl:if test="string-length($stockStatusText) &gt; 0">
                        <link itemprop="availability" href="{concat(aspdnsf:GetCurrentProtocol(), '://schema.org/', substring-before($stockStatusText, '|'))}" content="{substring-after($stockStatusText, '|')}"/>
                      </xsl:if>
                      <xsl:if test="string-length($productStartDateTime) &gt; 0">
                        <meta itemprop="availabilityStarts" content="{$productStartDateTime}"/>
                      </xsl:if>
                      <xsl:if test="string-length($productEndDateTime) &gt; 0">
                        <meta itemprop="availabilityEnds" content="{$productEndDateTime}"/>
                      </xsl:if>
                      <xsl:value-of select="aspdnsf:GetVariantPriceForItem(VariantID, number(HidePriceUntilCart), Price, SalePrice, ExtendedPrice, Points, $pSalesPromptName, TaxClassID)" disable-output-escaping="yes" />
                    </div>
                  </xsl:if>
                  <xsl:value-of select="aspdnsf:AddtoCartForm(ProductID, VariantID, 1)" disable-output-escaping="yes"/>

                  <!-- Run the Promotion template to display the call to action text for any auto-assigned promos that apply to this product -->
                  <xsl:apply-templates select="$AvailablePromotions/Promotion[ProductId=$productId]" />
                </div>
              </div>
            </div>

            <xsl:value-of select="aspdnsf:RelatedProducts(ProductID)" disable-output-escaping="yes"/>
            <xsl:value-of select="aspdnsf:RecentlyViewed(ProductID)" disable-output-escaping="yes"/>
            <xsl:value-of select="aspdnsf:ShowUpsellProducts(ProductID)" disable-output-escaping="yes"/>
            <xsl:value-of select="aspdnsf:AlsoBought(ProductID, VariantID)" disable-output-escaping="yes"/>
            <xsl:value-of select="aspdnsf:ProductSpecs(ProductID, 1, SpecsInline, SpecCall, 400)" disable-output-escaping="yes"/>
            <xsl:value-of select="aspdnsf:ProductRatings(ProductID, 0, 0, 0, 1)" disable-output-escaping="yes"/>

          </xsl:otherwise>
        </xsl:choose>

      </xsl:template>
      <xsl:template match="Promotion">
        <div class="promotion-call-to-action">
          <xsl:value-of select="CallToAction" disable-output-escaping="yes" />
        </div>
      </xsl:template>
    </xsl:stylesheet>
  </PackageTransform>
</package>
