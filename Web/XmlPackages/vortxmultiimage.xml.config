<?xml version="1.0" standalone="yes" ?>
<package version="2.1" displayname="Vortx Multi Image" debug="false" includeentityhelper="false">
  <!-- *********************************************************** -->
  <!-- Vortx Advanced Product Image Viewer Version 2.0             -->
  <!-- *********************************************************** -->
  <query name="Installation" rowElementName="Settings" runif="install">
    <sql>
      <![CDATA[
				--string resources
				IF (NOT EXISTS (SELECT Name FROM StringResource WHERE Name='ImageViewer.ViewsLabel'))
                begin
	                INSERT INTO StringResource (StringResourceGUID, Name, LocaleSetting, ConfigValue, Modified, CreatedOn) 
	                VALUES(newid(), 'ImageViewer.ViewsLabel', 'en-US', 'Alternate views:', 0, GETDATE())
                end
				IF (NOT EXISTS (SELECT Name FROM StringResource WHERE Name='ImageViewer.ColorsLabel'))
                begin
	                INSERT INTO StringResource (StringResourceGUID, Name, LocaleSetting, ConfigValue, Modified, CreatedOn) 
	                VALUES(newid(), 'ImageViewer.ColorsLabel', 'en-US', 'Available colors:', 0, GETDATE())
                end
				IF (NOT EXISTS (SELECT Name FROM StringResource WHERE Name='ImageViewer.VariantsLabel'))
                begin
	                INSERT INTO StringResource (StringResourceGUID, Name, LocaleSetting, ConfigValue, Modified, CreatedOn) 
	                VALUES(newid(), 'ImageViewer.VariantsLabel', 'en-US', 'Other Options:', 0, GETDATE())
                end
				IF (NOT EXISTS (SELECT Name FROM AppConfig WHERE Name='ImageViewer.UseVariantImages'))
				begin
					INSERT INTO AppConfig (Name, ConfigValue, Description, GroupName, ValueType) 
					VALUES('ImageViewer.UseVariantImages', 'false', 'Set this to true to have the advanced image viewer display variant images rather than product images.' , 'DISPLAY', 'boolean')
				end
            ]]>
    </sql>
    <queryparam paramname="@ProductID"       paramtype="request" requestparamname="ProductID"       sqlDataType="int" defvalue="0"  validationpattern="^\d{1,10}$" />
    <queryparam paramname="@CustomerLevelID" paramtype="runtime" requestparamname="CustomerLevelID" sqlDataType="int" defvalue="0"  validationpattern="" />
    <queryparam paramname="@affiliateID"     paramtype="system"  requestparamname="AffiliateID"     sqlDataType="int" defvalue="0"  validationpattern="" />
  </query>
  <query name="Products" rowElementName="Product">
    <sql>
      <![CDATA[
                select pv.Colors, p.ImageFilenameOverride, p.SKU, p.SEAltText, p.Name from product p
                left join productvariant pv on p.productid = pv.productid
                where p.productid = @ProductID
                and pv.isdefault = 1
            ]]>
    </sql>
    <queryparam paramname="@ProductID"       paramtype="request" requestparamname="ProductID"       sqlDataType="int" defvalue="0"  validationpattern="^\d{1,10}$" />
    <queryparam paramname="@CustomerLevelID" paramtype="runtime" requestparamname="CustomerLevelID" sqlDataType="int" defvalue="0"  validationpattern="" />
    <queryparam paramname="@affiliateID"     paramtype="system"  requestparamname="AffiliateID"     sqlDataType="int" defvalue="0"  validationpattern="" />
  </query>
  <PackageTransform>
    <xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
						xmlns:msxsl="urn:schemas-microsoft-com:xslt"
						xmlns:aspdnsf="urn:aspdnsf"
						xmlns:vortx="urn:vortximage"
						exclude-result-prefixes="aspdnsf vortx msxsl">

      <msxsl:script language="CSharp" implements-prefix="vortx">
        <msxsl:assembly name="App_Code.Vortx.VortxFramework" />
        <msxsl:assembly name="AspDotNetStorefrontCore" />
        <![CDATA[         
						public static XPathNodeIterator ProductImageCollectionXML(int ProductID, string ImageFileNameOverride, string SKU, string colors )
						{
							return VortxExtensions.ProductImageCollectionXML(ProductID, ImageFileNameOverride, SKU, colors);
						} 
						
						public static String ProductImageCollectionString(int ProductID, string ImageFileNameOverride, string SKU, string colors)
						{
							return VortxExtensions.ProductImageCollectionString(ProductID, ImageFileNameOverride, SKU, colors);
						}
					  
						public static XPathNodeIterator VariantImageCollectionXML(int productId)
						{
							return VortxExtensions.VariantImageCollectionXML(productId);
						} 
						
						public static String VariantImageCollectionString(int productId)
						{
							return VortxExtensions.VariantImageCollectionString(productId);
						}
						
						public static String RemoveQuotes(string s)
						{
						return s.Replace("\"", "").Replace("'", "");
						}
				]]>
      </msxsl:script>
      <xsl:output method="html" omit-xml-declaration="yes" />

      <xsl:param name="ProductID" select="/root/Runtime/productid" />
      <xsl:param name="SkinID" select="/root/Runtime/SkinID" />
      <xsl:param name="ImageFilenameOverride" select="/root/Products/Product/ImageFilenameOverride" />
      <xsl:param name="SKU" select="/root/Products/Product/SKU" />
      <xsl:param name="Colors" select="/root/Products/Product/Colors" />
      <xsl:param name="AltText" >
        <xsl:choose>
          <xsl:when test="string-length(/root/Products/Product/SEAltText) &gt; 0">
            <xsl:value-of select="/root/Products/Product/SEAltText" disable-output-escaping="yes" />
          </xsl:when>
          <xsl:otherwise>
            <xsl:value-of select="/root/Products/Product/Name" disable-output-escaping="yes" />
          </xsl:otherwise>
        </xsl:choose>
      </xsl:param>
      <xsl:param name="WidgetToDisplay" select="/root/Runtime/widgettodisplay" />
      <xsl:param name="ProductImageData" select="vortx:ProductImageCollectionXML($ProductID, $ImageFilenameOverride, $SKU, $Colors)" />
      <xsl:param name="VariantImageData" select="vortx:VariantImageCollectionXML($ProductID)" />


      <xsl:param name="minImageIndex" select="$ProductImageData/ProductImages/attribute::minimageindex" />
      <xsl:param name="maxImageIndex" select="$ProductImageData/ProductImages/attribute::maximageindex" />
      <xsl:param name="selectedView" select="1" />
      <!--it would be cool to be able to pass this in on the querystring-->
      <xsl:param name="selectedColor" select="''" />
      <!--it would be cool to be able to pass this in on the querystring-->
      <xsl:param name="defaultLargeImage" select="$ProductImageData/ProductImages/Size[@value='Large']/DefaultImage" />
      <xsl:param name="defaultLargeWidth" select="$ProductImageData/ProductImages/Size[@value='Large']/DefaultImage/@width" />
      <xsl:param name="defaultLargeHeight" select="$ProductImageData/ProductImages/Size[@value='Large']/DefaultImage/@height" />



      <xsl:param name="HasLargeImage" select="($defaultLargeImage != '') and (not(contains($defaultLargeImage,'nopicture')))" />
      <xsl:param name="ViewsLabel" >
        <xsl:choose>
          <xsl:when test="aspdnsf:StringResource('ImageViewer.ViewsLabel') != 'ImageViewer.ViewsLabel'">
            <xsl:value-of select="aspdnsf:StringResource('ImageViewer.ViewsLabel')" disable-output-escaping="yes" />
          </xsl:when>
          <xsl:otherwise>Alternate views:</xsl:otherwise>
        </xsl:choose>
      </xsl:param>
      <xsl:param name="ColorsLabel" >
        <xsl:choose>
          <xsl:when test="aspdnsf:StringResource('ImageViewer.ColorsLabel') != 'ImageViewer.ColorsLabel'">
            <xsl:value-of select="aspdnsf:StringResource('ImageViewer.ColorsLabel')" disable-output-escaping="yes" />
          </xsl:when>
          <xsl:otherwise>Available colors:</xsl:otherwise>
        </xsl:choose>
      </xsl:param>
      <xsl:param name="VariantsLabel" >
        <xsl:choose>
          <xsl:when test="aspdnsf:StringResource('ImageViewer.VariantsLabel') != 'ImageViewer.VariantsLabel'">
            <xsl:value-of select="aspdnsf:StringResource('ImageViewer.VariantsLabel')" disable-output-escaping="yes" />
          </xsl:when>
          <xsl:otherwise>Other Options:</xsl:otherwise>
        </xsl:choose>
      </xsl:param>
      <xsl:variable name="UseVariantImages" select="aspdnsf:AppConfigBool('ImageViewer.UseVariantImages') = 'true'" />

      <xsl:template match="/">
        <xsl:choose>
          <xsl:when test="$UseVariantImages">
            <xsl:apply-templates select="$VariantImageData/VariantImages"/>
            <!--the line below is for debugging the image viewer-->
            <!--<xsl:value-of select="vortx:VariantImageCollectionString($ProductID)" disable-output-escaping="no" />-->
          </xsl:when>
          <xsl:otherwise>
            <xsl:apply-templates select="$ProductImageData/ProductImages"/>
            <!--the line below is for debugging the image viewer-->
            <!--<xsl:value-of select="vortx:ProductImageCollectionString($ProductID, $ImageFilenameOverride, $SKU, $Colors)" disable-output-escaping="no" />-->
          </xsl:otherwise>
        </xsl:choose>

      </xsl:template>

      <xsl:template match="ProductImages">
        <xsl:param name="hasMultiColorImages" >
          <!--this is a confusing line, but just tests for the total number of nodes that don't contain the no picture icon.-->
          <xsl:choose>
            <xsl:when test="count(Size[@value = 'Icon']/Color[@value != '']/View[not(contains(node(),'nopicture'))]) &gt; 0">
              <xsl:text>true</xsl:text>
            </xsl:when>
            <xsl:otherwise>
              <xsl:text>false</xsl:text>
            </xsl:otherwise>
          </xsl:choose>
        </xsl:param>
        <xsl:param name="hasMultiViewImages" >
          <xsl:choose>
            <xsl:when test="$maxImageIndex &gt; 1">
              <xsl:text>true</xsl:text>
            </xsl:when>
            <xsl:otherwise>
              <xsl:text>false</xsl:text>
            </xsl:otherwise>
          </xsl:choose>
        </xsl:param>


        <!--include jquery if we don't have it-->
        <script type="text/javascript">
          if(typeof jQuery !== 'function') {
          document.write(unescape("%3Cscript src='//ajax.googleapis.com/ajax/libs/jquery/1.10.2/jquery.min.js' type='text/javascript'%3E%3C/script%3E"));
          }
        </script>

        <!--if we've got a large image than setup the zoom functionality-->
        <xsl:if test="$HasLargeImage">
          <script type="text/javascript" src="jscripts/jquery.zoom.min.js"></script>
          <script>
            $(document).ready(function(){
            //setup the zoom plugin
            $('.j-zoom').zoom();
            });
          </script>
        </xsl:if>

        <script type="text/javascript" src="jscripts/imageviewer.js"></script>
        <script type="text/javascript">
          var productId = '<xsl:value-of select="ProductID" disable-output-escaping="yes" />';
          var color = '<xsl:value-of select="$selectedColor" disable-output-escaping="yes" />';
          var view = '<xsl:value-of select="$selectedView" disable-output-escaping="yes" />';
          var hasMultiColorImages = <xsl:value-of select="$hasMultiColorImages" disable-output-escaping="yes" />;
          var hasLargeImage = <xsl:value-of select="$HasLargeImage" disable-output-escaping="yes" />;
          var hasMultiViewImages = <xsl:value-of select="$hasMultiViewImages" disable-output-escaping="yes" />;
          var defaultLargeImage = new imageInfo('<xsl:value-of select="$defaultLargeImage" disable-output-escaping="yes" />','<xsl:value-of select="$defaultLargeWidth" disable-output-escaping="yes" />','<xsl:value-of select="$defaultLargeHeight" disable-output-escaping="yes" />');

          //an array of each image's src
          var imageSizes = new Array();
          <xsl:for-each select="Size">
            <xsl:variable name="jsColorVariable" select="concat('v', translate(@value, translate(@value, 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789', ''),''), 'Colors')" />
            <xsl:value-of select="$jsColorVariable" /> = new Array();
            imageSizes['<xsl:value-of select="vortx:RemoveQuotes(@value)" />'] = <xsl:value-of select="$jsColorVariable" />;
            <xsl:for-each select="Color[@value]">
              <xsl:variable name="jsViewsVariable" select="concat('v', translate(@value, translate(@value, 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789', ''),''), 'Views')" />
              <xsl:value-of select='$jsViewsVariable'/> = new Array();
              <xsl:value-of select="$jsColorVariable" />['<xsl:value-of select="vortx:RemoveQuotes(@value)" />'] = <xsl:value-of select='$jsViewsVariable'/>;
              <xsl:for-each select="View">
                <xsl:value-of select='$jsViewsVariable'/>[<xsl:value-of select="vortx:RemoveQuotes(@value)" />] = new imageInfo('<xsl:value-of select="." />',<xsl:value-of select="@width" />,<xsl:value-of select="@height" />);
              </xsl:for-each>
            </xsl:for-each>
          </xsl:for-each>

          $(document).ready(function () {
          //get the color selector
          var colorSelector = $('select[id^="Color"]');

          //remove any onchange events on the color selector
          colorSelector.prop("onchange", null);

          if(hasMultiColorImages) {
          //on pageload set the color to the value of the dropdown
          if(colorSelector.val() !== '-,-') {
          setColor(parseColorFromSelectValue(colorSelector.val()));
          }

          //set the image color when the color selector changes
          colorSelector.change(function () {
          if(this.value !== '-,-') {
          setColor(parseColorFromSelectValue(this.value));
          }
          });
          }
          });
        </script>

        <xsl:choose>
          <xsl:when test="$WidgetToDisplay = 'coloricons'">
            <xsl:if test="$hasMultiColorImages = 'true'">
              <div class="item-thumbnails" id="colorControls">
                <div class="black-color" id="colorOptionsLabel">
                  <xsl:value-of select="$ColorsLabel" disable-output-escaping="yes" />
                </div>
                <xsl:apply-templates select="Size[@value = 'Icon']/Color[@value != '']/View[(@value = $selectedView) and (not(contains(node(),'nopicture')))]" >
                  <xsl:with-param name="type" select="'color'" />
                </xsl:apply-templates>
                <div style="clear: both;"></div>
              </div>
            </xsl:if>
          </xsl:when>
          <xsl:otherwise>
            <div id="imageViewer">
              <div class="" id="imageViewerTop" cellspacing="0" cellpadding="0">
                <div id="productImageWrap">
                  <span class="product-img-box">
                    <img id="productImage" class="img-responsive" alt="{$AltText}" src="{Size[@value = 'Medium']/DefaultImage}" />
                  </span>
                </div>
                <div style="clear:both;"></div>
              </div>

              <div>
                <xsl:if test="$hasMultiViewImages = 'true'" >
                  <div class="black-color" id="viewOptionsLabel">
                    <xsl:value-of select="$ViewsLabel" disable-output-escaping="yes" />
                  </div>
                </xsl:if>
                <div id="viewControlsWrap">
                  <xsl:if test="$hasMultiViewImages = 'true'" >
                    <div class="item-thumbnails" id="viewControls">
                      <xsl:apply-templates select="Size[@value = 'Icon']/Color[@value = $selectedColor]/View[@value &lt;= $maxImageIndex]" >
                        <xsl:with-param name="type" select="view" />
                      </xsl:apply-templates>
                    </div>
                  </xsl:if>
                  <div style="clear: both;"></div>
                </div>
                <div style="clear: both;"></div>
              </div>

            </div>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:template>

      <xsl:template match="VariantImages">
        <xsl:param name="hasMultipleVariants" select="count(Variant) &gt; 1" />
        <xsl:param name="defaultLargeVariantImageSrc" select="Variant[@isdefault=1]/Image[@size = 'large']" />
        <xsl:param name="hasLargeVariantImage" select="(not(contains($defaultLargeVariantImageSrc,'nopicture'))) and string-length($defaultLargeVariantImageSrc) &gt; 0" />
        <xsl:param name="selectedVariantId" select="Variant[@isdefault = 1]/@variantid" />

        <xsl:param name="hasMultiVariantImages" >
          <!--this is a confusing line, but just tests for the total number of nodes that don't contain the no picture icon.-->
          <xsl:choose>
            <xsl:when test="count(Variant/Image[@size = 'icon'][not(contains(node(),'nopicture'))]) &gt; 0">
              <xsl:text>true</xsl:text>
            </xsl:when>
            <xsl:otherwise>
              <xsl:text>false</xsl:text>
            </xsl:otherwise>
          </xsl:choose>
        </xsl:param>

        <xsl:if test="not($WidgetToDisplay)">
          <!--include jquery if we don't have it-->
          <script type="text/javascript">
            if(typeof jQuery !== 'function') {
            document.write(unescape("%3Cscript src='//ajax.googleapis.com/ajax/libs/jquery/1.10.2/jquery.min.js' type='text/javascript'%3E%3C/script%3E"));
            }
          </script>

          <!--if we've got a large image than setup the zoom functionality-->
          <xsl:if test="$hasLargeVariantImage">
            <script type="text/javascript" src="jscripts/jquery.zoom.min.js"></script>
            <script>
              $(document).ready(function(){
              //setup the zoom plugin
              $('.j-zoom').zoom();
              });
            </script>
          </xsl:if>

          <script type="text/javascript" src="jscripts/imageviewer.js"></script>
          <script type="text/javascript">
            var productId = '<xsl:value-of select="ProductID" disable-output-escaping="yes" />';
            var hasMultipleVariants = <xsl:value-of select="$hasMultipleVariants" disable-output-escaping="yes" />;
            var hasLargeImage = <xsl:value-of select="$hasLargeVariantImage" disable-output-escaping="yes" />;
            var defaultLargeImage = new imageInfo('<xsl:value-of select="$defaultLargeImage" disable-output-escaping="yes" />','<xsl:value-of select="$defaultLargeWidth" disable-output-escaping="yes" />','<xsl:value-of select="$defaultLargeHeight" disable-output-escaping="yes" />');
            var selectedVariantId = <xsl:value-of select="$selectedVariantId" />;

            //an array of each image's src
            var variantImages = new Array();
            <xsl:for-each select="Variant">
              <xsl:variable name="jsVariantVariable" select="concat('variant_', @variantid)" />
              var <xsl:value-of select="$jsVariantVariable" /> = new Array();
              variantImages['<xsl:value-of select="@variantid" />'] = <xsl:value-of select="$jsVariantVariable" />;
              <xsl:for-each select="Image">
                <xsl:value-of select='$jsVariantVariable'/>['<xsl:value-of select="@size" />'] = new imageInfo('<xsl:value-of select="." />',<xsl:value-of select="@width" />,<xsl:value-of select="@height" />);
              </xsl:for-each>
            </xsl:for-each>

            $(document).ready(function () {
            //get the color selector
            var colorSelector = $('select[id^="Color"]');

            //remove any onchange events on the color selector
            colorSelector.prop("onchange", null);


            //get the variant selector
            var variantSelector = $('#variantSelector');

            if(hasMultipleVariants) {
            //on pageload set the variant to the value of the dropdown
            setVariant(variantSelector.val());

            //set the variant image when the variant selector changes
            variantSelector.change(function () {
            setVariant(variantSelector.val());
            });
            }
            });

          </script>
          <div id="imageViewer">
            <div id="imageViewerTop" cellspacing="0" cellpadding="0">
              <div id="productImageWrap">
                <xsl:choose>
                  <xsl:when test="$hasLargeVariantImage">
                    <a id="largeImageLink" href="#" onclick="popUpLarge()" class="j-zoom productImageLink" >
                      <img id="productImage" class="productImage" alt="{$AltText}" src="{Variant[@variantid = $selectedVariantId]/Image[@size = 'large']}" />
                    </a>
                  </xsl:when>
                  <xsl:otherwise>
                    <span class="j-zoom productImageLink">
                      <img id="productImage" class="productImage" alt="{$AltText}" src="{Variant[@variantid = $selectedVariantId]/Image[@size = 'medium']}" />
                    </span>
                  </xsl:otherwise>
                </xsl:choose>
              </div>
              <div style="clear:both;"></div>
            </div>

            <div>
              <xsl:if test="$hasMultiVariantImages = 'true'" >
                <div id="viewOptionsLabel">
                  <xsl:value-of select="$VariantsLabel" disable-output-escaping="yes" />
                </div>
                <div id="viewControlsWrap">
                  <div id="viewControls">
                    <xsl:apply-templates select="Variant/Image[@size = 'icon']" />
                  </div>
                  <div style="clear: both;"></div>
                </div>
              </xsl:if>
              <div style="clear: both;"></div>
            </div>

          </div>
        </xsl:if>
      </xsl:template>


      <xsl:template match="View">
        <xsl:param name="type" />
        <xsl:variable name="Color">
          <xsl:text>'</xsl:text>
          <xsl:value-of select="parent::node()/@value" disable-output-escaping="yes" />
          <xsl:text>'</xsl:text>
        </xsl:variable>
        <xsl:variable name="View" select="@value" />

        <xsl:choose>
          <xsl:when test="$type = 'color'">
            <div class="link-wrap">
              <a href="javascript:setColor({$Color})">
                <img src="{.}" alt="{parent::node()/@value}" />
              </a>
            </div>
          </xsl:when>
          <xsl:otherwise>
            <div class="link-wrap">
              <a href="javascript:setView({$View})">
                <img src="{.}" />
              </a>
            </div>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:template>

      <xsl:template match="Image">
        <div class="link-wrap">
          <a href="javascript:setVariant({parent::node()/@variantid})">
            <img src="{.}" alt="{parent::node()/@name}" />
          </a>
        </div>
      </xsl:template>

    </xsl:stylesheet>
  </PackageTransform>
</package>
