<?xml version="1.0" standalone="yes" ?>
<!-- ##################################################################################	-->
<!-- Copyright AspDotNetStorefront.com. All Rights Reserved.							-->
<!-- http://www.aspdotnetstorefront.com													-->
<!-- For details on this license please visit the product homepage at the URL above.	-->
<!-- THE ABOVE NOTICE MUST REMAIN INTACT.												-->
<!-- ##################################################################################	-->
<package version="2.1" displayname="Guided Navigation Installer" debug="false" allowengine="true">
	<query name="InstallAppConfigs" rowElementName="AppConfigs" runif="install">
		<sql>
			<![CDATA[
                if not exists(select * from dbo.AppConfig where name = 'GuidedNavigation.UseDropdowns')
					INSERT INTO AppConfig (SuperOnly,Name,GroupName,Description,ConfigValue, ValueType) 
					values(0,'GuidedNavigation.UseDropdowns', 'GUIDEDNAVIGATION','Use Dropdown boxes for all guided navigation groups. To select one group as a dropdown add the word "dropdown" to its extension data', 'false', 'boolean')

				if not exists(select * from dbo.AppConfig where name = 'GuidedNavigation.LinkCount')
					INSERT INTO AppConfig (SuperOnly,Name,GroupName,Description,ConfigValue, ValueType) 
					values(0,'GuidedNavigation.LinkCount', 'GUIDEDNAVIGATION','The number of links to display before the "more..." link that displays all links.', '10', 'integer')

				if not exists(select * from dbo.AppConfig where name = 'GuidedNavigation.ShowCounts')
					INSERT INTO AppConfig (SuperOnly,Name,GroupName,Description,ConfigValue, ValueType) 
					values(0,'GuidedNavigation.ShowCounts', 'GUIDEDNAVIGATION','Show Sub-Product counts next to links', 'true', 'boolean')

				if not exists(select * from dbo.AppConfig where name = 'GuidedNavigation.ShowEmpties')
					INSERT INTO AppConfig (SuperOnly,Name,GroupName,Description,ConfigValue, ValueType) 
					values(0,'GuidedNavigation.ShowEmpties', 'GUIDEDNAVIGATION','Show empty categories (unlinked)', 'false', 'boolean')

				if not exists(select * from dbo.AppConfig where name = 'GuidedNavigation.UseHierarchy')
					INSERT INTO AppConfig (SuperOnly,Name,GroupName,Description,ConfigValue, ValueType) 
					values(0,'GuidedNavigation.UseHierarchy', 'GUIDEDNAVIGATION','Enables Section Hierarchy. Children will only be displayed when the parent is selected. Hierarchical levels alternate between section headers and actual departments. If this is set to false only the first two levels (group and departments) will display on the site.', 'false', 'boolean')

				if not exists(select * from dbo.AppConfig where name = 'GuidedNavigation.ShowSelected')
					INSERT INTO AppConfig (SuperOnly,Name,GroupName,Description,ConfigValue, ValueType) 
					values(0,'GuidedNavigation.ShowSelected', 'GUIDEDNAVIGATION','If true the "You have selected" section will show above the left nav.', 'true', 'boolean')

				if not exists(select * from dbo.AppConfig where name = 'GuidedNavigation.UseFullTextSearch')
					INSERT INTO AppConfig (SuperOnly,Name,GroupName,Description,ConfigValue, ValueType) 
					values(0,'GuidedNavigation.UseFullTextSearch', 'GUIDEDNAVIGATION','If true than the guided search will use full text indexes - note that if this is enabled and full text is not setup you will receive an error.', 'false', 'boolean')

				if not exists(select * from dbo.AppConfig where name = 'GuidedNavigation.LayoutStyle')
					INSERT INTO AppConfig (SuperOnly,Name,GroupName,Description,ConfigValue, ValueType) 
					values(0,'GuidedNavigation.LayoutStyle', 'GUIDEDNAVIGATION','Options are "onecolumn" or "twocolumn". The two column option works best if your non guided nav pages are full width (no left navigation). the default is onecolumn', 'onecolumn', 'string')

				if not exists(select * from dbo.AppConfig where name = 'GuidedNavigation.NavigationElementSelector')
					INSERT INTO AppConfig (SuperOnly,Name,GroupName,Description,ConfigValue, ValueType) 
					values(0,'GuidedNavigation.NavigationElementSelector', 'GUIDEDNAVIGATION','Use this option if you would like to replace your normal navigation with filtered navigation options. This appconfig takes a CSS selector used to locate your navigation element in your template and overwrite it''s contents with filtered attribute options. This will only occur on pages that use the guided navigation xmlpackage. Example value: #verticalNavWrapper', '', 'string')
					
				if not exists(select * from dbo.AppConfig where name = 'GuidedNavigation.IsInstalled')
					INSERT INTO AppConfig (SuperOnly,Name,GroupName,Description,ConfigValue, ValueType) 
					values(0,'GuidedNavigation.IsInstalled', 'GUIDEDNAVIGATION','This is used for reference by the application only. Please do not change this value.', 'false', 'boolean')

			]]>
		</sql>
	</query>
	
	<query name="InstallStringResources" rowElementName="StringResources" runif="install">
		<sql>
			<![CDATA[

				IF (NOT EXISTS (SELECT Name FROM StringResource WHERE (Name='GuidedNavigation.NavigationHeader' AND LocaleSetting='en-US')))
				begin
					INSERT INTO StringResource (StringResourceGUID, Name, LocaleSetting, ConfigValue, Modified, CreatedOn)
					VALUES(newid(), 'GuidedNavigation.NavigationHeader', 'en-US', 'Filter Your Results', 0, GETDATE())
				end

				IF (NOT EXISTS (SELECT Name FROM StringResource WHERE (Name='GuidedNavigation.SelectedLabel' AND LocaleSetting='en-US')))
				begin
					INSERT INTO StringResource (StringResourceGUID, Name, LocaleSetting, ConfigValue, Modified, CreatedOn)
					VALUES(newid(), 'GuidedNavigation.SelectedLabel', 'en-US', 'You have selected:', 0, GETDATE())
				end

				IF (NOT EXISTS (SELECT Name FROM StringResource WHERE (Name='GuidedNavigation.SearchTermLabel' AND LocaleSetting='en-US')))
				begin
					INSERT INTO StringResource (StringResourceGUID, Name, LocaleSetting, ConfigValue, Modified, CreatedOn)
					VALUES(newid(), 'GuidedNavigation.SearchTermLabel', 'en-US', 'Search Term:', 0, GETDATE())
				end

				IF (NOT EXISTS (SELECT Name FROM StringResource WHERE (Name='GuidedNavigation.RemoveLinkDescription' AND LocaleSetting='en-US')))
				begin
					INSERT INTO StringResource (StringResourceGUID, Name, LocaleSetting, ConfigValue, Modified, CreatedOn)
					VALUES(newid(), 'GuidedNavigation.RemoveLinkDescription', 'en-US', 'Remove this filter', 0, GETDATE())
				end

				IF (NOT EXISTS (SELECT Name FROM StringResource WHERE (Name='GuidedNavigation.RemoveLink' AND LocaleSetting='en-US')))
				begin
					INSERT INTO StringResource (StringResourceGUID, Name, LocaleSetting, ConfigValue, Modified, CreatedOn)
					VALUES(newid(), 'GuidedNavigation.RemoveLink', 'en-US', '(x)', 0, GETDATE())
				end

				IF (NOT EXISTS (SELECT Name FROM StringResource WHERE (Name='GuidedNavigation.SearchLabel' AND LocaleSetting='en-US')))
				begin
					INSERT INTO StringResource (StringResourceGUID, Name, LocaleSetting, ConfigValue, Modified, CreatedOn)
					VALUES(newid(), 'GuidedNavigation.SearchLabel', 'en-US', 'Search results:', 0, GETDATE())
				end

				IF (NOT EXISTS (SELECT Name FROM StringResource WHERE (Name='GuidedNavigation.SearchButtonText' AND LocaleSetting='en-US')))
				begin
					INSERT INTO StringResource (StringResourceGUID, Name, LocaleSetting, ConfigValue, Modified, CreatedOn)
					VALUES(newid(), 'GuidedNavigation.SearchButtonText', 'en-US', 'Go', 0, GETDATE())
				end

				IF (NOT EXISTS (SELECT Name FROM StringResource WHERE (Name='GuidedNavigation.SortBy' AND LocaleSetting='en-US')))
				begin
					INSERT INTO StringResource (StringResourceGUID, Name, LocaleSetting, ConfigValue, Modified, CreatedOn)
					VALUES(newid(), 'GuidedNavigation.SortBy', 'en-US', 'Sort By:', 0, GETDATE())
				end

				IF (NOT EXISTS (SELECT Name FROM StringResource WHERE (Name='GuidedNavigation.PageSizeLabel' AND LocaleSetting='en-US')))
				begin
					INSERT INTO StringResource (StringResourceGUID, Name, LocaleSetting, ConfigValue, Modified, CreatedOn)
					VALUES(newid(), 'GuidedNavigation.PageSizeLabel', 'en-US', 'Products per page:', 0, GETDATE())
				end

				IF (NOT EXISTS (SELECT Name FROM StringResource WHERE (Name='GuidedNavigation.PageLocationDescription' AND LocaleSetting='en-US')))
				begin
					INSERT INTO StringResource (StringResourceGUID, Name, LocaleSetting, ConfigValue, Modified, CreatedOn)
					VALUES(newid(), 'GuidedNavigation.PageLocationDescription', 'en-US', 'Viewing Page {0} of {1}', 0, GETDATE())
				end

				IF (NOT EXISTS (SELECT Name FROM StringResource WHERE (Name='GuidedNavigation.PageLabel' AND LocaleSetting='en-US')))
				begin
					INSERT INTO StringResource (StringResourceGUID, Name, LocaleSetting, ConfigValue, Modified, CreatedOn)
					VALUES(newid(), 'GuidedNavigation.PageLabel', 'en-US', 'Page:', 0, GETDATE())
				end

				IF (NOT EXISTS (SELECT Name FROM StringResource WHERE (Name='GuidedNavigation.PageSizeViewAll' AND LocaleSetting='en-US')))
				begin
					INSERT INTO StringResource (StringResourceGUID, Name, LocaleSetting, ConfigValue, Modified, CreatedOn)
					VALUES(newid(), 'GuidedNavigation.PageSizeViewAll', 'en-US', 'View All', 0, GETDATE())
				end

				IF (NOT EXISTS (SELECT Name FROM StringResource WHERE (Name='GuidedNavigation.SortByRelevance' AND LocaleSetting='en-US')))
				begin
					INSERT INTO StringResource (StringResourceGUID, Name, LocaleSetting, ConfigValue, Modified, CreatedOn)
					VALUES(newid(), 'GuidedNavigation.SortByRelevance', 'en-US', 'Relevance', 0, GETDATE())
				end

				IF (NOT EXISTS (SELECT Name FROM StringResource WHERE (Name='GuidedNavigation.SortByLowPrice' AND LocaleSetting='en-US')))
				begin
					INSERT INTO StringResource (StringResourceGUID, Name, LocaleSetting, ConfigValue, Modified, CreatedOn)
					VALUES(newid(), 'GuidedNavigation.SortByLowPrice', 'en-US', 'Low Price', 0, GETDATE())
				end

				IF (NOT EXISTS (SELECT Name FROM StringResource WHERE (Name='GuidedNavigation.SortByHighPrice' AND LocaleSetting='en-US')))
				begin
					INSERT INTO StringResource (StringResourceGUID, Name, LocaleSetting, ConfigValue, Modified, CreatedOn)
					VALUES(newid(), 'GuidedNavigation.SortByHighPrice', 'en-US', 'High Price', 0, GETDATE())
				end

				IF (NOT EXISTS (SELECT Name FROM StringResource WHERE (Name='GuidedNavigation.SortByName' AND LocaleSetting='en-US')))
				begin
					INSERT INTO StringResource (StringResourceGUID, Name, LocaleSetting, ConfigValue, Modified, CreatedOn)
					VALUES(newid(), 'GuidedNavigation.SortByName', 'en-US', 'Name A-Z', 0, GETDATE())
				end
				
			]]>
		</sql>
	</query>
			
	<query name="InstallGuidedNavigationEntityView" rowElementName="GuidedNavigationEntityView" runif="install">
		<sql>
			<![CDATA[
				if not exists (select * from dbo.sysobjects where id = object_id(N'GuidedNavigationEntityView') and type in (N'u'))
				begin
					CREATE TABLE [dbo].[GuidedNavigationEntityView](
						[CustomerID] [int] NOT NULL,
						[EntityName] [nvarchar](50) NOT NULL,
						[EntityID] [int] NOT NULL,
						[Priority] [int] NULL,
						[CreatedOn] [datetime] NOT NULL,
						[GUID] [uniqueidentifier] NOT NULL,
					 CONSTRAINT [PK_GuidedNavigationEntityView] PRIMARY KEY NONCLUSTERED 
					(
						[GUID] ASC
					)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
					) ON [PRIMARY]
					
					ALTER TABLE [dbo].[GuidedNavigationEntityView] ADD  CONSTRAINT [DF_GuidedNavigationEntityView_CreatedOn]  DEFAULT (getdate()) FOR [CreatedOn]
					ALTER TABLE [dbo].[GuidedNavigationEntityView] ADD  CONSTRAINT [DF_GuidedNavigationEntityView_GUID]  DEFAULT (newid()) FOR [GUID]
					
				end
				if not exists(SELECT * FROM sys.indexes WHERE name='GuidedEntityViewsIndex' AND object_id = OBJECT_ID('GuidedNavigationEntityView'))
				begin
					CREATE CLUSTERED INDEX [GuidedEntityViewsIndex] ON [dbo].[GuidedNavigationEntityView] 
					(
						[CustomerID] ASC,
						[EntityName] ASC,
						[EntityID] ASC
					)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
				end
				
				if not exists(SELECT * FROM sys.indexes WHERE name='GuidedNavigationEntityViewDateIndex' AND object_id = OBJECT_ID('GuidedNavigationEntityView'))
				begin
					CREATE NONCLUSTERED INDEX [GuidedNavigationEntityViewDateIndex] ON [dbo].[GuidedNavigationEntityView] 
					(
						[CreatedOn] DESC
					)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
				end
				
				if not exists(SELECT * FROM sys.indexes WHERE name='GuidedNavigationEntityViewPriority' AND object_id = OBJECT_ID('GuidedNavigationEntityView'))
				begin
					CREATE NONCLUSTERED INDEX [GuidedNavigationEntityViewPriority] ON [dbo].[GuidedNavigationEntityView] 
					(
						[Priority] DESC
					)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
				end
			]]>
		</sql>
	</query>
	
	<query name="DropTrackEntityViews" rowElementName="TrackEntityViews" runif="install">
		<sql>
			<![CDATA[
				if exists(SELECT * from sys.objects WHERE object_id = OBJECT_ID(N'[vortx_TrackEntityViews]') and type in ( N'P', N'PC' ))
				begin
					drop procedure [dbo].[vortx_TrackEntityViews]
				end
			]]>
		</sql>
	</query>
	
	<query name="InstallTrackEntityViews" rowElementName="TrackEntityViews" runif="install">
		<sql>
			<![CDATA[
				CREATE proc [dbo].[vortx_TrackEntityViews]
					@customerid int = 0,
					@EntityID	int = 0,
					@entityname nvarchar(50) = 'Search',
					@SectionIDs nvarchar(200) = '',
					@CategoryIDs nvarchar(200) = '',
					@ManufacturerIDs nvarchar(200) = '',
					@DistributorIDs nvarchar(200) = '',
					@GenreIDs nvarchar(200) = '',
					@VectorIDs nvarchar(200) = ''
				AS
				BEGIN
					declare @EnableSmartSorting tinyint 
					SELECT @EnableSmartSorting = case ConfigValue when 'true' then 1 else 0 end FROM dbo.AppConfig with (nolock) WHERE [Name] = 'GuidedNavigation.EnableSmartSorting'
   
					  --GuidedNavigation options first to make sure the current entity gets the highest priority
					  if (@EnableSmartSorting = 1) 
					  begin
						if (@SectionIDs != '')
						begin
						  update GuidedNavigationEntityView set createdon = getdate() from GuidedNavigationEntityView rev with (nolock)
						  join Split(@SectionIDs, '-') s on rev.EntityID = s.Items
						  where customerid = @customerid and EntityName = 'Section' 
						  --and Priority = 3 
          
						  insert into GuidedNavigationEntityView(CustomerID, EntityName, EntityID, Priority)
						  select @customerid, 'Section' as EntityName, convert(int,Items) as EntityID, 3 as Priority from Split(@SectionIDs, '-')
							left join GuidedNavigationEntityView rev with (nolock) on rev.customerid = @customerid and rev.EntityName = 'Section' and rev.EntityID = convert(int,Items)
							where rev.guid is null
						end

						if (@CategoryIDs != '')
						begin
						  update GuidedNavigationEntityView set createdon = getdate() from GuidedNavigationEntityView rev with (nolock)
						  join Split(@CategoryIDs, '-') s on rev.EntityID = s.Items
						  where customerid = @customerid and EntityName = 'Category' 
						  --and Priority = 3 
          
						  insert into GuidedNavigationEntityView(CustomerID, EntityName, EntityID, Priority)
						  select @customerid, 'Category' as EntityName, convert(int,Items) as EntityID, 3 as Priority from Split(@CategoryIDs, '-')
							left join GuidedNavigationEntityView rev with (nolock) on rev.customerid = @customerid and rev.EntityName = 'Category' and rev.EntityID = convert(int,Items)
							where rev.guid is null
						end

						if (@ManufacturerIDs != '')
						begin
						  update GuidedNavigationEntityView set createdon = getdate() from GuidedNavigationEntityView rev with (nolock)
						  join Split(@ManufacturerIDs, '-') s on rev.EntityID = s.Items
						  where customerid = @customerid and EntityName = 'Manufacturer' 
						  --and Priority = 3 
          
						  insert into GuidedNavigationEntityView(CustomerID, EntityName, EntityID, Priority)
						  select @customerid, 'Manufacturer' as EntityName, convert(int,Items) as EntityID, 3 as Priority from Split(@ManufacturerIDs, '-')
							left join GuidedNavigationEntityView rev with (nolock) on rev.customerid = @customerid and rev.EntityName = 'Manufacturer' and rev.EntityID = convert(int,Items)
							where rev.guid is null
						end

						if (@DistributorIDs != '')
						begin
						  update GuidedNavigationEntityView set createdon = getdate() from GuidedNavigationEntityView rev with (nolock)
						  join Split(@DistributorIDs, '-') s on rev.EntityID = s.Items
						  where customerid = @customerid and EntityName = 'Distributor' 
						  --and Priority = 3 
          
						  insert into GuidedNavigationEntityView(CustomerID, EntityName, EntityID, Priority)
						  select @customerid, 'Distributor' as EntityName, convert(int,Items) as EntityID, 3 as Priority from Split(@DistributorIDs, '-')
							left join GuidedNavigationEntityView rev with (nolock) on rev.customerid = @customerid and rev.EntityName = 'Distributor' and rev.EntityID = convert(int,Items)
							where rev.guid is null
						end

						if (@GenreIDs != '')
						begin
						  update GuidedNavigationEntityView set createdon = getdate() from GuidedNavigationEntityView rev with (nolock)
						  join Split(@GenreIDs, '-') s on rev.EntityID = s.Items
						  where customerid = @customerid and EntityName = 'Genre' 
						  --and Priority = 3 
          
						  insert into GuidedNavigationEntityView(CustomerID, EntityName, EntityID, Priority)
						  select @customerid, 'Genre' as EntityName, convert(int,Items) as EntityID, 3 as Priority from Split(@GenreIDs, '-')
							left join GuidedNavigationEntityView rev with (nolock) on rev.customerid = @customerid and rev.EntityName = 'Genre' and rev.EntityID = convert(int,Items)
							where rev.guid is null
						end

						if (@VectorIDs != '')
						begin
						  update GuidedNavigationEntityView set createdon = getdate() from GuidedNavigationEntityView rev with (nolock)
						  join Split(@VectorIDs, '-') s on rev.EntityID = s.Items
						  where customerid = @customerid and EntityName = 'Vector' 
						  --and Priority = 3 
          
						  insert into GuidedNavigationEntityView(CustomerID, EntityName, EntityID, Priority)
						  select @customerid, 'Vector' as EntityName, convert(int,Items) as EntityID, 3 as Priority from Split(@VectorIDs, '-')
							left join GuidedNavigationEntityView rev with (nolock) on rev.customerid = @customerid and rev.EntityName = 'Vector' and rev.EntityID = convert(int,Items)
							where rev.guid is null
						end
        
        
						update GuidedNavigationEntityView set createdon = getdate(), Priority = 5 where CustomerID = @CustomerID and EntityName = @entityname and EntityID = @EntityID 
						--and Priority = 5
						declare @existscount int
						select @existscount = count(*) from GuidedNavigationEntityView with (nolock) where customerid = @CustomerID and entityname = @entityname and entityid = @EntityID
						if (@entityname != '' and @EntityID != 0 and @existscount = 0)
							Begin
								insert into GuidedNavigationEntityView(CustomerID, EntityName, EntityID, Priority) values (@CustomerID, @entityname, @EntityID, 5)
							End

						DECLARE @keeprows table (keepguid uniqueidentifier not null)
		
		
						insert @keeprows (keepguid) select top 10 guid 
						from GuidedNavigationEntityView with (nolock) 
						where customerid = @CustomerID 
						order by createdon desc
		
	
	

		
						delete GuidedNavigationEntityView from GuidedNavigationEntityView del
						left join @keeprows kr on (kr.keepguid = del.guid)
						where (
								customerid = @CustomerID 
								and kr.keepguid is null
							) or DateDiff(DD, CreatedOn, GETDATE()) < -1
			
					  end
				END
				
			]]>
		</sql>
	</query>
		
	<query name="DropGetProductsByEntity" rowElementName="GetProductsByEntity" runif="install">
		<sql>
			<![CDATA[
				if exists(SELECT * from sys.objects WHERE object_id = OBJECT_ID(N'[vortx_GetProductsByEntity]') and type in ( N'P', N'PC' ))
				begin
					drop procedure [dbo].[vortx_GetProductsByEntity]
				end
			]]>
		</sql>
	</query>
		
	<query name="InstallGetProductsByEntity" rowElementName="GetProductsByEntity" runif="install">
		<sql>
			<![CDATA[
				CREATE proc [dbo].[vortx_GetProductsByEntity]
					@categoryID      int = null,
					@sectionID       int = null,
					@manufacturerID  int = null,
					@distributorID   int = null,
					@genreID         int = null,
					@vectorID        int = null,
					@localeID        int = null,
					@CustomerLevelID int = null,
					@affiliateID     int = null,
					@ProductTypeID   int = null,
					@ViewType        bit = 1, -- 0 = all variants, 1 = one variant
					--@sortEntity      int = 0, -- 1 = category, 2 = section, 3 = manufacturer, 4 = distributor, 5= genre, 6 = vector
					@pagenum         int = 1,
					@pagesize        int = null,
					@StatsFirst      tinyint = 1,
					@searchstr       nvarchar(4000) = null,
					@extSearch       tinyint = 0,
					@publishedonly   tinyint = 0,
					@ExcludePacks    tinyint = 0,
					@ExcludeKits     tinyint = 0,
					@ExcludeSysProds tinyint = 0,
					@InventoryFilter int = 0,  --  will only show products with an inventory level GREATER OR EQUAL TO than the number specified in this parameter 
					@sortEntityName  varchar(20) = '', -- usely only when the entity id is provided, allowed values: category, section, manufacturer, distributor, genre, vector
					@localeName      varchar(20) = '',
					@OnSaleOnly      tinyint = 0,
					@IncludeAll      BIT  = 0,
					@storeID		 int = 1,
					@filterProduct	 bit = 0,
					@CategoryIDs		 varchar(50) = null,
					@SectionIDs		 varchar(50) = null,
					@ManufacturerIDs  varchar(50) = null,
					@DistributorIDs   varchar(50) = null,
					@GenreIDs         varchar(50) = null,
					@VectorIDs        varchar(50) = null,
					@sortby			varchar(10) = 'default',
					@CustomerID			int = 0,
					@EntityID			int = 0
				AS
				BEGIN

					SET NOCOUNT ON 

					declare @EnableSmartSorting tinyint 
					SELECT @EnableSmartSorting = case ConfigValue when 'true' then 1 else 0 end FROM dbo.AppConfig with (nolock) WHERE [Name] = 'GuidedNavigation.EnableSmartSorting'


					DECLARE @rcount int
					DECLARE @productfiltersort table (rownum int not null identity  primary key, productid int not null, price money null, saleprice money null, displayorder int not null, VariantID int not null, VariantDisplayOrder int not null, ProductName nvarchar(400) null, VariantName nvarchar(400) null)
					DECLARE @productfilter table (rownum int not null identity  primary key, productid int not null, price money null, saleprice money null,  displayorder int not null, VariantID int not null, VariantDisplayOrder int not null, ProductName nvarchar(400) null, VariantName nvarchar(400) null)
					DECLARE @splitReductions table(items varchar(50) null, entityname varchar(15) not null)
					DECLARE @FilterProductsByAffiliate tinyint, @FilterProductsByCustomerLevel tinyint, @DisplayOutOfStockProducts tinyint, @HideProductsWithLessThanThisInventoryLevel int  
					DECLARE @UseFullTextIndex tinyint
					CREATE TABLE #displayorder ([name] nvarchar (800), productid int not null primary key, displayorder int not null)  
					CREATE TABLE #inventoryfilter (productid int not null, variantid int not null, InvQty int not null)
					CREATE CLUSTERED INDEX tmp_inventoryfilter ON #inventoryfilter (productid, variantid)

					DECLARE @custlevelcount int, @sectioncount int, @localecount int, @affiliatecount int, @categorycount int, @storecount int, @CustomerLevelFilteringIsAscending bit, @distributorcount int, @genrecount int, @vectorcount int, @manufacturercount int  
  
					DECLARE @ftsenabled tinyint
	
					SET @ftsenabled = 0
	
					IF ((SELECT DATABASEPROPERTY(db_name(db_id()),'IsFulltextEnabled')) = 1 
						AND EXISTS (SELECT * FROM sysobjects WHERE id = OBJECT_ID(N'[dbo].[KeyWordSearch]') AND type in (N'FN', N'IF', N'TF', N'FS', N'FT'))
						AND EXISTS (SELECT * FROM sysobjects WHERE id = OBJECT_ID(N'[dbo].[GetValidSearchString]') AND type in (N'FN', N'IF', N'TF', N'FS', N'FT')))
					BEGIN
						SET @ftsenabled = 1
					END
  
					SELECT @FilterProductsByAffiliate = case ConfigValue when 'true' then 1 else 0 end FROM dbo.AppConfig with (nolock) WHERE [Name] = 'FilterProductsByAffiliate'
					SELECT @FilterProductsByCustomerLevel = case ConfigValue when 'true' then 1 else 0 end FROM dbo.AppConfig with (nolock) WHERE [Name] = 'FilterProductsByCustomerLevel'
					SELECT @DisplayOutOfStockProducts = case ConfigValue when 'true' then 1 else 0 end FROM dbo.AppConfig with (nolock) WHERE [Name] = 'DisplayOutOfStockProducts'
					SELECT @HideProductsWithLessThanThisInventoryLevel = convert(int, ConfigValue) FROM dbo.AppConfig with (nolock) WHERE [Name] = 'HideProductsWithLessThanThisInventoryLevel' and isnumeric(ConfigValue) = 1
					SELECT @UseFullTextIndex = case ConfigValue when 'true' then 1 else 0 end FROM dbo.AppConfig with (nolock) WHERE [Name] = 'GuidedNavigation.UseFullTextSearch'

						IF @DisplayOutOfStockProducts = 1 
						BEGIN
							SET @HideProductsWithLessThanThisInventoryLevel = 0
							SET @InventoryFilter = -1
						END
					-- ADD by Vortx
					DECLARE @cntEntities INT
	
					INSERT INTO @splitReductions
					SELECT items, 'category'
					FROM dbo.Split(@CategoryIDs, '-')
					WHERE ISNULL(items, '') <> ''
	
					INSERT INTO @splitReductions
					SELECT items, 'section'
					FROM dbo.Split(@SectionIDs, '-')
					WHERE ISNULL(items, '') <> ''
	
					INSERT INTO @splitReductions
					SELECT items, 'manufacturer'
					FROM dbo.Split(@ManufacturerIDs, '-')
					WHERE ISNULL(items, '') <> ''
	
					INSERT INTO @splitReductions
					SELECT items, 'distributor'
					FROM dbo.Split(@DistributorIDs, '-')
					WHERE ISNULL(items, '') <> ''
	
					INSERT INTO @splitReductions
					SELECT items, 'genre'
					FROM dbo.Split(@GenreIDs, '-')
					WHERE ISNULL(items, '') <> ''
	
					INSERT INTO @splitReductions
					SELECT items, 'vector'
					FROM dbo.Split(@VectorIDs, '-')
					WHERE ISNULL(items, '') <> ''
	
	
	
					select @cntEntities = count(*) from @splitReductions
					-- END ADD

					IF @InventoryFilter <> -1 and (@HideProductsWithLessThanThisInventoryLevel > @InventoryFilter or @HideProductsWithLessThanThisInventoryLevel  = -1)
						SET @InventoryFilter  = @HideProductsWithLessThanThisInventoryLevel


					SET @categoryID      = nullif(@categoryID, 0)
					SET @sectionID       = nullif(@sectionID, 0)
					SET @manufacturerID  = nullif(@manufacturerID, 0)
					SET @distributorID   = nullif(@distributorID, 0)
					SET @genreID   		 = nullif(@genreID, 0)
					SET @vectorID        = nullif(@vectorID, 0)
					SET @affiliateID     = nullif(@affiliateID, 0)
					SET @ProductTypeID   = nullif(@ProductTypeID, 0)

					SELECT @storeID  = case configvalue when 'true' then @storeId else null end
					FROM dbo.GlobalConfig with (nolock) 
					WHERE name = 'AllowProductFiltering'

					SET @CustomerLevelFilteringIsAscending  = 0
					SELECT @CustomerLevelFilteringIsAscending  = case configvalue when 'true' then 1 else 0 end
					FROM dbo.AppConfig with (nolock) 
					WHERE name = 'FilterByCustomerLevelIsAscending'

					IF @localeID is null and ltrim(rtrim(@localeName)) <> ''
						SELECT @localeID = LocaleSettingID FROM dbo.LocaleSetting with (nolock) WHERE Name = ltrim(rtrim(@localeName))

					select @categorycount     = si.rows from sysobjects so with (nolock) join sysindexes si with (nolock) on so.id = si.id where so.id = object_id('productcategory') and si.indid < 2 and type = 'u'
					select @sectioncount      = si.rows from sysobjects so with (nolock) join sysindexes si with (nolock) on so.id = si.id where so.id = object_id('productsection') and si.indid < 2 and type = 'u'
					select @storecount        = si.rows from sysobjects so with (nolock) join sysindexes si with (nolock) on so.id = si.id where so.id = object_id('productstore') and si.indid < 2 and type = 'u'
					select @localecount       = si.rows from sysobjects so with (nolock) join sysindexes si with (nolock) on so.id = si.id where so.id = object_id('ProductLocaleSetting') and si.indid < 2 and type = 'u'
					select @custlevelcount    = si.rows from sysobjects so with (nolock) join sysindexes si with (nolock) on so.id = si.id where so.id = object_id('ProductCustomerLevel') and si.indid < 2 and type = 'u'
					select @affiliatecount    = si.rows from sysobjects so with (nolock) join sysindexes si with (nolock) on so.id = si.id where so.id = object_id('ProductAffiliate') and si.indid < 2 and type = 'u'
					select @distributorcount  = si.rows from sysobjects so with (nolock) join sysindexes si with (nolock) on so.id = si.id where so.id = object_id('ProductDistributor') and si.indid < 2 and type = 'u'
					select @genrecount  = si.rows from sysobjects so with (nolock) join sysindexes si with (nolock) on so.id = si.id where so.id = object_id('ProductGenre') and si.indid < 2 and type = 'u'
					select @vectorcount  = si.rows from sysobjects so with (nolock) join sysindexes si with (nolock) on so.id = si.id where so.id = object_id('ProductVector') and si.indid < 2 and type = 'u'
					select @manufacturercount = si.rows from sysobjects so with (nolock) join sysindexes si with (nolock) on so.id = si.id where so.id = object_id('ProductManufacturer') and si.indid < 2 and type = 'u'


					-- get page size
					IF @pagesize is null or @pagesize = 0 BEGIN
						IF @categoryID is not null
							SELECT @pagesize = PageSize FROM dbo.Category with (nolock) WHERE categoryID = @categoryID
						ELSE IF @sectionID is not null
							SELECT @pagesize = PageSize FROM dbo.Section with (nolock) WHERE sectionID = @sectionID
						ELSE IF @manufacturerID is not null
							SELECT @pagesize = PageSize FROM dbo.Manufacturer with (nolock) WHERE manufacturerID = @manufacturerID
						ELSE IF @distributorID is not null
							SELECT @pagesize = PageSize FROM dbo.Distributor with (nolock) WHERE distributorID = @distributorID
						ELSE IF @genreID is not null
							SELECT @pagesize = PageSize FROM dbo.Genre with (nolock) WHERE genreID = @genreID
						ELSE IF @vectorID is not null
							SELECT @pagesize = PageSize FROM dbo.Vector with (nolock) WHERE vectorID = @vectorID
						ELSE 
							SELECT @pagesize = convert(int, ConfigValue) FROM dbo.AppConfig with (nolock) WHERE [Name] = 'Default_CategoryPageSize'
					END

					IF @pagesize is null or @pagesize = 0
						SET @pagesize = 20

					--GuidedNavigation
					declare @SortEntityID int

					if @sortEntityName is null or @sortEntityName = ''
					BEGIN
						SET @sortEntityName = case 
												when @categoryID is not null then 'category' 
												when @sectionID is not null then 'section' 
												when @manufacturerID is not null then 'manufacturer' 
												when @distributorID is not null then 'distributor' 
												when @genreID is not null then 'genre' 
												when @vectorID is not null then 'vector' 
												when @affiliateID is not null then 'affiliate' 
												else 'search'
											  end
					END
					IF lower(@sortEntityName) = 'search' BEGIN
						set @SortEntityID = 0
					END
					ELSE 
					IF lower(@sortEntityName) = 'category' BEGIN
						set @SortEntityID = @categoryID
					END
					ELSE IF lower(@sortEntityName) = 'section' BEGIN
						set @SortEntityID = @sectionID
					END
					ELSE IF lower(@sortEntityName) = 'manufacturer' BEGIN
						set @SortEntityID = @manufacturerID
					END
					ELSE IF lower(@sortEntityName) = 'distributor' BEGIN
						set @SortEntityID = @distributorID
					END
					ELSE IF lower(@sortEntityName) = 'genre' BEGIN
						set @SortEntityID = @genreID
					END
					ELSE IF lower(@sortEntityName) = 'vector' BEGIN
						set @SortEntityID = @vectorID
					END
					ELSE IF lower(@sortEntityName) = 'affiliate' BEGIN
						set @SortEntityID = @affiliateID
					END
					ELSE BEGIN
						set @SortEntityID = 0
					END

					-- get sort order
					IF @sortEntityName = 'search' BEGIN
						IF @cntEntities > 0
						  BEGIN
							INSERT #displayorder 
							select distinct null as [name], p.productid, 1
							from
							(
								SELECT PE.ProductID, COUNT(*) as Cnt
										FROM ProductEntity PE with (nolock)
										INNER JOIN @splitReductions SPR
											ON (PE.EntityID = SPR.Items and PE.EntityType = SPR.entityname)
										GROUP BY PE.ProductID
							) as tmp
							left join product p with (nolock) on tmp.productid = p.productid
							left join ProductStore b with (nolock) on p.ProductID = b.ProductID
							where p.productid is not null and tmp.Cnt = @cntEntities and (@filterProduct = 0 or StoreID = @storeID)
						END
						ELSE IF @cntEntities = 0
						  BEGIN
							INSERT #displayorder 
							SELECT distinct null as [name], p.productid, 1 
							FROM Product p with (nolock)
							left join ProductStore b with (nolock) on p.ProductID = b.ProductID 
							where (@filterProduct = 0 or StoreID = @storeID)
						  END
					END
					ELSE 
					IF @sortEntityID != 0 BEGIN

						IF @cntEntities > 0
						  BEGIN
							INSERT #displayorder 
							SELECT DISTINCT null as [name], PE1.productid, PE1.displayorder
							FROM	(
										SELECT PE.ProductID, COUNT(*) as Cnt
										FROM ProductEntity PE with (nolock)
										INNER JOIN @splitReductions SPR
											ON (PE.EntityID = SPR.Items and PE.EntityType = SPR.entityname)
										GROUP BY PE.ProductID
									) as tmp
									LEFT JOIN ProductEntity PE1 with (nolock) ON (tmp.ProductID = PE1.ProductID and PE1.EntityType = @sortEntityName) 
									left join ProductStore b with (nolock) on tmp.ProductID = b.ProductID
							WHERE PE1.EntityID = @SortEntityID
								AND PE1.ProductID is not null
								AND tmp.Cnt = @cntEntities
								and (@filterProduct = 0 or StoreID = @storeID)
						END
						ELSE IF @cntEntities = 0
						  BEGIN
							INSERT #displayorder 
							SELECT DISTINCT null as [name], pe.productid, displayorder 
							FROM ProductEntity PE with (nolock)
							left join ProductStore b with (nolock) on pe.ProductID = b.ProductID 
							WHERE EntityID = @SortEntityID 
								and PE.EntityType = @sortEntityName 
								and (@filterProduct = 0 or StoreID = @storeID)
						  END
					END
					ELSE BEGIN
						INSERT #displayorder select DISTINCT null as [name], p.productid, 1 from dbo.Product p with (nolock)
						left join ProductStore b with (nolock) on p.ProductID = b.ProductID 
						where (@filterProduct = 0 or StoreID = @storeID)
						ORDER BY Name
					END
						IF @UseFullTextIndex = 1
						BEGIN
							IF Rtrim(Isnull(@searchstr,'')) <> ''
							BEGIN
								SELECT @searchstr = dbo.Getvalidsearchstring(@searchstr)
	        
								DELETE #displayorder
								FROM   #displayorder d
									   LEFT JOIN dbo.Keywordsearch(@searchstr) k
										 ON d.productid = k.productid
								WHERE  k.productid IS NULL
							END
						END
						ELSE
						BEGIN
							SET @searchstr = '%' + rtrim(ltrim(@searchstr)) + '%'
						END

					IF @InventoryFilter <> -1 BEGIN

						IF @ViewType = 1 BEGIN
							INSERT #inventoryfilter
							SELECT p.productid, pv.VariantID, sum(case p.TrackInventoryBySizeAndColor when 1 then isnull(i.quan, 0) else pv.inventory end ) invqty
							FROM product p with (NOLOCK) join #displayorder d on p.ProductID = d.ProductID
								join ProductVariant pv with (NOLOCK) on p.ProductID = pv.ProductID  and pv.IsDefault = 1
								left join Inventory i with (NOLOCK) on pv.VariantID = i.VariantID
							GROUP BY p.productid, pv.VariantID
							HAVING sum(case p.TrackInventoryBySizeAndColor when 1 then isnull(i.quan, 0) else pv.inventory end ) >= @InventoryFilter
						END
						ELSE
							INSERT #inventoryfilter
							SELECT p.productid, pv.VariantID, sum(case p.TrackInventoryBySizeAndColor when 1 then isnull(i.quan, 0) else pv.inventory end ) invqty
							FROM product p with (NOLOCK) join #displayorder d on p.ProductID = d.ProductID
								join ProductVariant pv with (NOLOCK) on p.ProductID = pv.ProductID
								left join Inventory i with (NOLOCK) on pv.VariantID = i.VariantID
							GROUP BY p.productid, pv.VariantID
							HAVING sum(case p.TrackInventoryBySizeAndColor when 1 then isnull(i.quan, 0) else pv.inventory end ) >= @InventoryFilter


						INSERT @productfilter (productid, price, saleprice, displayorder, VariantID, VariantDisplayOrder, ProductName, VariantName)
						SELECT distinct p.productid, pv.price, pv.saleprice, do.displayorder, pv.VariantID, pv.DisplayOrder, p.Name, pv.Name
						FROM 
							product p with (nolock)
							join #displayorder do on p.ProductID = do.ProductID 
							left join ProductVariant pv        with (NOLOCK) ON p.ProductID = pv.ProductID and pv.IsDefault >= @ViewType
							left join productcategory pc       with (nolock) on p.ProductID = pc.ProductID 
							left join productstore pst		   with (nolock) on p.ProductID = pst.ProductID 
							left join productsection ps        with (nolock) on p.ProductID = ps.ProductID 
							left join ProductManufacturer pm   with (nolock) on p.ProductID = pm.ProductID 
							left join ProductDistributor pd    with (nolock) on p.ProductID = pd.ProductID 
							left join ProductGenre px          with (nolock) on p.ProductID = px.ProductID 
							left join ProductVector px2        with (nolock) on p.ProductID = px2.ProductID 
							left join ProductLocaleSetting pl  with (nolock) on p.ProductID = pl.ProductID 
							left join ProductCustomerLevel pcl with (nolock) on p.ProductID = pcl.ProductID 
							left join ProductAffiliate pa      with (nolock) on p.ProductID = pa.ProductID 
							left join @splitReductions ps_tmp  on ps.sectionid = convert(int, ps_tmp.items)
							join #inventoryfilter i on pv.VariantID = i.VariantID
						WHERE 
							  (pc.categoryid = @categoryID or @categoryID is null or @categorycount = 0)
						  and (ps.sectionid = @sectionID or @sectionID is null or @sectioncount = 0)
						  and (pst.storeid = @storeID or @storeID is null or @storecount = 0)
						  and (pl.LocaleSettingID = @localeID or @localeID is null or @localecount = 0)
						  and (pa.AffiliateID = @affiliateID or pa.AffiliateID is null or @affiliatecount = 0 or @FilterProductsByAffiliate = 0)
						  and (pm.manufacturerid = @manufacturerID or @manufacturerID is null or @manufacturercount = 0)
						  and (pd.DistributorID = @distributorID or @distributorID is null or @distributorcount = 0)
						  and (px.GenreID = @genreID or @genreID is null or @genrecount = 0)
						  and (px2.VectorID = @vectorID or @vectorID is null or @vectorcount = 0)
						  and p.ProductTypeID = coalesce(@ProductTypeID, p.ProductTypeID)
						  and (case 
								when @FilterProductsByCustomerLevel = 0 or @custlevelcount = 0 or pcl.CustomerLevelID is null or @CustomerLevelID is null then 1
								when @CustomerLevelFilteringIsAscending = 1 and pcl.CustomerLevelID <= @CustomerLevelID then 1 
								when pcl.CustomerLevelID = @CustomerLevelID or pcl.CustomerLevelID is null then 1 
								else 0
							   end  = 1
							  )
						  and (
							  @UseFullTextIndex = 1
							  or @searchstr is null
							  or patindex(@searchstr, isnull(p.name, '')) > 0
							  or patindex(@searchstr, isnull(convert(nvarchar(20),p.productid), '')) > 0 
							  or patindex(@searchstr, isnull(pv.name, '')) > 0
							  or patindex(@searchstr, isnull(p.sku , '')+isnull(pv.skusuffix , '')) > 0
							  or patindex(@searchstr, isnull(p.manufacturerpartnumber, '')) > 0
							  or patindex(@searchstr, isnull(pv.manufacturerpartnumber, '')) > 0
							  or (patindex(@searchstr, isnull(p.Description, '')) > 0 and @extSearch = 1)
							  or (patindex(@searchstr, isnull(p.Summary, '')) > 0 and @extSearch = 1)
							  )
						  and case when isnull(pv.saleprice,0) = 0 then 0 else 1 end >= @OnSaleOnly
						  and p.published >= @publishedonly
						  and pv.published >= @publishedonly
						  and isnull(p.IsAPack, 0) <= 1-@ExcludePacks
						  and isnull(p.IsAKit, 0) <= 1-@ExcludeKits
						  and p.IsSystem <= 1-@ExcludeSysProds
						  and p.Deleted = 0
						  and pv.Deleted = 0
          					  and ((@IncludeAll = 1) or (getdate() between isnull(p.AvailableStartDate, '1/1/1900') and isnull(p.AvailableStopDate, '1/1/2999')))    
						order by do.displayorder, p.Name, pv.DisplayOrder, pv.Name

					END 
					ELSE BEGIN
						INSERT @productfilter (productid, price, saleprice, displayorder, VariantID, VariantDisplayOrder, ProductName, VariantName)
						SELECT distinct p.productid, pv.price, pv.saleprice, do.displayorder, pv.VariantID, pv.DisplayOrder, p.Name, pv.Name
						FROM 
							product p with (nolock)
							join #displayorder do on p.ProductID = do.ProductID 
							join ProductVariant pv             with (NOLOCK) on p.ProductID = pv.ProductID and pv.IsDefault >= @ViewType
							left join productcategory pc       with (nolock) on p.ProductID = pc.ProductID 
							left join productstore pst         with (nolock) on p.ProductID = pst.ProductID 
							left join productsection ps        with (nolock) on p.ProductID = ps.ProductID 
							left join ProductManufacturer pm   with (nolock) on p.ProductID = pm.ProductID 
							left join ProductDistributor pd    with (nolock) on p.ProductID = pd.ProductID 
							left join ProductGenre px          with (nolock) on p.ProductID = px.ProductID 
							left join ProductVector px2        with (nolock) on p.ProductID = px2.ProductID 
							left join ProductLocaleSetting pl  with (nolock) on p.ProductID = pl.ProductID 
							left join ProductCustomerLevel pcl with (nolock) on p.ProductID = pcl.ProductID 
							left join ProductAffiliate pa      with (nolock) on p.ProductID = pa.ProductID 
							left join @splitReductions ps_tmp  on ps.sectionid = convert(int, ps_tmp.items)
						WHERE 
							  (pc.categoryid = @categoryID or @categoryID is null or @categorycount = 0)
						  and (ps.sectionid = @sectionID or @sectionID is null or @sectioncount = 0)
						  and (pst.storeid = @storeID or @storeID is null or @storecount = 0)
						  and (pl.LocaleSettingID = @localeID or @localeID is null or @localecount = 0)
						  and (pa.AffiliateID = @affiliateID or pa.AffiliateID is null or @affiliatecount = 0 or @FilterProductsByAffiliate = 0)
						  and (pm.manufacturerid = @manufacturerID or @manufacturerID is null or @manufacturercount = 0)
						  and (pd.DistributorID = @distributorID or @distributorID is null or @distributorcount = 0)
						  and (px.GenreID = @genreID or @genreID is null or @genrecount = 0)
						  and (px2.VectorID = @vectorID or @vectorID is null or @vectorcount = 0)
						  and p.ProductTypeID = coalesce(@ProductTypeID, p.ProductTypeID)
						  and (case 
								when @FilterProductsByCustomerLevel = 0 or @custlevelcount = 0 or pcl.CustomerLevelID is null or @CustomerLevelID is null then 1
								when @CustomerLevelFilteringIsAscending = 1 and pcl.CustomerLevelID <= @CustomerLevelID then 1 
								when pcl.CustomerLevelID = @CustomerLevelID or pcl.CustomerLevelID is null then 1 
								else 0
							   end  = 1
							  )
						  and (
									  @UseFullTextIndex = 1
									  or @searchstr is null
							  or patindex(@searchstr, isnull(p.name, '')) > 0
							  or patindex(@searchstr, isnull(convert(nvarchar(20),p.productid), '')) > 0 
							  or patindex(@searchstr, isnull(pv.name, '')) > 0
							  or patindex(@searchstr, isnull(p.sku , '')+isnull(pv.skusuffix , '')) > 0
							  or patindex(@searchstr, isnull(p.manufacturerpartnumber, '')) > 0
							  or patindex(@searchstr, isnull(pv.manufacturerpartnumber, '')) > 0
							  or (patindex(@searchstr, isnull(p.Description, '')) > 0 and @extSearch = 1)
							  or (patindex(@searchstr, isnull(p.Summary, '')) > 0 and @extSearch = 1)
							  )
						  and case when isnull(pv.saleprice,0) = 0 then 0 else 1 end >= @OnSaleOnly
						  and p.published >= @publishedonly
						  and pv.published >= @publishedonly
						  and isnull(p.IsAPack, 0) <= 1-@ExcludePacks
						  and isnull(p.IsAKit, 0) <= 1-@ExcludeKits
						  and p.IsSystem <= 1-@ExcludeSysProds
						  and p.Deleted = 0
						  and pv.Deleted = 0
          					  AND ((@IncludeAll = 1) OR (Getdate() BETWEEN Isnull(p.availablestartdate,'1/1/1900') AND Isnull(p.availablestopdate,'1/1/2999')))
						order by do.displayorder, p.Name, pv.DisplayOrder, pv.Name

					END
	
					if @SortBy = 'catviews' and exists (select * From sysobjects with (nolock) where id = object_id('GuidedNavigationEntityView') and type = 'u') and @CustomerID != 0 and @EnableSmartSorting = 1
					begin
	
						declare @smartCounts table(productid int not null primary key, looks int not null, priority int not null)
						insert @smartCounts Select p.ProductID, p.Looks, sum(rev.Priority) as priority
									from product p with (nolock)
									join ProductEntity pe with (nolock) on p.ProductID = pe.ProductID
									join GuidedNavigationEntityView rev with (nolock) on (pe.EntityType = rev.EntityName and pe.EntityID = rev.EntityID)
									where rev.CustomerID = @CustomerID
									group by p.ProductID, p.Looks
	
						insert @productfiltersort (productid, price, saleprice, displayorder, VariantID, VariantDisplayOrder, ProductName, VariantName) 
						select pf.productid, pf.price, pf.saleprice, pf.displayorder, pf.VariantID, pf.VariantDisplayOrder, pf.ProductName, pf.VariantName 
						from @productfilter pf 
							left join @smartCounts p on pf.productid = p.productid
						order by p.priority desc, p.looks desc, pf.displayorder, pf.ProductName, pf.variantdisplayorder, pf.VariantName

					end
					else if @SortBy = 'priceasc'
					begin
						insert @productfiltersort (productid, price, saleprice, displayorder, VariantID, VariantDisplayOrder, ProductName, VariantName) 
						select productid, price, saleprice, displayorder, VariantID, VariantDisplayOrder, ProductName, VariantName 
						from @productfilter 
						order by price, displayorder, ProductName, variantdisplayorder, VariantName
					end
					else if @SortBy = 'pricedesc'
					begin
						insert @productfiltersort (productid, price, saleprice, displayorder, VariantID, VariantDisplayOrder, ProductName, VariantName) 
						select productid, price, saleprice, displayorder, VariantID, VariantDisplayOrder, ProductName, VariantName 
						from @productfilter 
						order by price desc, displayorder, ProductName, variantdisplayorder, VariantName
					end
					else if @SortBy = 'name'
					begin
						insert @productfiltersort (productid, price, saleprice, displayorder, VariantID, VariantDisplayOrder, ProductName, VariantName) 
						select productid, price, saleprice, displayorder, VariantID, VariantDisplayOrder, ProductName, VariantName from @productfilter order by ProductName, VariantName, displayorder, variantdisplayorder
					end
					else if @SortBy = 'popularity'
					begin
						insert @productfiltersort (productid, price, saleprice, displayorder, VariantID, VariantDisplayOrder, ProductName, VariantName) 
						select pf.productid, pf.price, pf.saleprice, pf.displayorder, pf.VariantID, pf.VariantDisplayOrder, pf.ProductName, pf.VariantName from @productfilter pf left join product p with (nolock) on pf.productid = p.productid order by p.looks desc, pf.displayorder, pf.ProductName, pf.variantdisplayorder, pf.VariantName
					end
					else
						begin
							insert @productfiltersort (productid, price, saleprice, displayorder, VariantID, VariantDisplayOrder, ProductName, VariantName) 
							select productid, price, saleprice, displayorder, VariantID, VariantDisplayOrder, ProductName, VariantName from @productfilter order by displayorder, productName, variantDisplayOrder, variantName
						end

					SET @rcount = @@rowcount
					IF @StatsFirst = 1
						SELECT cast(ceiling(@rcount*1.0/@pagesize) as int) pages, @rcount ProductCount

					SELECT 
						p.ProductID,
						p.Name,
						pv.VariantID,
						pv.Name AS VariantName,
						p.ProductGUID,
						p.Summary,
						p.Description,
						p.SEKeywords,
						p.SEDescription,
						p.SpecTitle,
						p.MiscText,
						p.SwatchImageMap,
						p.IsFeaturedTeaser,
						p.FroogleDescription,
						p.SETitle,
						p.SENoScript,
						p.SEAltText,
						p.SizeOptionPrompt,
						p.ColorOptionPrompt,
						p.TextOptionPrompt,
						p.ProductTypeID,
						p.TaxClassID,
						p.SKU,
						p.ManufacturerPartNumber,
						p.SalesPromptID,
						p.SpecCall,
						p.SpecsInline,
						p.IsFeatured,
						p.XmlPackage,
						p.ColWidth,
						p.Published,
						p.RequiresRegistration,
						p.Looks,
						p.Notes,
						p.QuantityDiscountID,
						p.RelatedProducts,
						p.UpsellProducts,
						p.UpsellProductDiscountPercentage,
						p.RelatedDocuments,
						p.TrackInventoryBySizeAndColor,
						p.TrackInventoryBySize,
						p.TrackInventoryByColor,
						p.IsAKit,
						p.ShowInProductBrowser,
						p.IsAPack,
						p.PackSize,
						p.ShowBuyButton,
						p.RequiresProducts,
						p.HidePriceUntilCart,
						p.IsCalltoOrder,
						p.ExcludeFromPriceFeeds,
						p.RequiresTextOption,
						p.TextOptionMaxLength,
						p.SEName,
						p.Deleted,
						p.CreatedOn,
						p.ImageFileNameOverride,
						pv.VariantGUID,
						pv.Description AS VariantDescription,
						pv.SEKeywords AS VariantSEKeywords,
						pv.SEDescription AS VariantSEDescription,
						pv.Colors,
						pv.ColorSKUModifiers,
						pv.Sizes,
						pv.SizeSKUModifiers,
						pv.FroogleDescription AS VariantFroogleDescription,
						pv.SKUSuffix,
						pv.ManufacturerPartNumber AS VariantManufacturerPartNumber,
						pv.Price,
						pv.CustomerEntersPrice, 
						pv.CustomerEntersPricePrompt,
						isnull(pv.SalePrice, 0) SalePrice,
						cast(isnull(pv.Weight,0) as decimal(10,1)) Weight,
						pv.MSRP,
						pv.Cost,
						isnull(pv.Points,0) Points,
						pv.Dimensions,
						case p.TrackInventoryBySizeAndColor when 1 then isnull(i.quan, 0) else pv.inventory end Inventory,
						pv.DisplayOrder as VariantDisplayOrder,
						pv.Notes AS VariantNotes,
						pv.IsTaxable,
						pv.IsShipSeparately,
						pv.IsDownload,
						pv.DownloadLocation,
						pv.Published AS VariantPublished,
						pv.IsSecureAttachment,
						pv.IsRecurring,
						pv.RecurringInterval,
						pv.RecurringIntervalType,
						pv.SubscriptionInterval,
						pv.SEName AS VariantSEName,
						pv.RestrictedQuantities,
						pv.MinimumQuantity,
						pv.Deleted AS VariantDeleted,
						pv.CreatedOn AS VariantCreatedOn,
						d.Name AS DistributorName,
						d.DistributorID,
						d.SEName AS DistributorSEName,
						m.ManufacturerID,
						m.Name AS ManufacturerName,
						m.SEName AS ManufacturerSEName,
						s.Name AS SalesPromptName,
						case when pcl.productid is null then 0 else isnull(ep.Price, 0) end ExtendedPrice
					FROM dbo.Product p with (NOLOCK) 
						left join dbo.ProductVariant       pv  with (NOLOCK) on p.ProductID = pv.ProductID and pv.IsDefault >= @ViewType
						join @productfiltersort            pf                on pv.ProductID = pf.ProductID and pv.VariantID = pf.VariantID 
						left join dbo.SalesPrompt           s  with (NOLOCK) on p.SalesPromptID = s.SalesPromptID 
						left join dbo.ProductManufacturer  pm  with (NOLOCK) on p.ProductID = pm.ProductID 
						left join dbo.Manufacturer          m  with (NOLOCK) on pm.ManufacturerID = m.ManufacturerID 
						left join dbo.ProductDistributor   pd  with (NOLOCK) on p.ProductID = pd.ProductID
						left join dbo.Distributor           d  with (NOLOCK) on pd.DistributorID = d.DistributorID
						left join dbo.ExtendedPrice        ep  with (NOLOCK) on ep.VariantID = pv.VariantID and ep.CustomerLevelID = @CustomerLevelID
						left join dbo.ProductCustomerLevel pcl with (NOLOCK) on p.ProductID = pcl.ProductID and pcl.CustomerLevelID = @CustomerLevelID
						left join (select VariantID, sum(quan) quan from dbo.Inventory with (nolock) group by VariantID) i  on pv.VariantID = i.VariantID
					WHERE pf.rownum >= @pagesize*(@pagenum-1)+1 and pf.rownum <= @pagesize*(@pagenum)
					ORDER BY pf.rownum

					IF @StatsFirst <> 1
						SELECT cast(ceiling(@rcount*1.0/@pagesize) as int) pages, @rcount ProductCount

					if @EnableSmartSorting = 1 and @CustomerID > 0 and @sortEntityName != ''
					begin
						exec [vortx_TrackEntityViews] @CustomerID, @EntityID, @sortEntityName, @SectionIDs
					end

				END
			]]>
		</sql>
	</query>
	
	<query name="DropGetNumEntityProducts" rowElementName="GetNumEntityProducts" runif="install">
		<sql>
			<![CDATA[
				if exists(SELECT * from sys.objects WHERE object_id = OBJECT_ID(N'[vortx_GetNumEntityProducts]') and type in ( N'P', N'PC' ))
				begin
					drop procedure [dbo].[vortx_GetNumEntityProducts]
				end
			]]>
		</sql>
	</query>
		
	<query name="InstallGetNumEntityProducts" rowElementName="GetNumEntityProducts" runif="install">
		<sql>
			<![CDATA[
				CREATE proc [dbo].[vortx_GetNumEntityProducts]
					@categoryID      int = null,
					@sectionID       int = null,
					@manufacturerID  int = null,
					@distributorID   int = null,
					@genreID			 int = null,
					@vectorID			 int = null,
					@localeID        int = null,
					@CustomerLevelID int = null,
					@affiliateID     int = null,
					@ProductTypeID   int = null,
					@ViewType        bit = 1, -- 0 = all variants, 1 = one variant
					--@sortEntity      int = 0, -- 1 = category, 2 = section, 3 = manufacturer, 4 = distributor, 5= genre, 6 = vector
					@pagenum         int = 1,
					@pagesize        int = null,
					@StatsFirst      tinyint = 1,
					@searchstr       nvarchar(4000) = null,
					@extSearch       tinyint = 0,
					@publishedonly   tinyint = 0,
					@ExcludePacks    tinyint = 0,
					@ExcludeKits     tinyint = 0,
					@ExcludeSysProds tinyint = 0,
					@InventoryFilter int = 0,  --  will only show products with an inventory level GREATER OR EQUAL TO than the number specified in this parameter 
					@sortEntityName  varchar(20) = '', -- usely only when the entity id is provided, allowed values: category, section, manufacturer, distributor, genre, vector
					@localeName      varchar(20) = '',  
					@OnSaleOnly      tinyint = 0,  
					@IncludeAll      bit = 0, -- Don't filter products that have a start date in the future or a stop date in the past  
					@storeID		 int = 1,
					@filterProduct	 bit = 0,
					@CategoryIDs		 varchar(50) = null,
					@SectionIDs		 varchar(50) = null,
					@ManufacturerIDs  varchar(50) = null,
					@DistributorIDs   varchar(50) = null,
					@GenreIDs         varchar(50) = null,
					@VectorIDs        varchar(50) = null,
					@sortby			varchar(10) = 'default', 
					@countEntity	varchar(100) = null
				AS
				BEGIN

					SET NOCOUNT ON 

					DECLARE @rcount int
					DECLARE @productfilter table (rownum int not null identity  primary key, productid int not null, displayorder int not null, VariantID int not null, VariantDisplayOrder int not null, ProductName nvarchar(400) null, VariantName nvarchar(400) null)
					DECLARE @splitReductions table(items varchar(50) null, entityname varchar(15) not null)
					DECLARE @FilterProductsByAffiliate tinyint, @FilterProductsByCustomerLevel tinyint, @DisplayOutOfStockProducts tinyint, @HideProductsWithLessThanThisInventoryLevel int  
					DECLARE @UseFullTextIndex tinyint
					CREATE TABLE #displayorder ([name] nvarchar (800), productid int not null primary key, displayorder int not null)  
					CREATE TABLE #inventoryfilter (productid int not null, variantid int not null, InvQty int not null)
					CREATE CLUSTERED INDEX tmp_inventoryfilter ON #inventoryfilter (productid, variantid)

					DECLARE @custlevelcount int, @sectioncount int, @localecount int, @affiliatecount int, @categorycount int, @storecount int, @CustomerLevelFilteringIsAscending bit, @distributorcount int, @genrecount int, @vectorcount int, @manufacturercount int  
  
					DECLARE @ftsenabled tinyint
	
					SET @ftsenabled = 0
	
					IF ((SELECT DATABASEPROPERTY(db_name(db_id()),'IsFulltextEnabled')) = 1 
						AND EXISTS (SELECT * FROM sysobjects WHERE id = OBJECT_ID(N'[dbo].[KeyWordSearch]') AND type in (N'FN', N'IF', N'TF', N'FS', N'FT'))
						AND EXISTS (SELECT * FROM sysobjects WHERE id = OBJECT_ID(N'[dbo].[GetValidSearchString]') AND type in (N'FN', N'IF', N'TF', N'FS', N'FT')))
					BEGIN
						SET @ftsenabled = 1
					END
  
					SELECT @FilterProductsByAffiliate = case ConfigValue when 'true' then 1 else 0 end FROM dbo.AppConfig with (nolock) WHERE [Name] = 'FilterProductsByAffiliate'  
					SELECT @FilterProductsByCustomerLevel = case ConfigValue when 'true' then 1 else 0 end FROM dbo.AppConfig with (nolock) WHERE [Name] = 'FilterProductsByCustomerLevel'
					SELECT @DisplayOutOfStockProducts = case ConfigValue when 'true' then 1 else 0 end FROM dbo.AppConfig with (nolock) WHERE [Name] = 'DisplayOutOfStockProducts'
					SELECT @HideProductsWithLessThanThisInventoryLevel = convert(int, ConfigValue) FROM dbo.AppConfig with (nolock) WHERE [Name] = 'HideProductsWithLessThanThisInventoryLevel' and isnumeric(ConfigValue) = 1
					SELECT @UseFullTextIndex = case ConfigValue when 'true' then 1 else 0 end FROM dbo.AppConfig with (nolock) WHERE [Name] = 'GuidedNavigation.UseFullTextSearch'

					IF @DisplayOutOfStockProducts = 1 
					BEGIN
						SET @HideProductsWithLessThanThisInventoryLevel = 0
						SET @InventoryFilter = -1
					END
					-- ADD by Vortx
	
					DECLARE @cntEntities INT
	
					INSERT INTO @splitReductions
					SELECT items, 'category'
					FROM dbo.Split(@CategoryIDs, '-')
					WHERE ISNULL(items, '') <> ''
	
					INSERT INTO @splitReductions
					SELECT items, 'section'
					FROM dbo.Split(@SectionIDs, '-')
					WHERE ISNULL(items, '') <> ''
	
					INSERT INTO @splitReductions
					SELECT items, 'manufacturer'
					FROM dbo.Split(@ManufacturerIDs, '-')
					WHERE ISNULL(items, '') <> ''
	
					INSERT INTO @splitReductions
					SELECT items, 'distributor'
					FROM dbo.Split(@DistributorIDs, '-')
					WHERE ISNULL(items, '') <> ''
	
					INSERT INTO @splitReductions
					SELECT items, 'genre'
					FROM dbo.Split(@GenreIDs, '-')
					WHERE ISNULL(items, '') <> ''
	
					INSERT INTO @splitReductions
					SELECT items, 'vector'
					FROM dbo.Split(@VectorIDs, '-')
					WHERE ISNULL(items, '') <> ''
	
	
	
					select @cntEntities = count(*) from @splitReductions
					-- END ADD

					IF @InventoryFilter <> -1 and (@HideProductsWithLessThanThisInventoryLevel > @InventoryFilter or @HideProductsWithLessThanThisInventoryLevel  = -1)
						SET @InventoryFilter  = @HideProductsWithLessThanThisInventoryLevel


					SET @categoryID      = nullif(@categoryID, 0)
					SET @sectionID       = nullif(@sectionID, 0)
					SET @manufacturerID  = nullif(@manufacturerID, 0)
					SET @distributorID   = nullif(@distributorID, 0)
					SET @genreID   		 = nullif(@genreID, 0)
					SET @vectorID        = nullif(@vectorID, 0)
					SET @affiliateID     = nullif(@affiliateID, 0)
					SET @ProductTypeID   = nullif(@ProductTypeID, 0)

					SELECT @storeID  = case configvalue when 'true' then @storeId else null end
					FROM dbo.GlobalConfig with (nolock) 
					WHERE name = 'AllowProductFiltering'

					SET @CustomerLevelFilteringIsAscending  = 0
					SELECT @CustomerLevelFilteringIsAscending  = case configvalue when 'true' then 1 else 0 end
					FROM dbo.AppConfig with (nolock) 
					WHERE name = 'FilterByCustomerLevelIsAscending'

					IF @localeID is null and ltrim(rtrim(@localeName)) <> ''
						SELECT @localeID = LocaleSettingID FROM dbo.LocaleSetting with (nolock) WHERE Name = ltrim(rtrim(@localeName))

					select @categorycount     = si.rows from sysobjects so with (nolock) join sysindexes si with (nolock) on so.id = si.id where so.id = object_id('productcategory') and si.indid < 2 and type = 'u'
					select @sectioncount      = si.rows from sysobjects so with (nolock) join sysindexes si with (nolock) on so.id = si.id where so.id = object_id('productsection') and si.indid < 2 and type = 'u'
					select @storecount        = si.rows from sysobjects so with (nolock) join sysindexes si with (nolock) on so.id = si.id where so.id = object_id('productstore') and si.indid < 2 and type = 'u'
					select @localecount       = si.rows from sysobjects so with (nolock) join sysindexes si with (nolock) on so.id = si.id where so.id = object_id('ProductLocaleSetting') and si.indid < 2 and type = 'u'
					select @custlevelcount    = si.rows from sysobjects so with (nolock) join sysindexes si with (nolock) on so.id = si.id where so.id = object_id('ProductCustomerLevel') and si.indid < 2 and type = 'u'
					select @affiliatecount    = si.rows from sysobjects so with (nolock) join sysindexes si with (nolock) on so.id = si.id where so.id = object_id('ProductAffiliate') and si.indid < 2 and type = 'u'
					select @distributorcount  = si.rows from sysobjects so with (nolock) join sysindexes si with (nolock) on so.id = si.id where so.id = object_id('ProductDistributor') and si.indid < 2 and type = 'u'
					select @genrecount  = si.rows from sysobjects so with (nolock) join sysindexes si with (nolock) on so.id = si.id where so.id = object_id('ProductGenre') and si.indid < 2 and type = 'u'
					select @vectorcount  = si.rows from sysobjects so with (nolock) join sysindexes si with (nolock) on so.id = si.id where so.id = object_id('ProductVector') and si.indid < 2 and type = 'u'
					select @manufacturercount = si.rows from sysobjects so with (nolock) join sysindexes si with (nolock) on so.id = si.id where so.id = object_id('ProductManufacturer') and si.indid < 2 and type = 'u'


					-- get page size
					IF @pagesize is null or @pagesize = 0 BEGIN
						IF @categoryID is not null
							SELECT @pagesize = PageSize FROM dbo.Category with (nolock) WHERE categoryID = @categoryID
						ELSE IF @sectionID is not null
							SELECT @pagesize = PageSize FROM dbo.Section with (nolock) WHERE sectionID = @sectionID
						ELSE IF @manufacturerID is not null
							SELECT @pagesize = PageSize FROM dbo.Manufacturer with (nolock) WHERE manufacturerID = @manufacturerID
						ELSE IF @distributorID is not null
							SELECT @pagesize = PageSize FROM dbo.Distributor with (nolock) WHERE distributorID = @distributorID
						ELSE IF @genreID is not null
							SELECT @pagesize = PageSize FROM dbo.Genre with (nolock) WHERE genreID = @genreID
						ELSE IF @vectorID is not null
							SELECT @pagesize = PageSize FROM dbo.Vector with (nolock) WHERE vectorID = @vectorID
						ELSE 
							SELECT @pagesize = convert(int, ConfigValue) FROM dbo.AppConfig with (nolock) WHERE [Name] = 'Default_CategoryPageSize'
					END

					IF @pagesize is null or @pagesize = 0
						SET @pagesize = 20

					--GuidedNavigation
					declare @SortEntityID int

					if @sortEntityName is null or @sortEntityName = ''
					BEGIN
						SET @sortEntityName = case 
												when @categoryID is not null then 'category' 
												when @sectionID is not null then 'section' 
												when @manufacturerID is not null then 'manufacturer' 
												when @distributorID is not null then 'distributor' 
												when @genreID is not null then 'genre' 
												when @vectorID is not null then 'vector' 
												when @affiliateID is not null then 'affiliate' 
												else 'search'
											  end
					END
					IF lower(@sortEntityName) = 'search' BEGIN
						set @SortEntityID = 0
					END
					ELSE 
					IF lower(@sortEntityName) = 'category' BEGIN
						set @SortEntityID = @categoryID
					END
					ELSE IF lower(@sortEntityName) = 'section' BEGIN
						set @SortEntityID = @sectionID
					END
					ELSE IF lower(@sortEntityName) = 'manufacturer' BEGIN
						set @SortEntityID = @manufacturerID
					END
					ELSE IF lower(@sortEntityName) = 'distributor' BEGIN
						set @SortEntityID = @distributorID
					END
					ELSE IF lower(@sortEntityName) = 'genre' BEGIN
						set @SortEntityID = @genreID
					END
					ELSE IF lower(@sortEntityName) = 'vector' BEGIN
						set @SortEntityID = @vectorID
					END
					ELSE IF lower(@sortEntityName) = 'affiliate' BEGIN
						set @SortEntityID = @affiliateID
					END
					ELSE BEGIN
						set @SortEntityID = 0
					END
	
					-- get sort order
					IF @sortEntityName = 'search' BEGIN
						IF @cntEntities > 0
						  BEGIN
							INSERT #displayorder 
							select distinct null as [name], p.productid, 1
							from
							(
								SELECT PE.ProductID, COUNT(*) as Cnt
										FROM ProductEntity PE with (nolock)
										INNER JOIN @splitReductions SPR
											ON (PE.EntityID = SPR.Items and PE.EntityType = SPR.entityname)
										GROUP BY PE.ProductID
							) as tmp
							left join product p with (nolock) on tmp.productid = p.productid
							left join ProductStore b with (nolock) on p.ProductID = b.ProductID
							where p.productid is not null and tmp.Cnt = @cntEntities and (@filterProduct = 0 or StoreID = @storeID)
						END
						ELSE IF @cntEntities = 0
						  BEGIN
							INSERT #displayorder 
							SELECT distinct null as [name], p.productid, 1 
							FROM Product p with (nolock)
							left join ProductStore b with (nolock) on p.ProductID = b.ProductID 
							where (@filterProduct = 0 or StoreID = @storeID)
						  END
					END
					ELSE 
					IF @sortEntityID != 0 BEGIN

						IF @cntEntities > 0
						  BEGIN
							INSERT #displayorder 
							SELECT DISTINCT null as [name], PE1.productid, PE1.displayorder
							FROM	(
										SELECT PE.ProductID, COUNT(*) as Cnt
										FROM ProductEntity PE with (nolock)
										INNER JOIN @splitReductions SPR
											ON (PE.EntityID = SPR.Items and PE.EntityType = SPR.entityname)
										GROUP BY PE.ProductID
									) as tmp
									LEFT JOIN ProductEntity PE1 with (nolock) ON (tmp.ProductID = PE1.ProductID and PE1.EntityType = @sortEntityName) 
									left join ProductStore b with (nolock) on tmp.ProductID = b.ProductID
							WHERE PE1.EntityID = @SortEntityID
								AND PE1.ProductID is not null
								AND tmp.Cnt = @cntEntities
								and (@filterProduct = 0 or StoreID = @storeID)
						END
						ELSE IF @cntEntities = 0
						  BEGIN
							INSERT #displayorder 
							SELECT distinct null as [name], pe.productid, displayorder 
							FROM ProductEntity PE with (nolock)
							left join ProductStore b with (nolock) on pe.ProductID = b.ProductID 
							WHERE EntityID = @SortEntityID 
								and PE.EntityType = @sortEntityName 
								and (@filterProduct = 0 or StoreID = @storeID)
						  END
					END
					ELSE BEGIN
						INSERT #displayorder select distinct null as [name], p.productid, 1 from dbo.Product p with (nolock)
						left join ProductStore b with (nolock) on p.ProductID = b.ProductID 
						where (@filterProduct = 0 or StoreID = @storeID)
						ORDER BY Name
					END


						IF @UseFullTextIndex = 1
						BEGIN
							IF Rtrim(Isnull(@searchstr,'')) <> ''
							BEGIN
								SELECT @searchstr = dbo.Getvalidsearchstring(@searchstr)
	        
								DELETE #displayorder
								FROM   #displayorder d
									   LEFT JOIN dbo.Keywordsearch(@searchstr) k
										 ON d.productid = k.productid
								WHERE  k.productid IS NULL
							END
						END
						ELSE
						BEGIN
							SET @searchstr = '%' + rtrim(ltrim(@searchstr)) + '%'
						END

					IF @InventoryFilter <> -1 BEGIN

						IF @ViewType = 1 BEGIN
							INSERT #inventoryfilter
							SELECT p.productid, pv.VariantID, sum(case p.TrackInventoryBySizeAndColor when 1 then isnull(i.quan, 0) else pv.inventory end ) invqty
							FROM product p with (NOLOCK) join #displayorder d on p.ProductID = d.ProductID
								join ProductVariant pv with (NOLOCK) on p.ProductID = pv.ProductID  and pv.IsDefault = 1
								left join Inventory i with (NOLOCK) on pv.VariantID = i.VariantID
							GROUP BY p.productid, pv.VariantID
							HAVING sum(case p.TrackInventoryBySizeAndColor when 1 then isnull(i.quan, 0) else pv.inventory end ) >= @InventoryFilter
						END
						ELSE
							INSERT #inventoryfilter
							SELECT p.productid, pv.VariantID, sum(case p.TrackInventoryBySizeAndColor when 1 then isnull(i.quan, 0) else pv.inventory end ) invqty
							FROM product p with (NOLOCK) join #displayorder d on p.ProductID = d.ProductID
								join ProductVariant pv with (NOLOCK) on p.ProductID = pv.ProductID
								left join Inventory i with (NOLOCK) on pv.VariantID = i.VariantID
							GROUP BY p.productid, pv.VariantID
							HAVING sum(case p.TrackInventoryBySizeAndColor when 1 then isnull(i.quan, 0) else pv.inventory end ) >= @InventoryFilter


						INSERT @productfilter (productid, displayorder, VariantID, VariantDisplayOrder, ProductName, VariantName)
						SELECT distinct p.productid, do.displayorder, pv.VariantID, pv.DisplayOrder, p.Name, pv.Name
						FROM 
							product p with (nolock)
							join #displayorder do on p.ProductID = do.ProductID 
							left join ProductVariant pv        with (NOLOCK) ON p.ProductID = pv.ProductID and pv.IsDefault >= @ViewType
							left join productcategory pc       with (nolock) on p.ProductID = pc.ProductID 
						left join productstore pst		   with (nolock) on p.ProductID = pst.ProductID 
							left join productsection ps        with (nolock) on p.ProductID = ps.ProductID 
							left join ProductManufacturer pm   with (nolock) on p.ProductID = pm.ProductID 
							left join ProductDistributor pd    with (nolock) on p.ProductID = pd.ProductID 
							left join ProductGenre px          with (nolock) on p.ProductID = px.ProductID 
							left join ProductVector px2        with (nolock) on p.ProductID = px2.ProductID 
							left join ProductLocaleSetting pl  with (nolock) on p.ProductID = pl.ProductID 
							left join ProductCustomerLevel pcl with (nolock) on p.ProductID = pcl.ProductID 
							left join ProductAffiliate pa      with (nolock) on p.ProductID = pa.ProductID 
							left join @splitReductions ps_tmp  on ps.sectionid = convert(int, ps_tmp.items)
							join #inventoryfilter i on pv.VariantID = i.VariantID
						WHERE 
							  (pc.categoryid = @categoryID or @categoryID is null or @categorycount = 0)
						  and (ps.sectionid = @sectionID or @sectionID is null or @sectioncount = 0)
						  and (pl.LocaleSettingID = @localeID or @localeID is null or @localecount = 0)
						  and (pa.AffiliateID = @affiliateID or pa.AffiliateID is null or @affiliatecount = 0 or @FilterProductsByAffiliate = 0)
						  and (pm.manufacturerid = @manufacturerID or @manufacturerID is null or @manufacturercount = 0)
						  and (pd.DistributorID = @distributorID or @distributorID is null or @distributorcount = 0)
						  and (px.GenreID = @genreID or @genreID is null or @genrecount = 0)
						  and (px2.VectorID = @vectorID or @vectorID is null or @vectorcount = 0)
						  and p.ProductTypeID = coalesce(@ProductTypeID, p.ProductTypeID)
						  and (case 
								when @FilterProductsByCustomerLevel = 0 or @custlevelcount = 0 or pcl.CustomerLevelID is null or @CustomerLevelID is null then 1
								when @CustomerLevelFilteringIsAscending = 1 and pcl.CustomerLevelID <= @CustomerLevelID then 1 
								when pcl.CustomerLevelID = @CustomerLevelID or pcl.CustomerLevelID is null then 1 
								else 0
							   end  = 1
							  )
						  and (
							  @UseFullTextIndex = 1
							  or @searchstr is null
							  or patindex(@searchstr, isnull(p.name, '')) > 0
							  or patindex(@searchstr, isnull(convert(nvarchar(20),p.productid), '')) > 0 
							  or patindex(@searchstr, isnull(pv.name, '')) > 0
							  or patindex(@searchstr, isnull(p.sku , '')+isnull(pv.skusuffix , '')) > 0
							  or patindex(@searchstr, isnull(p.manufacturerpartnumber, '')) > 0
							  or patindex(@searchstr, isnull(pv.manufacturerpartnumber, '')) > 0
							  or (patindex(@searchstr, isnull(p.Description, '')) > 0 and @extSearch = 1)
							  or (patindex(@searchstr, isnull(p.Summary, '')) > 0 and @extSearch = 1)
							  )
						  and case when isnull(pv.saleprice,0) = 0 then 0 else 1 end >= @OnSaleOnly
						  and p.published >= @publishedonly
						  and pv.published >= @publishedonly
						  and isnull(p.IsAPack, 0) <= 1-@ExcludePacks
						  and isnull(p.IsAKit, 0) <= 1-@ExcludeKits
						  and p.IsSystem <= 1-@ExcludeSysProds
						  and p.Deleted = 0
						  and pv.Deleted = 0
          					  and ((@IncludeAll = 1) or (getdate() between isnull(p.AvailableStartDate, '1/1/1900') and isnull(p.AvailableStopDate, '1/1/2999')))    
						order by do.displayorder, p.Name, pv.DisplayOrder, pv.Name

					END 
					ELSE BEGIN
						INSERT @productfilter (productid, displayorder, VariantID, VariantDisplayOrder, ProductName, VariantName)
						SELECT distinct p.productid, do.displayorder, pv.VariantID, pv.DisplayOrder, p.Name, pv.Name
						FROM 
							product p with (nolock)
							join #displayorder do on p.ProductID = do.ProductID 
							join ProductVariant pv             with (NOLOCK) on p.ProductID = pv.ProductID and pv.IsDefault >= @ViewType
							left join productcategory pc       with (nolock) on p.ProductID = pc.ProductID 
							left join productstore pst         with (nolock) on p.ProductID = pst.ProductID 
							left join productsection ps        with (nolock) on p.ProductID = ps.ProductID 
							left join ProductManufacturer pm   with (nolock) on p.ProductID = pm.ProductID 
							left join ProductDistributor pd    with (nolock) on p.ProductID = pd.ProductID 
							left join ProductGenre px          with (nolock) on p.ProductID = px.ProductID 
							left join ProductVector px2        with (nolock) on p.ProductID = px2.ProductID 
							left join ProductLocaleSetting pl  with (nolock) on p.ProductID = pl.ProductID 
							left join ProductCustomerLevel pcl with (nolock) on p.ProductID = pcl.ProductID 
							left join ProductAffiliate pa      with (nolock) on p.ProductID = pa.ProductID 
							left join @splitReductions ps_tmp  on ps.sectionid = convert(int, ps_tmp.items)
						WHERE 
							  (pc.categoryid = @categoryID or @categoryID is null or @categorycount = 0)
						  and (ps.sectionid = @sectionID or @sectionID is null or @sectioncount = 0)
						  and (pst.storeid = @storeID or @storeID is null or @storecount = 0)
						  and (pl.LocaleSettingID = @localeID or @localeID is null or @localecount = 0)
						  and (pa.AffiliateID = @affiliateID or pa.AffiliateID is null or @affiliatecount = 0 or @FilterProductsByAffiliate = 0)
						  and (pm.manufacturerid = @manufacturerID or @manufacturerID is null or @manufacturercount = 0)
						  and (pd.DistributorID = @distributorID or @distributorID is null or @distributorcount = 0)
						  and (px.GenreID = @genreID or @genreID is null or @genrecount = 0)
						  and (px2.VectorID = @vectorID or @vectorID is null or @vectorcount = 0)
						  and p.ProductTypeID = coalesce(@ProductTypeID, p.ProductTypeID)
						  and (case 
								when @FilterProductsByCustomerLevel = 0 or @custlevelcount = 0 or pcl.CustomerLevelID is null or @CustomerLevelID is null then 1
								when @CustomerLevelFilteringIsAscending = 1 and pcl.CustomerLevelID <= @CustomerLevelID then 1 
								when pcl.CustomerLevelID = @CustomerLevelID or pcl.CustomerLevelID is null then 1 
								else 0
							   end  = 1
							  )
						  and (
									  @UseFullTextIndex = 1
									  or @searchstr is null
							  or patindex(@searchstr, isnull(p.name, '')) > 0
							  or patindex(@searchstr, isnull(convert(nvarchar(20),p.productid), '')) > 0 
							  or patindex(@searchstr, isnull(pv.name, '')) > 0
							  or patindex(@searchstr, isnull(p.sku , '')+isnull(pv.skusuffix , '')) > 0
							  or patindex(@searchstr, isnull(p.manufacturerpartnumber, '')) > 0
							  or patindex(@searchstr, isnull(pv.manufacturerpartnumber, '')) > 0
							  or (patindex(@searchstr, isnull(p.Description, '')) > 0 and @extSearch = 1)
							  or (patindex(@searchstr, isnull(p.Summary, '')) > 0 and @extSearch = 1)
							  )
						  and case when isnull(pv.saleprice,0) = 0 then 0 else 1 end >= @OnSaleOnly
						  and p.published >= @publishedonly
						  and pv.published >= @publishedonly
						  and isnull(p.IsAPack, 0) <= 1-@ExcludePacks
						  and isnull(p.IsAKit, 0) <= 1-@ExcludeKits
						  and p.IsSystem <= 1-@ExcludeSysProds
						  and p.Deleted = 0
						  and pv.Deleted = 0
          					  AND ((@IncludeAll = 1) OR (Getdate() BETWEEN Isnull(p.availablestartdate,'1/1/1900') AND Isnull(p.availablestopdate,'1/1/2999')))
						order by do.displayorder, p.Name, pv.DisplayOrder, pv.Name

					END

					SET @rcount = @@rowcount


					SELECT 
					PE.EntityID, PE.EntityType, count(PE.EntityID) as productcount
					FROM dbo.Product p with (NOLOCK) 
						left join dbo.ProductVariant       pv  with (NOLOCK) on p.ProductID = pv.ProductID and pv.IsDefault >= @ViewType
						join @productfilter            pf                on pv.ProductID = pf.ProductID and pv.VariantID = pf.VariantID 
						left join dbo.SalesPrompt           s  with (NOLOCK) on p.SalesPromptID = s.SalesPromptID 
						left join dbo.ProductManufacturer  pm  with (NOLOCK) on p.ProductID = pm.ProductID 
						left join dbo.Manufacturer          m  with (NOLOCK) on pm.ManufacturerID = m.ManufacturerID 
						left join dbo.ProductDistributor   pd  with (NOLOCK) on p.ProductID = pd.ProductID
						left join dbo.ProductEntity		PE	with (NOLOCK) on (p.ProductID = PE.ProductID and (@countEntity is null or PE.EntityType = @countEntity))
						left join dbo.Distributor           d  with (NOLOCK) on pd.DistributorID = d.DistributorID
						left join dbo.ExtendedPrice        ep  with (NOLOCK) on ep.VariantID = pv.VariantID and ep.CustomerLevelID = @CustomerLevelID
						left join dbo.ProductCustomerLevel pcl with (NOLOCK) on p.ProductID = pcl.ProductID and pcl.CustomerLevelID = @CustomerLevelID
						left join (select VariantID, sum(quan) quan from dbo.Inventory with (nolock) group by VariantID) i  on pv.VariantID = i.VariantID
					group by PE.entityid, PE.EntityType

				END

			]]>
		</sql>
	</query>
	
	<query name="InstallSetInstalled" rowElementName="SetInstalled" runif="install">
		<sql>
			<![CDATA[
				update appconfig set configvalue = 'true' where name = 'GuidedNavigation.IsInstalled'
			]]>
		</sql>
	</query>
	
	<query name="CheckInstalled" rowElementName="Installed">
		<sql>
			<![CDATA[
				select top 1 ConfigValue from appconfig where name = 'GuidedNavigation.IsInstalled'
			]]>
		</sql>
	</query>
		
	<PackageTransform>

		<xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:aspdnsf="urn:aspdnsf" exclude-result-prefixes="aspdnsf">
			<xsl:output method="html" omit-xml-declaration="yes" />
			<xsl:template match="/">
				<h1>Guided Navigation Installation</h1>
				<xsl:choose>
					<xsl:when test="/root/CheckInstalled/Installed/ConfigValue = 'true'">
						<p>Guided Navigation installation is complete! </p>
						<p>Make sure to reset the cache in your admin console.</p>
					</xsl:when>
					<xsl:otherwise>
						<p>This page is used to install all of the database changes for Guided Navigation. It's a good idea to backup your database before proceeding.</p>
						<button onclick="location.href='?install=true'; return false;">Begin Installation</button>
					</xsl:otherwise>
				</xsl:choose>
			</xsl:template>
			
		</xsl:stylesheet>
		
	</PackageTransform>
	<SearchEngineSettings>
		<SectionTitle actionType="text">
            Guided Navigation Installer
		</SectionTitle>
	</SearchEngineSettings>
</package>
