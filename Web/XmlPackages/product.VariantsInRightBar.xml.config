<?xml version="1.0" encoding="UTF-8" ?>
<!-- ##################################################################################	-->
<!-- Copyright AspDotNetStorefront.com. All Rights Reserved.							-->
<!-- http://www.aspdotnetstorefront.com													-->
<!-- For details on this license please visit the product homepage at the URL above.	-->
<!-- THE ABOVE NOTICE MUST REMAIN INTACT.												-->
<!-- ##################################################################################	-->
<!-- This XML package is designed for multi-variant products.  Variants are listed in a column down the right side of the page, with details and a separate add to cart form for each. -->
<!-- This package is not designed for truly responsive skins, however it uses a basic grid system that will make pages somewhat resizeable. -->
<package version="2.1" displayname="Variants In Right Bar" debug="false" includeentityhelper="true">
	<query name="Products" rowElementName="Product">
		<sql>
			<![CDATA[
				exec dbo.aspdnsf_ProductInfo
					@ProductID = @ProductID,
					@CustomerLevelID = @CustomerLevelID,
					@DefaultVariantOnly = 0,
					@AffiliateID = @AffiliateID,
					@StoreID = @StoreID
      ]]>
		</sql>
		<queryparam paramname="@ProductID"				paramtype="request"	requestparamname="ProductID"				sqlDataType="int"	defvalue="0"	validationpattern="^\d{1,10}$" />
		<queryparam paramname="@CustomerLevelID"	paramtype="runtime"	requestparamname="CustomerLevelID"	sqlDataType="int"	defvalue="0"	validationpattern="" />
		<queryparam paramname="@AffiliateID"			paramtype="system"	requestparamname="AffiliateID"			sqlDataType="int"	defvalue="0"	validationpattern="" />
		<queryparam paramname="@StoreID"					paramtype="runtime"	requestparamname="StoreID"					sqlDataType="int"	defvalue="1"	validationpattern="" />
	</query>

	<PackageTransform>

		<xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:aspdnsf="urn:aspdnsf" exclude-result-prefixes="aspdnsf">
			<xsl:output method="html" omit-xml-declaration="yes" />

			<xsl:param name="LocaleSetting" select="/root/Runtime/LocaleSetting" />

			<xsl:param name="SecID">
				<xsl:choose>
					<xsl:when test="count(/root/QueryString/sectionid) &gt; 0">
						<xsl:value-of select="/root/QueryString/sectionid" />
					</xsl:when>
					<xsl:otherwise>0</xsl:otherwise>
				</xsl:choose>
			</xsl:param>

			<xsl:param name="CatID">
				<xsl:choose>
					<xsl:when test="count(/root/QueryString/categoryid) &gt; 0">
						<xsl:value-of select="/root/QueryString/categoryid" />
					</xsl:when>
					<xsl:otherwise>0</xsl:otherwise>
				</xsl:choose>
			</xsl:param>

			<xsl:param name="ManID">
				<xsl:choose>
					<xsl:when test="count(/root/QueryString/manufacturerid) &gt; 0">
						<xsl:value-of select="/root/QueryString/manufacturerid" />
					</xsl:when>
					<xsl:otherwise>0</xsl:otherwise>
				</xsl:choose>
			</xsl:param>

			<xsl:param name="ShowFullNameInRightBar">
				<xsl:value-of select="aspdnsf:AppConfig('ShowFullNameInRightBar')" disable-output-escaping="yes" />
			</xsl:param>

			<xsl:variable name="ProductIdsOnPage">
				<xsl:for-each select="/root/Products/Product/ProductID">
					<xsl:value-of select="." />
					<xsl:if test="position() != last()">
						<xsl:text>,</xsl:text>
					</xsl:if>
				</xsl:for-each>
			</xsl:variable>
			<xsl:variable name="AvailablePromotions" select="aspdnsf:XmlPackageAsXml('availablePromotions.xml.config', concat('productIdList=', $ProductIdsOnPage))/root/Promotions" />
			<xsl:variable name="schemaProductURL" select="concat(aspdnsf:GetCurrentProtocol(), '://schema.org/Product')"/>

			<!-- This is the main template for this package.  It runs once regardless of how this product is configured. -->
			<xsl:template match="/">
				<div class="page-wrap product-page" itemscope="" itemtype="{$schemaProductURL}">
					<xsl:apply-templates select="/root/Products/Product[1]" />
				</div>
			</xsl:template>

			<!-- Runs once for the parent product (default variant) -->
			<xsl:template match="Product">
				<xsl:param name="pName" select="aspdnsf:GetMLValue(Name)"/>
				<xsl:param name="pDescription" select="aspdnsf:GetMLValue(Description)"/>
				<xsl:param name="pSEAltText" select="aspdnsf:GetMLValue(SEAltText)"/>
				<xsl:param name="pManufacturerName" select="aspdnsf:GetMLValue(ProductManufacturerName)"/>
				<xsl:param name="AltText">
					<xsl:choose>
						<xsl:when test="$pSEAltText=''">
							<xsl:value-of select="$pName" />
						</xsl:when>
						<xsl:otherwise>
							<xsl:value-of select="$pSEAltText" />
						</xsl:otherwise>
					</xsl:choose>
				</xsl:param>
				<xsl:variable name="productId" select="ProductID" />
				<xsl:variable name="productSKU" select="/root/Products/Product/SKU" />
				<xsl:variable name="schemaOrganizationURL" select="concat(aspdnsf:GetCurrentProtocol(), '://schema.org/Organization')"/>
				<xsl:variable name="schemaProductLink" select="aspdnsf:ProductLink(ProductID, SEName, '0', '0', '0', '1')" />
				<xsl:variable name="pManufacturerLink">
					<xsl:choose>
						<xsl:when test="string-length(ProductManufacturerId) &gt; 0 and string-length(ProductManufacturerSEName) &gt; 0">
							<xsl:value-of select="aspdnsf:ManufacturerLink(ProductManufacturerId, ProductManufacturerSEName, '0', '0', '1')" />
						</xsl:when>
					</xsl:choose>
				</xsl:variable>

				<xsl:if test="((string-length($pManufacturerName) &gt; 0) or (string-length($pManufacturerLink) &gt; 0))">
					<span itemprop="manufacturer" itemscope="" itemtype="{$schemaOrganizationURL}">
						<xsl:if test="string-length($pManufacturerName) &gt; 0">
							<meta itemprop="name" content="{$pManufacturerName}"/>
						</xsl:if>
						<xsl:if test="string-length($pManufacturerLink) &gt; 0">
							<meta itemprop="url" content="{$pManufacturerLink}"/>
						</xsl:if>
					</span>
				</xsl:if>
				<xsl:if test="string-length($schemaProductLink) &gt; 0">
					<meta itemprop="url" content="{$schemaProductLink}"/>
				</xsl:if>
				<div class="page-row">
					<div class="one-third product-image-column">
						<xsl:value-of select="aspdnsf:LookupProductImage(ProductID, ImageFilenameOverride, SKU, 'medium', 1, $AltText)" disable-output-escaping="yes"/>
					</div>
					<div class="two-thirds product-info-column">
						<div class="product-info-wrap">
							<!-- Run the Promotion template to display the call to action text for any auto-assigned promos that apply to this product -->
							<xsl:apply-templates select="$AvailablePromotions/Promotion[ProductId=$productId]" />
							<h1 class="product-page-header" itemprop="name">
								<xsl:value-of select="$pName" disable-output-escaping="yes" />
							</h1>
							<xsl:value-of select="aspdnsf:ProductNavLinks(ProductID, /root/Runtime/EntityID, /root/Runtime/EntityName, /root/EntityHelpers/*[name()=/root/Runtime/EntityName]/descendant::Entity[EntityID=/root/Runtime/EntityID]/SEName, 0, 1, 1)" disable-output-escaping="yes" />
							<div class="product-discounttable-wrap">
								<xsl:value-of select="aspdnsf:ShowQuantityDiscountTable(ProductID)" disable-output-escaping="yes" />
							</div>
							<xsl:value-of select="aspdnsf:EmailProductToFriend(ProductID, $CatID)" disable-output-escaping="yes" />
							<div class="product-spec-wrap">
								<xsl:value-of select="aspdnsf:ProductSpecsLink(ProductID, SpecsInline, SpecTitle, SKU, SpecCall)" disable-output-escaping="yes" />
							</div>
							<xsl:if test="string-length($pDescription) &gt; 0">
								<div class="product-description-wrap" itemprop="description">
									<xsl:value-of select="aspdnsf:Decode($pDescription)" disable-output-escaping="yes"/>
								</div>
							</xsl:if>
							<xsl:value-of select="aspdnsf:GetMultiVariantPayPalAd(ProductID)" disable-output-escaping="yes" />
							<!-- list variants now -->
							<xsl:for-each select="/root/Products/Product">
								<xsl:call-template name="Variant"/>
							</xsl:for-each>
						</div>
					</div>
				</div>

				<xsl:value-of select="aspdnsf:RelatedProducts(ProductID)" disable-output-escaping="yes"/>
				<xsl:value-of select="aspdnsf:RecentlyViewed(ProductID)" disable-output-escaping="yes"/>
				<xsl:value-of select="aspdnsf:ShowUpsellProducts(ProductID)" disable-output-escaping="yes"/>
				<xsl:value-of select="aspdnsf:AlsoBought(ProductID, VariantID)" disable-output-escaping="yes"/>
				<xsl:value-of select="aspdnsf:ProductSpecs(ProductID, 1, SpecsInline, SpecCall, 400)" disable-output-escaping="yes"/>
				<xsl:value-of select="aspdnsf:ProductRatings(ProductID, 0, 0, 0, 1)" disable-output-escaping="yes"/>
			</xsl:template>

			<!-- Runs once for each variant -->
			<xsl:template name="Variant">
				<xsl:param name="pName" select="aspdnsf:GetMLValue(/root/Products/Product/Name)" />
				<xsl:param name="vName" select="aspdnsf:GetMLValue(VariantName)" />
				<xsl:param name="pSKU" select="/root/Products/Product/SKU"></xsl:param>
				<xsl:param name="HidePriceUntilCart" select="/root/Products/Product/HidePriceUntilCart"></xsl:param>				
				<xsl:param name="vDescription" select="aspdnsf:GetMLValue(VariantDescription)"></xsl:param>
				<xsl:param name="pSalesPromptName" select="aspdnsf:GetMLValue(/root/Products/Product/SalesPromptName)"></xsl:param>
				<xsl:param name="pSEAltText" select="aspdnsf:GetMLValue(SEAltText)"></xsl:param>
				<xsl:param name="AltText">
					<xsl:choose>
						<xsl:when test="$pSEAltText='' and $vName!=''">
							<xsl:value-of select="$vName" />
						</xsl:when>
						<xsl:otherwise>
							<xsl:value-of select="$pSEAltText" />
						</xsl:otherwise>
					</xsl:choose>
				</xsl:param>				
				<xsl:variable name="fullName" select="concat($pName, ' ', $vName)" />
				<xsl:variable name="schemaOfferURL" select="concat(aspdnsf:GetCurrentProtocol(), '://schema.org/Offer')"/>
				<xsl:variable name="schemaItemOfferedURL" select="concat(aspdnsf:GetCurrentProtocol(), '://schema.org/itemOffered')"/>
				<xsl:variable name="stockStatusText" select="aspdnsf:GetStockStatusText(ProductID, VariantID, 'Product')" />
				<xsl:variable name="productStartDateTime" select="aspdnsf:GetISODateTime(AvailableStartDate)" />
				<xsl:variable name="productEndDateTime" select="aspdnsf:GetISODateTime(AvailableStopDate)" />						
				<xsl:variable name="GTINValue" select="aspdnsf:ValidateGTIN(GTIN)" />
				<xsl:variable name="pImageLarge" select="aspdnsf:ProductImageUrl(ProductID, ImageFileNameOverride, $pSKU, 'large', 1)"/>
				<xsl:variable name="productConditionText" select="aspdnsf:RetrieveProductConditionText(Condition)" />
				<xsl:variable name="mpn" select="concat(ManufacturerPartNumber, VariantManufacturerPartNumber)" />
				<xsl:variable name="productId" select="ProductID" />
				<xsl:variable name="fullSku" select="concat($pSKU, SkuSuffix)" />
				<xsl:variable name="dimensionUnits" select="aspdnsf:ToLower(aspdnsf:AppConfig('Localization.DimensionUnits'))" />
				<xsl:variable name="weightUnits" select="aspdnsf:ToLower(aspdnsf:AppConfig('Localization.WeightUnits'))" />
				
				<div class="variant-info-wrap">
					<div class="variant-name-wrap right-bar-item-name-wrap">
						<xsl:choose>
							<xsl:when test="$ShowFullNameInRightBar='true'">
								<xsl:value-of select="aspdnsf:Decode($pName)" disable-output-escaping="yes"/>
								<xsl:if test="$vName!=''">
									-<xsl:value-of select="aspdnsf:Decode($vName)" disable-output-escaping="yes" />
								</xsl:if>
							</xsl:when>
							<xsl:otherwise>
								<xsl:choose>
									<xsl:when test="$vName=''">
										<xsl:value-of select="aspdnsf:Decode($pName)" disable-output-escaping="yes"/>
									</xsl:when>
									<xsl:otherwise>
										<xsl:value-of select="aspdnsf:Decode($vName)" disable-output-escaping="yes"/>
									</xsl:otherwise>
								</xsl:choose>
							</xsl:otherwise>
						</xsl:choose>
					</div>
					<div id="OrderStatus">
						<xsl:choose>
							<!--  Showing of inventory table also goes through the rules of DisplayOutOfStock appconfig if enabled..-->
							<xsl:when test="aspdnsf:AppConfigBool('ShowInventoryTable')='true'">
								<xsl:value-of select="aspdnsf:ShowInventoryTable(ProductID, VariantID)" disable-output-escaping="yes" />
							</xsl:when>
							<xsl:otherwise>
								<xsl:if test="aspdnsf:AppConfigBool('DisplayOutOfStockProducts') = 'true'">
									<xsl:value-of select="aspdnsf:DisplayProductStockHint(ProductID, VariantID, 'Product')" disable-output-escaping="yes" />
								</xsl:if>
							</xsl:otherwise>
						</xsl:choose>
					</div>
					<div class="list-item-sku-wrap variant-sku-wrap right-bar-item-sku-wrap">
						<xsl:value-of select="aspdnsf:StringResource('showproduct.aspx.21', $LocaleSetting)" disable-output-escaping="yes" />
						<xsl:value-of select="concat($pSKU, SkuSuffix)" />
					</div>
					<div class="variant-weight-wrap right-bar-item-weight-wrap">
						<xsl:if test="Weight!=''">
							<xsl:value-of select="aspdnsf:StringResource('showproduct.aspx.24', $LocaleSetting)" disable-output-escaping="yes" />
							<xsl:value-of select="aspdnsf:FormatDecimal(Weight, 2)" />
						</xsl:if>
					</div>
					<div class="variant-description-wrap right-bar-item-description-wrap">
						<xsl:if test="$vDescription!=''">
							<xsl:value-of select="$vDescription" disable-output-escaping="yes" />
						</xsl:if>
					</div>
					<div class="variant-price-wrap right-bar-item-price-wrap" itemprop="offers" itemscope="" itemtype="{$schemaOfferURL}">
						<xsl:if test="number(CustomerEntersPrice)=0">
							<span>
								<xsl:attribute name="id">
									VariantPrice_<xsl:value-of select="VariantID"/>
								</xsl:attribute>
								<span itemprop="itemOffered" itemscope="" itemtype="{$schemaItemOfferedURL}">
									<xsl:if test="string-length(Weight) &gt; 0 and string-length($weightUnits) &gt; 0">
										<xsl:variable name="pWeight" select="aspdnsf:ValidateWeight(Weight)" />
										<xsl:if test="string-length($pWeight) &gt; 0">
											<meta itemprop="weight" content="{concat(aspdnsf:FormatDecimal($pWeight, '2'), ' ', $weightUnits)}"/>
										</xsl:if>
									</xsl:if>
									<xsl:if test="string-length($fullSku) &gt; 0">
										<meta itemprop="sku" content="{$fullSku}"/>
									</xsl:if>
									<xsl:if test="$productId &gt; 0">
										<meta itemprop="productID" content="{$productId}"/>
									</xsl:if>
									<xsl:if test="((string-length($vName) &gt; 0) and (string-length($pName) &gt; 0))">
										<meta itemprop="name" content="{$fullName}"/>
									</xsl:if>
									<xsl:if test="string-length($mpn) &gt; 0">
										<meta itemprop="mpn" content="{$mpn}"/>
									</xsl:if>
									<xsl:if test="string-length($productConditionText) &gt; 0">
										<link itemprop="itemCondition" href="{concat(aspdnsf:GetCurrentProtocol(), '://schema.org/', concat($productConditionText, 'Condition'))}" content="{aspdnsf:ToLower($productConditionText)}"/>
									</xsl:if>
									<xsl:if test="((string-length($pImageLarge) &gt; 0) and (contains(substring-after($pImageLarge, 'images/'),'.')) and (not(contains($pImageLarge, 'nopicture.gif'))) and (not(contains($pImageLarge, 'nopictureicon.gif'))))">
										<!--This is necessary to escape ampersands in watermaked urls-->
										<xsl:variable name="BeginningImageMetaTag">
											<xsl:text>&lt;meta itemprop="image" content="</xsl:text>
										</xsl:variable>
										<xsl:variable name="EndImageMetaTag">
											<xsl:text>" /&gt;</xsl:text>
										</xsl:variable>
										<xsl:value-of select="$BeginningImageMetaTag" disable-output-escaping="yes" />
										<xsl:value-of select="$pImageLarge" disable-output-escaping="yes" />
										<xsl:value-of select="$EndImageMetaTag" disable-output-escaping="yes" />
									</xsl:if>
									<xsl:if test="string-length($GTINValue) &gt; 0">
										<meta itemprop="{substring-before($GTINValue, '|')}" content="{substring-after($GTINValue, '|')}"/>
									</xsl:if>
									<xsl:if test="string-length($vDescription) &gt; 0">
										<meta itemprop="description" content="{$vDescription}"/>
									</xsl:if>
									<xsl:if test="string-length(Dimensions) &gt; 0 and string-length($dimensionUnits) &gt; 0">
										<xsl:variable name="pWidth" select="aspdnsf:RetrieveDimension(Dimensions, 'width')" />
										<xsl:if test="string-length($pWidth) &gt; 0">
											<meta itemprop="width" content="{concat($pWidth, ' ', $dimensionUnits)}"/>
										</xsl:if>
										<xsl:variable name="pHeight" select="aspdnsf:RetrieveDimension(Dimensions, 'height')" />
										<xsl:if test="string-length($pHeight) &gt; 0">
											<meta itemprop="height" content="{concat($pHeight, ' ', $dimensionUnits)}"/>
										</xsl:if>
										<xsl:variable name="pDepth" select="aspdnsf:RetrieveDimension(Dimensions, 'depth')" />
										<xsl:if test="string-length($pDepth) &gt; 0">
											<meta itemprop="depth" content="{concat($pDepth, ' ', $dimensionUnits)}"/>
										</xsl:if>
									</xsl:if>
								</span>
								<xsl:if test="string-length($stockStatusText) &gt; 0">
									<link itemprop="availability" href="{concat(aspdnsf:GetCurrentProtocol(), '://schema.org/', substring-before($stockStatusText, '|'))}" content="{substring-after($stockStatusText, '|')}"/>
								</xsl:if>
								<xsl:if test="string-length($productStartDateTime) &gt; 0">
									<meta itemprop="availabilityStarts" content="{$productStartDateTime}"/>
								</xsl:if>
								<xsl:if test="string-length($productEndDateTime) &gt; 0">
									<meta itemprop="availabilityEnds" content="{$productEndDateTime}"/>
								</xsl:if>
								<xsl:value-of select="aspdnsf:GetVariantPrice(VariantID, number(HidePriceUntilCart), Price, SalePrice, ExtendedPrice, Points, $pSalesPromptName, TaxClassID)" disable-output-escaping="yes" />
							</span>
						</xsl:if>
					</div>
					<xsl:value-of select="aspdnsf:AddtoCartForm(ProductID, VariantID, 0)" disable-output-escaping="yes"/>
				</div>

			</xsl:template>

			<xsl:template match="Promotion">
				<div class="promotion-call-to-action">
					<xsl:value-of select="CallToAction" disable-output-escaping="yes" />
				</div>
			</xsl:template>
		</xsl:stylesheet>
	</PackageTransform>
</package>
