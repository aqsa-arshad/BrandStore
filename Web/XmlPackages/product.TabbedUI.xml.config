<?xml version="1.0" standalone="yes" ?>
<!-- ##################################################################################	-->
<!-- Copyright AspDotNetStorefront.com. All Rights Reserved.							-->
<!-- http://www.aspdotnetstorefront.com													-->
<!-- For details on this license please visit the product homepage at the URL above.	-->
<!-- THE ABOVE NOTICE MUST REMAIN INTACT.												-->
<!-- ##################################################################################	-->
<!-- This XML package displays information for in up to 5 tabs, depending on which features are enabled on the store/product.  Variants are shown in a dropdown.  -->
<!-- This package is not designed for truly responsive skins, however it uses a basic grid system that will make pages somewhat resizeable. -->
<package version="2.1" displayname="Product Responsive" debug="false" includeentityhelper="true">
	<query name="Products" rowElementName="Product" runif="showproduct">
		<sql>
			<![CDATA[--run stored procedure
                exec dbo.aspdnsf_ProductInfo @ProductID, @CustomerLevelID, 0, 0, @affiliateID
            ]]>
		</sql>
		<queryparam paramname="@ProductID"       paramtype="request" requestparamname="ProductID"       sqlDataType="int" defvalue="0"  validationpattern="^\d{1,10}$" />
		<queryparam paramname="@CustomerLevelID" paramtype="runtime" requestparamname="CustomerLevelID" sqlDataType="int" defvalue="0"  validationpattern="" />
		<queryparam paramname="@affiliateID"     paramtype="system"  requestparamname="AffiliateID"     sqlDataType="int" defvalue="0"  validationpattern="" />
	</query>

	<PackageTransform>
		<xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:aspdnsf="urn:aspdnsf" exclude-result-prefixes="aspdnsf">
			<xsl:output method="html" omit-xml-declaration="yes" />

			<xsl:variable name="DefaultVariantID">
				<xsl:choose>
					<xsl:when test="count(/root/Products/Product[isdefault = 1]) = 0">
						<xsl:value-of select="/root/Products/Product[1]/VariantID" />
					</xsl:when>
					<xsl:otherwise>
						<xsl:value-of select="/root/Products/Product[isdefault=1]/VariantID" />
					</xsl:otherwise>
				</xsl:choose>
			</xsl:variable>

			<xsl:variable name="ProductIdsOnPage">
				<xsl:for-each select="/root/Products/Product/ProductID">
					<xsl:value-of select="." />
					<xsl:if test="position() != last()">
						<xsl:text>,</xsl:text>
					</xsl:if>
				</xsl:for-each>
			</xsl:variable>
			<xsl:variable name="AvailablePromotions" select="aspdnsf:XmlPackageAsXml('availablePromotions.xml.config', concat('productIdList=', $ProductIdsOnPage))/root/Promotions" />
			<xsl:variable name="schemaProductURL" select="concat(aspdnsf:GetCurrentProtocol(), '://schema.org/Product')"/>

			<!-- This is the main template for this package.  It runs once regardless of how this product is configured. -->
			<xsl:template match="/">

				<div class="product-page" itemscope="" itemtype="{$schemaProductURL}">
					<xsl:apply-templates select="/root/Products/Product[isdefault = 1]" />
				</div>
				<xsl:if test="count(/root/Products/Product) &gt; 1">
					<!--Ensure that jQuery is available-->
					<script type="text/javascript">
						if(typeof jQuery !== 'function') {
						document.write(unescape("%3Cscript src='//ajax.googleapis.com/ajax/libs/jquery/1.10.2/jquery.min.js' type='text/javascript'%3E%3C/script%3E"));
						}
					</script>
					<!-- Logic to keep the variant information on page updated with the chosen variant -->
					<script type="text/javascript">
						function updateVariantInfo(variantId){
						if(!variantId > 0){
						variantId = <xsl:value-of select="$DefaultVariantID" />;
						}
						var currentVariantInfoID = 'variant-info-' + variantId;
						$('#variant-info-wrap').find('.variant-info').each(function(index, element){
						if($(element).attr('id') == currentVariantInfoID){
						$(element).show();
						}
						else{
						$(element).hide();
						}
						});
						}

						//fix an issue with firefox hanging onto the selection
						if ($('#variantSelector').val()){
						updateVariantInfo($('#variantSelector').val());
						}
					</script>
				</xsl:if>
			</xsl:template>

			<xsl:template match="Product">
				<xsl:variable name="Description" select="aspdnsf:GetMLValue(Description)" />
				<xsl:variable name="Name" select="aspdnsf:GetMLValue(Name)" />
				<xsl:variable name="SEAltText" select="aspdnsf:GetMLValue(SEAltText)" />
				<xsl:variable name="AltText">
					<xsl:choose>
						<xsl:when test="$SEAltText=''">
							<xsl:value-of select="$Name" />
						</xsl:when>
						<xsl:otherwise>
							<xsl:value-of select="$SEAltText" />
						</xsl:otherwise>
					</xsl:choose>
				</xsl:variable>
				<xsl:variable name="ProductSpecsLink" select="aspdnsf:ProductSpecsLink(ProductID, SpecsInline, SpecTitle, SKU, SpecCall)" />
				<xsl:variable name="productId" select="ProductID" />
				<xsl:variable name="pManufacturerName" select="aspdnsf:GetMLValue(ProductManufacturerName)"/>
				<xsl:variable name="productSKU" select="/root/Products/Product/SKU" />
				<xsl:variable name="schemaOrganizationURL" select="concat(aspdnsf:GetCurrentProtocol(), '://schema.org/Organization')"/>
				<xsl:variable name="schemaProductLink" select="aspdnsf:ProductLink(ProductID, SEName, '0', '0', '0', '1')" />
				<xsl:variable name="pManufacturerLink">
					<xsl:choose>
						<xsl:when test="string-length(ProductManufacturerId) &gt; 0 and string-length(ProductManufacturerSEName) &gt; 0">
							<xsl:value-of select="aspdnsf:ManufacturerLink(ProductManufacturerId, ProductManufacturerSEName, '0', '0', '1')" />
						</xsl:when>
					</xsl:choose>
				</xsl:variable>

				<xsl:choose>
					<xsl:when test="IsAKit=1">
						<div>Sorry! This package does not support kit products</div>
					</xsl:when>
					<xsl:otherwise>
						<xsl:if test="((string-length($pManufacturerName) &gt; 0) or (string-length($pManufacturerLink) &gt; 0))">
							<span itemprop="manufacturer" itemscope="" itemtype="{$schemaOrganizationURL}">
								<xsl:if test="string-length($pManufacturerName) &gt; 0">
									<meta itemprop="name" content="{$pManufacturerName}"/>
								</xsl:if>
								<xsl:if test="string-length($pManufacturerLink) &gt; 0">
									<meta itemprop="url" content="{$pManufacturerLink}"/>
								</xsl:if>
							</span>
						</xsl:if>
						<xsl:if test="string-length($schemaProductLink) &gt; 0">
							<meta itemprop="url" content="{$schemaProductLink}"/>
						</xsl:if>
						<h1 class="product-page-header" itemprop="name">
							<xsl:value-of select="$Name" disable-output-escaping="yes" />
						</h1>
						<div class="product-page-top page-row">
							<xsl:variable name="ProductImage" select="aspdnsf:LookupProductImage(ProductID, ImageFilenameOverride, SKU, 'medium', 1, $AltText)"/>

							<div class="one-third product-image-wrap">
								<xsl:value-of select="$ProductImage" disable-output-escaping="yes"/>
							</div>
							<div class="two-thirds product-info-column">
								<div class="product-info-wrap">
									<!-- Run the Promotion template to display the call to action text for any auto-assigned promos that apply to this product -->
									<xsl:apply-templates select="$AvailablePromotions/Promotion[ProductId=$productId]" />
									<xsl:value-of select="aspdnsf:ProductNavLinks(ProductID, /root/Runtime/EntityID, /root/Runtime/EntityName, /root/EntityHelpers/*[name()=/root/Runtime/EntityName]/descendant::Entity[EntityID=/root/Runtime/EntityID]/SEName, 0, 1, 1)" disable-output-escaping="yes" />
									<xsl:if test="string-length($ProductSpecsLink) &gt; 0">
										<div class="product-spec-link-wrap">
											<xsl:value-of select="$ProductSpecsLink" disable-output-escaping="yes" />
										</div>
									</xsl:if>
									<xsl:choose>
										<!--Showing of inventory table also goes through the rules of DisplayOutOfStock appconfig if enabled..-->
										<xsl:when test="aspdnsf:AppConfigBool('ShowInventoryTable')='true'">
											<div class="inventory-table">
												<xsl:value-of select="aspdnsf:ShowInventoryTable(ProductID, VariantID)" disable-output-escaping="yes" />
											</div>
										</xsl:when>
										<xsl:otherwise>
											<xsl:if test="aspdnsf:AppConfigBool('DisplayOutOfStockProducts') = 'true'">
												<div class="stock-indicator">
													<xsl:value-of select="aspdnsf:DisplayProductStockHint(ProductID, VariantID, 'Product')" disable-output-escaping="yes" />
												</div>
											</xsl:if>
										</xsl:otherwise>
									</xsl:choose>
									<div class="email-a-friend-wrap">
										<a href="emailproduct.aspx?productid={ProductID}" class="email-a-friend-link">
											<xsl:value-of select="aspdnsf:StringResource('showproduct.aspx.20')" disable-output-escaping="yes" />
										</a>
									</div>
									<xsl:if test="count(/root/Products/Product) &gt; 1">
										<div id="product-options-wrap" class="product-options form-group">
											<span id="variant-options-label" class="variant-options-label">
												<xsl:value-of select="aspdnsf:StringResource('Common.VariantLabel')" disable-output-escaping="yes" />
											</span>
											<xsl:text>&#32;</xsl:text>
											<select id="variantSelector" name="variants" onchange="updateVariantInfo(this.value);" class="form-control">
												<xsl:apply-templates select="/root/Products/Product" mode="Variant"/>
											</select>
										</div>
									</xsl:if>

									<div id="variant-info-wrap" class="variant-info-wrap">
										<xsl:for-each select="/root/Products/Product">
											<xsl:call-template name="VariantInfo" />
										</xsl:for-each>
									</div>
									<xsl:value-of select="aspdnsf:GetMultiVariantPayPalAd(ProductID)" disable-output-escaping="yes" />
								</div>
							</div>
						</div>

						<xsl:variable name="showDescription" select="string-length($Description) &gt; 0" />
						<xsl:variable name="related" select="aspdnsf:RelatedProducts(ProductID)" />
						<xsl:variable name="showRelated" select="string-length($related) &gt; 0" />
						<xsl:variable name="showRatings" select="aspdnsf:AppConfigBool('RatingsEnabled') = 'true'" />
						<xsl:variable name="recentlyViewed" select="aspdnsf:RecentlyViewed(ProductID)" />
						<xsl:variable name="recentlyViewedExist" select="string-length($recentlyViewed) &gt; 0" />
						<xsl:variable name="showRecentlyViewed" select="$recentlyViewedExist and aspdnsf:AppConfigBool('RecentlyViewedProducts.Enabled') = 'true'" />
						<xsl:variable name="alsoBought" select="aspdnsf:AlsoBought(ProductID, VariantID)" />
						<xsl:variable name="showAlsoBought" select="(number(aspdnsf:AppConfig('AlsoBoughtNumberToDisplay')) &gt; 0) and (string-length($alsoBought) &gt; 0)" />
						<xsl:if test="$showDescription or $showRelated or $showRatings or $showRecentlyViewed or $showAlsoBought">
							<ul class="tabbitTabs">
								<xsl:if test="$showDescription">
									<li>
										<a href="#productDescription">
											<xsl:value-of select="aspdnsf:StringResource('Product.DescriptionTab')" disable-output-escaping="yes" />
										</a>
									</li>
								</xsl:if>
								<xsl:if test="$showRelated">
									<li>
										<a href="#relatedProducts">
											<xsl:value-of select="aspdnsf:StringResource('Product.RelatedTab')" disable-output-escaping="yes" />
										</a>
									</li>
								</xsl:if>
								<xsl:if test="$showRatings">
									<li>
										<a href="#productRatings">
											<xsl:value-of select="aspdnsf:StringResource('Product.RatingTab')" disable-output-escaping="yes" />
										</a>
									</li>
								</xsl:if>
								<xsl:if test="$showRecentlyViewed">
									<li>
										<a href="#recentlyViewed">
											<xsl:value-of select="aspdnsf:StringResource('Product.RecentlyViewedTab')" disable-output-escaping="yes" />
										</a>
									</li>
								</xsl:if>
								<xsl:if test="$showAlsoBought">
									<li>
										<a href="#alsoBought">
											<xsl:value-of select="aspdnsf:StringResource('Product.AlsoBoughtTab')" disable-output-escaping="yes" />
										</a>
									</li>
								</xsl:if>
							</ul>
							<div class="tabbitTabWrap">
								<xsl:if test="$showDescription">
									<div id="productDescription" itemprop="description">
										<xsl:value-of select="$Description" disable-output-escaping="yes" />
									</div>
								</xsl:if>
								<xsl:if test="$showRelated">
									<div id="relatedProducts">
										<xsl:value-of select="aspdnsf:RelatedProducts(ProductID, 0)" disable-output-escaping="yes"/>
									</div>
								</xsl:if>
								<xsl:if test="$showRatings">
									<div id="productRatings">
										<xsl:value-of select="aspdnsf:ProductRatings(ProductID, 0, 0, 0, 0)" disable-output-escaping="yes"/>
									</div>
								</xsl:if>
								<xsl:if test="$showRecentlyViewed">
									<div id="recentlyViewed">
										<xsl:value-of select="aspdnsf:RecentlyViewed(ProductID)" disable-output-escaping="yes"/>
									</div>
								</xsl:if>
								<xsl:if test="$showAlsoBought">
									<div id="alsoBought">
										<xsl:value-of select="aspdnsf:AlsoBought(ProductID, VariantID)" disable-output-escaping="yes"/>
									</div>
								</xsl:if>
							</div>

							<script type="text/javascript" src="jscripts/tabbit.js"></script>

						</xsl:if>

						<xsl:if test="boolean(/root/Runtime/showproduct)">
							<div class="product-page-footer">
								<xsl:value-of select="aspdnsf:ShowUpsellProducts(ProductID)" disable-output-escaping="yes"/>
								<xsl:value-of select="aspdnsf:ProductSpecs(ProductID, 1, SpecsInline, SpecCall, 400)" disable-output-escaping="yes"/>
							</div>
						</xsl:if>
					</xsl:otherwise>
				</xsl:choose>
			</xsl:template>

			<!-- Runs once for each variant, to build the dropdown list -->
			<xsl:template match="Product" mode="Variant">
				<xsl:variable name="vName" select="aspdnsf:GetMLValue(VariantName)"></xsl:variable>

				<option value="{VariantID}">
					<xsl:if test="isdefault=1">
						<xsl:attribute name="selected">selected</xsl:attribute>
					</xsl:if>
					<xsl:value-of select="$vName" />
				</option>
			</xsl:template>

			<xsl:template name="VariantInfo" >
				<xsl:variable name="SalesPromptName" select="aspdnsf:GetMLValue(SalesPromptName)"></xsl:variable>
				<xsl:variable name="QuantityDiscountTable" select="aspdnsf:ShowQuantityDiscountTable(ProductID)" />
				<xsl:variable name="schemaOfferURL" select="concat(aspdnsf:GetCurrentProtocol(), '://schema.org/Offer')"/>
				<xsl:variable name="schemaItemOfferedURL" select="concat(aspdnsf:GetCurrentProtocol(), '://schema.org/itemOffered')"/>
				<xsl:variable name="stockStatusText" select="aspdnsf:GetStockStatusText(ProductID, VariantID, 'Product')" />
				<xsl:variable name="productStartDateTime" select="aspdnsf:GetISODateTime(AvailableStartDate)" />
				<xsl:variable name="productEndDateTime" select="aspdnsf:GetISODateTime(AvailableStopDate)" />
				<xsl:variable name="GTINValue" select="aspdnsf:ValidateGTIN(GTIN)" />
				<xsl:variable name="pImageLarge" select="aspdnsf:ProductImageUrl(ProductID, ImageFileNameOverride, SKU, 'large', 1)"/>
				<xsl:variable name="productConditionText" select="aspdnsf:RetrieveProductConditionText(Condition)" />
				<xsl:variable name="mpn" select="concat(ManufacturerPartNumber, VariantManufacturerPartNumber)" />
				<xsl:variable name="pName" select="aspdnsf:GetMLValue(Name)" />
				<xsl:variable name="vName" select="aspdnsf:GetMLValue(VariantName)" />
				<xsl:variable name="fullName" select="concat($pName, ' ', $vName)" />
				<xsl:variable name="productId" select="ProductID" />
				<xsl:variable name="pSKU" select="/root/Products/Product/SKU" />
				<xsl:variable name="fullSku" select="concat($pSKU, SkuSuffix)" />
				<xsl:variable name="dimensionUnits" select="aspdnsf:ToLower(aspdnsf:AppConfig('Localization.DimensionUnits'))" />
				<xsl:variable name="weightUnits" select="aspdnsf:ToLower(aspdnsf:AppConfig('Localization.WeightUnits'))" />

				<div id="variant-info-{VariantID}" class="variant-info">
					<xsl:attribute name="style">
						<xsl:choose>
							<xsl:when test="isdefault = 1">display: block;</xsl:when>
							<xsl:otherwise>display: none;</xsl:otherwise>
						</xsl:choose>
					</xsl:attribute>
					<xsl:if test="number(CustomerEntersPrice)=0">
						<div class="variant-price" itemprop="offers" itemscope="" itemtype="{$schemaOfferURL}">
							<span itemprop="itemOffered" itemscope="" itemtype="{$schemaItemOfferedURL}">
								<xsl:if test="string-length(Weight) &gt; 0 and string-length($weightUnits) &gt; 0">
									<xsl:variable name="pWeight" select="aspdnsf:ValidateWeight(Weight)" />
									<xsl:if test="string-length($pWeight) &gt; 0">
										<meta itemprop="weight" content="{concat(aspdnsf:FormatDecimal($pWeight, '2'), ' ', $weightUnits)}"/>
									</xsl:if>
								</xsl:if>
								<xsl:if test="string-length($fullSku) &gt; 0">
									<meta itemprop="sku" content="{$fullSku}"/>
								</xsl:if>
								<xsl:if test="$productId &gt; 0">
									<meta itemprop="productID" content="{$productId}"/>
								</xsl:if>
								<xsl:if test="((string-length($vName) &gt; 0) and (string-length($pName) &gt; 0))">								
									<meta itemprop="name" content="{$fullName}"/>
								</xsl:if>
								<xsl:if test="string-length($mpn) &gt; 0">
									<meta itemprop="mpn" content="{$mpn}"/>
								</xsl:if>
								<xsl:if test="string-length($productConditionText) &gt; 0">
									<link itemprop="itemCondition" href="{concat(aspdnsf:GetCurrentProtocol(), '://schema.org/', concat($productConditionText, 'Condition'))}" content="{aspdnsf:ToLower($productConditionText)}"/>
								</xsl:if>
								<xsl:if test="((string-length($pImageLarge) &gt; 0) and (contains(substring-after($pImageLarge, 'images/'),'.')) and (not(contains($pImageLarge, 'nopicture.gif'))) and (not(contains($pImageLarge, 'nopictureicon.gif'))))">
									<!--This is necessary to escape ampersands in watermaked urls-->
									<xsl:variable name="BeginningImageMetaTag">
										<xsl:text>&lt;meta itemprop="image" content="</xsl:text>
									</xsl:variable>
									<xsl:variable name="EndImageMetaTag">
										<xsl:text>" /&gt;</xsl:text>
									</xsl:variable>
									<xsl:value-of select="$BeginningImageMetaTag" disable-output-escaping="yes" />
									<xsl:value-of select="$pImageLarge" disable-output-escaping="yes" />
									<xsl:value-of select="$EndImageMetaTag" disable-output-escaping="yes" />
								</xsl:if>
								<xsl:if test="string-length($GTINValue) &gt; 0">
									<meta itemprop="{substring-before($GTINValue, '|')}" content="{substring-after($GTINValue, '|')}"/>
								</xsl:if>
								<xsl:if test="string-length(Dimensions) &gt; 0 and string-length($dimensionUnits) &gt; 0">
									<xsl:variable name="pWidth" select="aspdnsf:RetrieveDimension(Dimensions, 'width')" />
									<xsl:if test="string-length($pWidth) &gt; 0">
										<meta itemprop="width" content="{concat($pWidth, ' ', $dimensionUnits)}"/>
									</xsl:if>
									<xsl:variable name="pHeight" select="aspdnsf:RetrieveDimension(Dimensions, 'height')" />
									<xsl:if test="string-length($pHeight) &gt; 0">
										<meta itemprop="height" content="{concat($pHeight, ' ', $dimensionUnits)}"/>
									</xsl:if>
									<xsl:variable name="pDepth" select="aspdnsf:RetrieveDimension(Dimensions, 'depth')" />
									<xsl:if test="string-length($pDepth) &gt; 0">
										<meta itemprop="depth" content="{concat($pDepth, ' ', $dimensionUnits)}"/>
									</xsl:if>
								</xsl:if>
							</span>
							<xsl:if test="string-length($stockStatusText) &gt; 0">
								<link itemprop="availability" href="{concat(aspdnsf:GetCurrentProtocol(), '://schema.org/', substring-before($stockStatusText, '|'))}" content="{substring-after($stockStatusText, '|')}"/>
							</xsl:if>
							<xsl:if test="string-length($productStartDateTime) &gt; 0">
								<meta itemprop="availabilityStarts" content="{$productStartDateTime}"/>
							</xsl:if>
							<xsl:if test="string-length($productEndDateTime) &gt; 0">
								<meta itemprop="availabilityEnds" content="{$productEndDateTime}"/>
							</xsl:if>
							<xsl:value-of select="aspdnsf:StrReplace(aspdnsf:GetVariantPrice(VariantID, HidePriceUntilCart, Price, SalePrice, ExtendedPrice, Points, $SalesPromptName), '&gt;&amp;nbsp;', '&gt;')" disable-output-escaping="yes"/>
						</div>
					</xsl:if>
					<xsl:if test="string-length($QuantityDiscountTable)">
						<div class="quantity-discount-wrap">
							<xsl:value-of select="$QuantityDiscountTable" disable-output-escaping="yes"/>
						</div>
					</xsl:if>
					<div class="add-to-cart-wrap">
						<xsl:value-of select="aspdnsf:AddtoCartForm(ProductID, VariantID, 1)" disable-output-escaping="yes"/>
					</div>
				</div>
			</xsl:template>

			<xsl:template match="Promotion">
				<div class="promotion-call-to-action">
					<xsl:value-of select="CallToAction" disable-output-escaping="yes" />
				</div>
			</xsl:template>

		</xsl:stylesheet>
	</PackageTransform>
</package>
