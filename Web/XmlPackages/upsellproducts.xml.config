<?xml version="1.0" standalone="yes" ?>
<!-- ##################################################################################	-->
<!-- Copyright AspDotNetStorefront.com. All Rights Reserved.							-->
<!-- http://www.aspdotnetstorefront.com													-->
<!-- For details on this license please visit the product homepage at the URL above.	-->
<!-- THE ABOVE NOTICE MUST REMAIN INTACT.												-->
<!-- ##################################################################################	-->
<package version="2.1" displayname="Upsell Products" debug="false" includeentityhelper="false">
	<query name="UpsellProducts" rowElementName="Product" runif="Productid">
		<sql>
			<![CDATA[
				exec aspdnsf_GetUpsellProducts @productID, @customerlevelID, @invFilter, @storeID, @FilterProduct
            ]]>
		</sql>
		<queryparam paramname="@productID"			paramtype="runtime"		requestparamname="ProductID"									sqlDataType="int"	defvalue="0"	  validationpattern="" />
		<queryparam paramname="@CustomerLevelID"	paramtype="runtime"		requestparamname="CustomerLevelID"								sqlDataType="int"	defvalue="0"	  validationpattern="" />
		<queryparam paramname="@InvFilter"			paramtype="appconfig"	requestparamname="HideProductsWithLessThanThisInventoryLevel"	sqlDataType="int"	defvalue="0"	  validationpattern="" />
		<queryparam paramname="@StoreID"			paramtype="runtime"		requestparamname="StoreID"										sqlDataType="int"	defvalue="1"	  validationpattern="" />
		<queryparam paramname="@FilterProduct"		paramtype="runtime"		requestparamname="FilterProduct"								sqlDataType="bit"	defvalue="0"	  validationpattern="" />
	</query>

	<query name="UpsellProductsCart" rowElementName="Product" runif="cart">
		<sql>
			<![CDATA[
                declare @tmp table (productid int, UpsellProductID int)
                declare @UpsellProducts varchar(8000), @pid int
                set @UpsellProducts = ''

                select top 1 @pid = p.productid, @UpsellProducts = isnull(cast(UpsellProducts as varchar(8000)), '')
                from dbo.shoppingcart sc with (nolock) join dbo.product p with (nolock) on sc.productid = p.productid 
                where customerid = @CustomerID
                ORDER BY sc.productid 

                while @@rowcount > 0 begin
                    insert @tmp select @pid, convert(int, s.items) UpsellProductID from dbo.split(@UpsellProducts , ',') s left join @tmp t on t.UpsellProductID = convert(int, s.items) where t.productid is null
                    
                    select top 1 @pid = p.productid, @UpsellProducts =isnull(cast(UpsellProducts as varchar(8000)), '')
                    from dbo.shoppingcart sc with (nolock) join dbo.product p with (nolock) on sc.productid = p.productid 
                    where customerid = @CustomerID and sc.productid > @pid
                    ORDER BY sc.productid 
                end
                
                --For multi store. Delete items not included in a specific store.
                IF EXISTS(SELECT TOP 1 Name FROM GlobalConfig WHERE Name = 'AllowProductFiltering' AND ConfigValue= 'true')
	              BEGIN
		              DELETE @tmp WHERE UpsellProductID NOT IN (SELECT ProductID FROM ProductStore WHERE StoreID = @StoreID)
	              END  

                select top {limit} 1-(p2.UpsellProductDiscountPercentage/100) UpsellDiscMultiplier,
                       p.ProductID, p.Name, p.SEName, p.Summary, p.Description, rtrim(pv.Name) VariantName, p.SEAltText, p.ImageFilenameOverride, p.TaxClassID,
                       p.SKU, pv.VariantID, p.HidePriceUntilCart, pv.Price, isnull(pv.SalePrice, 0) SalePrice, isnull(ep.Price, 0) ExtendedPrice, pv.Points, 
                       sp.Name SalesPromptName
                from @tmp t
                    join dbo.product p with (nolock) on p.productid  = t.UpsellProductID  
                    join dbo.product p2 with (nolock) on p2.productid  = t.productid  
                    join dbo.productvariant pv  with (nolock) on p.productid = pv.productid and pv.IsDefault = 1
                    left join dbo.SalesPrompt sp  with (nolock) on p.SalesPromptID = sp.SalesPromptID
                    left join dbo.ExtendedPrice ep  with (nolock) on ep.VariantID = pv.VariantID and ep.CustomerLevelID = @CustomerLevelID
                    left join (select VariantID, sum(quan) quan from Inventory with (nolock) group by VariantID) i on i.VariantID = pv.VariantID
                where (p.RequiresTextOption IS NULL or p.RequiresTextOption=0) 
                    and (isnull(convert(nvarchar(4000), Sizes), '') = '' or convert(nvarchar(4000), Sizes) not like '%>[^<>]%_[^<>]%<%') 
                    and (isnull(convert(nvarchar(4000), Colors), '') = '' or convert(nvarchar(4000), Colors) not like '%>[^<>]%_[^<>]%<%') 
                    and p.IsAKit=0 and p.IsAPack=0 and p.IsCallToOrder = 0
                    and p.ProductID not in (select ProductID from ShoppingCart  with (nolock) where CartType=0 and CustomerID=@CustomerID)
                    and case p.TrackInventoryBySizeAndColor when 1 then isnull(i.quan, 0) else pv.inventory end >= @InvFilter
                    and p.published > 0

                ]]>
		</sql>
		<querystringreplace replaceTag="{limit}"  replacetype="appconfig" replaceparamname="UpsellProductsLimitNumberOnCart"   defvalue="10" validationpattern="\d{1,10}" />

		<queryparam paramname="@CustomerID"      paramtype="system"     requestparamname="CustomerID"                                 sqlDataType="int" defvalue="0"  validationpattern="" />
		<queryparam paramname="@CustomerLevelID" paramtype="runtime"    requestparamname="CustomerLevelID"                            sqlDataType="int" defvalue="0"  validationpattern="" />
		<queryparam paramname="@InvFilter"       paramtype="appconfig"  requestparamname="HideProductsWithLessThanThisInventoryLevel" sqlDataType="int" defvalue="0"  validationpattern="" />
		<queryparam paramname="@StoreID"		     paramtype="runtime"    requestparamname="StoreID"									                  sqlDataType="int" defvalue="1"  validationpattern="" />
	</query>

	<PackageTransform>
		<xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
                        xmlns:aspdnsf="urn:aspdnsf" exclude-result-prefixes="aspdnsf">
			<xsl:output method="html" omit-xml-declaration="yes" />

			<xsl:param name="UpsellProductsGridColWidth" select="aspdnsf:AppConfig('UpsellProductsGridColWidth')"></xsl:param>
			<xsl:param name="UpsellProductsCount" select="count(/root/UpsellProducts/Product)"></xsl:param>

			<xsl:variable name="ProductIdsOnPage">
				<xsl:for-each select="/root/UpsellProducts/Product/ProductID">
					<xsl:value-of select="." />
					<xsl:if test="position() != last()">
						<xsl:text>,</xsl:text>
					</xsl:if>
				</xsl:for-each>
			</xsl:variable>
			<xsl:variable name="AvailablePromotions" select="aspdnsf:XmlPackageAsXml('availablePromotions.xml.config', concat('productIdList=', $ProductIdsOnPage))/root/Promotions" />

			<xsl:template match="/">
				<xsl:if test="number($UpsellProductsCount) &gt; 0">
					<script type="text/javascript">
						<![CDATA[
							function UpsellClick(theItem)
							{
								var UpsellItemList = '';
								var whichitem = 0;
								var UpsellList = document.getElementsByName('Upsell');
								var UpsellProductList = document.getElementsByName('UpsellProducts');							
								for (i=0; i<UpsellList.length; i++)
								{
									if (UpsellList[i].checked && UpsellList[i].value != '0')
									{
										if (UpsellItemList.length > 0)
										{
											UpsellItemList = UpsellItemList + ',';
										}
										UpsellItemList = UpsellItemList + UpsellList[i].value;
									}
								}
							
								for(j=0; j<UpsellProductList.length; j++)
								{
									UpsellProductList[j].value = UpsellItemList;
								}	
							}
						]]>
					</script>

					<div class="upsell-products other-products-wrap">
						<div class="group-header upsell-items-header other-products-header">
							<xsl:value-of select="aspdnsf:StringResource('Header.UpsellHeader')" disable-output-escaping="yes" />
						</div>
						<xsl:choose>
							<xsl:when test="/root/Runtime/teaser != ''">
								<p class="upsell-teaser">
									<xsl:value-of select="/root/Runtime/teaser" />
								</p>
							</xsl:when>
							<xsl:otherwise>
								<xsl:value-of select="aspdnsf:Topic('UpsellTeaser')" disable-output-escaping="yes" />
							</xsl:otherwise>
						</xsl:choose>
						<div class="page-row upsell-item-row">
							<xsl:apply-templates select="/root/UpsellProducts/Product" />
						</div>
					</div>
				</xsl:if>

				<xsl:if test="count(/root/UpsellProductsCart/Product) &gt; 0 and aspdnsf:AppConfigBool('ShowUpsellProductsOnCartPage') = 'true'">
					<h2 class="upsell-items-header cart-upsell-header">
						<xsl:value-of select="aspdnsf:StringResource('Header.UpsellHeader')" disable-output-escaping="yes" />
					</h2>
					<div class="cart-upsell-products">
						<xsl:choose>
							<xsl:when test="/root/Runtime/teaser != ''">
								<p class="upsell-teaser">
									<xsl:value-of select="/root/Runtime/teaser" />
								</p>
							</xsl:when>
							<xsl:otherwise>
								<xsl:value-of select="aspdnsf:Topic('UpsellTeaser')" disable-output-escaping="yes" />
							</xsl:otherwise>
						</xsl:choose>
						<div class="page-row item-row">
							<xsl:apply-templates select="/root/UpsellProductsCart/Product" />
						</div>
					</div>

				</xsl:if>
			</xsl:template>

			<xsl:template match="Product">
				<xsl:variable name="Name" select="aspdnsf:GetMLValue(Name)"></xsl:variable>
				<xsl:variable name="SalesPromptName" select="aspdnsf:GetMLValue(SalesPromptName)"></xsl:variable>
				<xsl:variable name="SEAltText" select="aspdnsf:GetMLValue(SEAltText)"></xsl:variable>
				<xsl:variable name="AltText">
					<xsl:choose>
						<xsl:when test="$SEAltText=''">
							<xsl:value-of select="$Name" />
						</xsl:when>
						<xsl:otherwise>
							<xsl:value-of select="$SEAltText" />
						</xsl:otherwise>
					</xsl:choose>
				</xsl:variable>
				<xsl:variable name="ProductID" select="ProductID" />
				<xsl:variable name="IsRecurring" select="HasRecurring" />
				<xsl:variable name="ProductLink" select="aspdnsf:ProductLink(ProductID, SEName, 0)" />
				<xsl:variable name="ImageUrl" select="aspdnsf:ImageUrl(ProductID, 'product', 'icon', 0)" />
				<xsl:variable name="ProductImageLarge" select="aspdnsf:ProductImageUrl(ProductID, '', '0', 'large', 1)" />
				<xsl:variable name="pManufacturerName" select="aspdnsf:GetMLValue(ProductManufacturerName)"/>
				<xsl:variable name="productSKU" select="aspdnsf:GetMLValue(SKU)" />
				<xsl:variable name="pDescription" select="aspdnsf:GetMLValue(Description)"/>
				<xsl:variable name="schemaProductURL" select="concat(aspdnsf:GetCurrentProtocol(), '://schema.org/Product')"/>
				<xsl:variable name="schemaOrganizationURL" select="concat(aspdnsf:GetCurrentProtocol(), '://schema.org/Organization')"/>
				<xsl:variable name="schemaProductLink" select="aspdnsf:ProductLink(ProductID, SEName, '0', '0', '0', '1')" />
				<xsl:variable name="pManufacturerLink">
					<xsl:choose>
						<xsl:when test="string-length(ProductManufacturerId) &gt; 0 and string-length(ProductManufacturerSEName) &gt; 0">
							<xsl:value-of select="aspdnsf:ManufacturerLink(ProductManufacturerId, ProductManufacturerSEName, '0', '0', '1')" />
						</xsl:when>
					</xsl:choose>
				</xsl:variable>
				<xsl:variable name="fullSku" select="concat($productSKU, SkuSuffix)" />
				<xsl:variable name="productConditionText" select="aspdnsf:RetrieveProductConditionText(Condition)" />
				<xsl:variable name="mpn" select="concat(ManufacturerPartNumber, VariantManufacturerPartNumber)" />
				<xsl:variable name="GTINValue" select="aspdnsf:ValidateGTIN(GTIN)" />
				<xsl:variable name="dimensionUnits" select="aspdnsf:ToLower(aspdnsf:AppConfig('Localization.DimensionUnits'))" />
				<xsl:variable name="weightUnits" select="aspdnsf:ToLower(aspdnsf:AppConfig('Localization.WeightUnits'))" />
				<xsl:variable name="GridItemCSSClassName">
					<xsl:choose>
						<xsl:when test="number($UpsellProductsGridColWidth) = 1">
							<xsl:text>full-width</xsl:text>
						</xsl:when>
						<xsl:when test="number($UpsellProductsGridColWidth) = 2">
							<xsl:text>one-half</xsl:text>
						</xsl:when>
						<xsl:when test="number($UpsellProductsGridColWidth) = 3">
							<xsl:text>one-third</xsl:text>
						</xsl:when>
						<xsl:when test="number($UpsellProductsGridColWidth) = 4">
							<xsl:text>one-fourth</xsl:text>
						</xsl:when>
						<xsl:when test="number($UpsellProductsGridColWidth) = 5">
							<xsl:text>one-fifth</xsl:text>
						</xsl:when>
						<xsl:when test="number($UpsellProductsGridColWidth) = 6">
							<xsl:text>one-sixth</xsl:text>
						</xsl:when>
						<xsl:otherwise>
							<xsl:text>one-fourth</xsl:text>
						</xsl:otherwise>
					</xsl:choose>
				</xsl:variable>

				<xsl:if test="position() mod $UpsellProductsGridColWidth = 1 and position() &gt; 1">
					<xsl:variable name="NewRowHtml">
						<xsl:text>&lt;/div&gt;&lt;div class="page-row upsell-item-row"&gt;</xsl:text>
					</xsl:variable>
					<xsl:value-of select="$NewRowHtml" disable-output-escaping="yes" />
				</xsl:if>
				<div class="{$GridItemCSSClassName} product-grid-item upsell-item" itemprop="isRelatedTo" itemscope="" itemtype="{$schemaProductURL}">
					<div class="grid-item-inner">
						<div class="upsell-item-image-wrap grid-item-image-wrap">
							<a href="{$ProductLink}">
								<img src="{$ImageUrl}" alt="{$AltText}" class="img-thumbnail img-responsive upsell-item-image grid-item-image" />
							</a>
							<xsl:if test="string-length($GTINValue) &gt; 0">
								<meta itemprop="{substring-before($GTINValue, '|')}" content="{substring-after($GTINValue, '|')}"/>
							</xsl:if>
							<xsl:if test="string-length($mpn) &gt; 0">
								<meta itemprop="mpn" content="{$mpn}"/>
							</xsl:if>
							<xsl:if test="string-length(Dimensions) &gt; 0 and string-length($dimensionUnits) &gt; 0">
								<xsl:variable name="pWidth" select="aspdnsf:RetrieveDimension(Dimensions, 'width')" />
								<xsl:if test="string-length($pWidth) &gt; 0">
									<meta itemprop="width" content="{concat($pWidth, ' ', $dimensionUnits)}"/>
								</xsl:if>
								<xsl:variable name="pHeight" select="aspdnsf:RetrieveDimension(Dimensions, 'height')" />
								<xsl:if test="string-length($pHeight) &gt; 0">
									<meta itemprop="height" content="{concat($pHeight, ' ', $dimensionUnits)}"/>
								</xsl:if>
								<xsl:variable name="pDepth" select="aspdnsf:RetrieveDimension(Dimensions, 'depth')" />
								<xsl:if test="string-length($pDepth) &gt; 0">
									<meta itemprop="depth" content="{concat($pDepth, ' ', $dimensionUnits)}"/>
								</xsl:if>
							</xsl:if>
							<xsl:if test="string-length(Weight) &gt; 0 and string-length($weightUnits) &gt; 0">
								<xsl:variable name="pWeight" select="aspdnsf:ValidateWeight(Weight)" />
								<xsl:if test="string-length($pWeight) &gt; 0">
									<meta itemprop="weight" content="{concat(aspdnsf:FormatDecimal($pWeight, '2'), ' ', $weightUnits)}"/>
								</xsl:if>
							</xsl:if>
							<xsl:if test="string-length($productConditionText) &gt; 0">
								<link itemprop="itemCondition" href="{concat(aspdnsf:GetCurrentProtocol(), '://schema.org/', concat($productConditionText, 'Condition'))}" content="{aspdnsf:ToLower($productConditionText)}"/>
							</xsl:if>
							<xsl:if test="string-length($fullSku) &gt; 0">
								<meta itemprop="sku" content="{$fullSku}"/>
							</xsl:if>
							<xsl:if test="$ProductID &gt; 0">
								<meta itemprop="productID" content="{$ProductID}"/>
							</xsl:if>
							<xsl:if test="((string-length($ProductImageLarge) &gt; 0) and (contains(substring-after($ProductImageLarge, 'images/'),'.')) and (not(contains($ProductImageLarge, 'nopicture.gif'))) and (not(contains($ProductImageLarge, 'nopictureicon.gif'))))">
								<!--This is necessary to escape ampersands in watermaked urls-->
								<xsl:variable name="BeginningImageMetaTag">
									<xsl:text>&lt;meta itemprop="image" content="</xsl:text>
								</xsl:variable>
								<xsl:variable name="EndImageMetaTag">
									<xsl:text>" /&gt;</xsl:text>
								</xsl:variable>
								<xsl:value-of select="$BeginningImageMetaTag" disable-output-escaping="yes" />
								<xsl:value-of select="$ProductImageLarge" disable-output-escaping="yes" />
								<xsl:value-of select="$EndImageMetaTag" disable-output-escaping="yes" />
							</xsl:if>
							<xsl:if test="((string-length($pManufacturerName) &gt; 0) or (string-length($pManufacturerLink) &gt; 0))">
								<span itemprop="manufacturer" itemscope="" itemtype="{$schemaOrganizationURL}">
									<xsl:if test="string-length($pManufacturerName) &gt; 0">
										<meta itemprop="name" content="{$pManufacturerName}"/>
									</xsl:if>
									<xsl:if test="string-length($pManufacturerLink) &gt; 0">
										<meta itemprop="url" content="{$pManufacturerLink}"/>
									</xsl:if>
								</span>
							</xsl:if>
							<xsl:if test="string-length($Name) &gt; 0">
								<meta itemprop="name" content="{$Name}"/>
							</xsl:if>
							<xsl:if test="string-length($pDescription) &gt; 0">
								<meta itemprop="description" content="{$pDescription}"/>
							</xsl:if>
							<xsl:if test="string-length($schemaProductLink) &gt; 0">
								<meta itemprop="url" content="{$schemaProductLink}"/>
							</xsl:if>
						</div>
						<div class="grid-item-name-wrap upsell-item-name-wrap ">
							<a href="{$ProductLink}">
								<xsl:value-of select="$Name" disable-output-escaping="yes" />
							</a>
						</div>
						<xsl:if test="aspdnsf:AppConfigBool('DisplayOutOfStockProducts') = 'true'">
							<div class="upsell-item-stock-wrap">
								<xsl:value-of select="aspdnsf:DisplayProductStockHint(ProductID,'Entity')" disable-output-escaping="yes" />
							</div>
						</xsl:if>
						<div class="grid-item-price-wrap upsell-item-price-wrap">
							<xsl:value-of select="aspdnsf:GetUpsellVariantPrice(VariantID, HidePriceUntilCart, Price, SalePrice, ExtendedPrice, Points, aspdnsf:GetMLValue(SalesPromptName), 0, TaxClassID, UpsellDiscMultiplier, ProductID, AvailableStartDate, AvailableStopDate)" disable-output-escaping="yes" />
						</div>
						<div class="upsell-item-checkbox-wrap">
							<input type="checkbox" id="Upsell" name="Upsell" value="{ProductID}" >
								<xsl:if test="number($UpsellProductsCount) &gt; 0">
									<xsl:attribute name="OnClick">UpsellClick(this);</xsl:attribute>
								</xsl:if>
							</input>
						</div>
						<xsl:if test="$IsRecurring = 'True'">
							<div class="productCallToActionIsRecurring">
								<xsl:value-of select="aspdnsf:StringResource('product.CallToAction.IsRecurring')" disable-output-escaping="yes" />
							</div>
						</xsl:if>
						<xsl:apply-templates select="$AvailablePromotions/Promotion[ProductId=$ProductID]" />
					</div>
				</div>
			</xsl:template>

			<xsl:template match="Promotion">
				<div class="promotion-call-to-action">
					<xsl:value-of select="CallToAction" disable-output-escaping="yes" />
				</div>
			</xsl:template>
		</xsl:stylesheet>
	</PackageTransform>
</package>
