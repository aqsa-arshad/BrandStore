<?xml version="1.0" standalone="yes" ?>
<!-- ##################################################################################	-->
<!-- Copyright AspDotNetStorefront.com. All Rights Reserved.							-->
<!-- http://www.aspdotnetstorefront.com													-->
<!-- For details on this license please visit the product homepage at the URL above.	-->
<!-- THE ABOVE NOTICE MUST REMAIN INTACT.												-->
<!-- ##################################################################################	-->
<package version="2.1" displayname="Mobile Slider" debug="false" includeentityhelper="false">
	<!--
	USAGE:	
  <asp:Literal runat="server" Text='<%$ Tokens:XmlPackage,mobile.productslider,appconfig=[AppConfig name containing CSV of PIDs]&id=[UNIQUEID]  %>' />
  <asp:Literal runat="server" Text='<%$ Tokens:XmlPackage,mobile.productslider,cappconfig=[AppConfig referencing a categorid]&id=[UNIQUEID]  %>' />
  <asp:Literal runat="server" Text='<%$ Tokens:XmlPackage,mobile.productslider,category=[CATEGORYID]&id=[UNIQUEID]  %>' />
  <asp:Literal runat="server" Text='<%$ Tokens:XmlPackage,mobile.productslider,id=[UNIQUEID]&products=[DASH SEPERATED LIST OF PIDs (9-89-45)]  %>' />
  
	AppConfigs:
	Mobile.ProductSlider.MaxProducts
	Mobile.ProductSlider.Width
	Mobile.ProductSlider.ImageWidth
	-->
	
	<query name="Products" rowElementName="Product" runif="products">
		<sql>
			<![CDATA[
                select top (@MaxProducts) p.ProductID, pv.VariantID, p.SEName, p.Name, p.ImageFileNameOverride, p.SKU, p.SEAltText
				from product p left join productvariant pv on p.productid = pv.productid
        left join productstore ps on (p.productid = ps.productid and ps.storeid = @StoreID)
				where ('-{ProductIDs}-' like '%-'+convert(nvarchar(10),p.productid)+'-%' or ',{ProductIDs},' like '%,'+convert(nvarchar(10),p.productid)+',%')
					and pv.isdefault = 1
					and p.published = 1
					and p.deleted = 0
          and (@FilterProduct = 0 or ps.storeid = @StoreID)
				order by newid()
            ]]>
		</sql>
		<querystringreplace replaceTag="{ProductIDs}" replacetype="runtime" replaceparamname="products" defvalue="" validationpattern="" />
		<queryparam paramname="@MaxProducts" paramtype="appconfig" requestparamname="Mobile.ProductSlider.MaxProducts" sqlDataType="int" defvalue="15" validationpattern="" />
    <queryparam paramname="@StoreID"	      paramtype="runtime"   requestparamname="StoreID"										                   sqlDataType="int"	   defvalue="1"      validationpattern="" />
    <queryparam paramname="@FilterProduct"  paramtype="runtime"   requestparamname="FilterProduct"										             sqlDataType="bit"	   defvalue="0"      validationpattern="" />
  </query>
	<query name="Products" rowElementName="Product" runif="appconfig">
		<sql>
			<![CDATA[
                declare @pCSV varchar(max) 

				select @pCSV = configvalue from appconfig where [name] = '{ConfigName}' and storeid = @StoreID

				select top (@MaxProducts) p.ProductID, pv.VariantID, p.SEName, p.Name, p.ImageFileNameOverride, p.SKU, p.SEAltText 
				from dbo.Split(@pCSV, ',') csv
					join product p on csv.items = p.productid
					left join productvariant pv on p.productid = pv.productid
          left join productstore ps on (p.productid = ps.productid and ps.storeid = @StoreID)
				where pv.isdefault = 1
					and p.published = 1
					and p.deleted = 0
          and (@FilterProduct = 0 or ps.storeid = @StoreID)
				order by newid()
            ]]>
		</sql>
		<querystringreplace replaceTag="{ConfigName}" replacetype="runtime" replaceparamname="appconfig" defvalue="" validationpattern="" />
		<queryparam paramname="@MaxProducts" paramtype="appconfig" requestparamname="Mobile.ProductSlider.MaxProducts" sqlDataType="int" defvalue="15" validationpattern="" />
    <queryparam paramname="@StoreID"	      paramtype="runtime"   requestparamname="StoreID"										                   sqlDataType="int"	   defvalue="1"      validationpattern="" />
    <queryparam paramname="@FilterProduct"  paramtype="runtime"   requestparamname="FilterProduct"										             sqlDataType="bit"	   defvalue="0"      validationpattern="" />
  </query>
	<query name="Products" rowElementName="Product" runif="cappconfig">
		<sql>
			<![CDATA[
                declare @CatID varchar(max) 

				select @CatID = configvalue from appconfig where [name] = '{ConfigName}'
				select top (@MaxProducts) p.ProductID, pv.VariantID, p.SEName, p.Name, p.ImageFileNameOverride, p.SKU, p.SEAltText 
				from product p
					left join productvariant pv on p.productid = pv.productid
					join productcategory pc on (p.productid = pc.productid and pc.categoryid = @CatID)
          left join productstore ps on (p.productid = ps.productid and ps.storeid = @StoreID)
				where pv.isdefault = 1
					and p.published = 1
					and p.deleted = 0
          and (@FilterProduct = 0 or ps.storeid = @StoreID)
				order by newid()
            ]]>
		</sql>
		<querystringreplace replaceTag="{ConfigName}" replacetype="runtime" replaceparamname="cappconfig" defvalue="" validationpattern="" />
		<queryparam paramname="@MaxProducts" paramtype="appconfig" requestparamname="Mobile.ProductSlider.MaxProducts" sqlDataType="int" defvalue="15" validationpattern="" />
    <queryparam paramname="@StoreID"	      paramtype="runtime"   requestparamname="StoreID"										                   sqlDataType="int"	   defvalue="1"      validationpattern="" />
    <queryparam paramname="@FilterProduct"  paramtype="runtime"   requestparamname="FilterProduct"										             sqlDataType="bit"	   defvalue="0"      validationpattern="" />
  </query>
	<query name="Products" rowElementName="Product" runif="category">
		<sql>
			<![CDATA[
                select top (@MaxProducts) p.ProductID, pv.VariantID, p.SEName, p.Name, p.ImageFileNameOverride, p.SKU, p.SEAltText
				from product p 
					left join productvariant pv on p.productid = pv.productid
					join productcategory pc on (p.productid = pc.productid and pc.categoryid={CategoryID})
          left join productstore ps on (p.productid = ps.productid and ps.storeid = @StoreID)
				where pv.isdefault = 1
					and p.published = 1
					and p.deleted = 0
          and (@FilterProduct = 0 or ps.storeid = @StoreID)
				order by newid()
            ]]>
		</sql>
		<querystringreplace replaceTag="{CategoryID}" replacetype="runtime" replaceparamname="category" defvalue="" validationpattern="" />
		<queryparam paramname="@MaxProducts" paramtype="appconfig" requestparamname="Mobile.ProductSlider.MaxProducts" sqlDataType="int" defvalue="15" validationpattern="" />
    <queryparam paramname="@StoreID"	      paramtype="runtime"   requestparamname="StoreID"										                   sqlDataType="int"	   defvalue="1"      validationpattern="" />
    <queryparam paramname="@FilterProduct"  paramtype="runtime"   requestparamname="FilterProduct"										             sqlDataType="bit"	   defvalue="0"      validationpattern="" />
  </query>
	
	
	
	<PackageTransform>
		<xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:aspdnsf="urn:aspdnsf" exclude-result-prefixes="aspdnsf">
			<xsl:output method="html" omit-xml-declaration="yes" />

			<xsl:param name="SliderID" select="/root/Runtime/id" />
			<xsl:param name="SliderWidth">
				<xsl:choose>
					<xsl:when test="aspdnsf:AppConfig('Mobile.ProductSlider.Width') &gt; 0">
						<xsl:value-of select="aspdnsf:AppConfig('Mobile.ProductSlider.Width')" />
					</xsl:when>
					<xsl:otherwise>3</xsl:otherwise>
				</xsl:choose>
			</xsl:param>
			<xsl:param name="IconWidth">
				<xsl:choose>
					<xsl:when test="aspdnsf:AppConfig('Mobile.ProductSlider.ImageWidth') &gt; 0">
						<xsl:value-of select="aspdnsf:AppConfig('Mobile.ProductSlider.ImageWidth')" />
					</xsl:when>
					<xsl:otherwise>60</xsl:otherwise>
				</xsl:choose>
			</xsl:param>
			<xsl:param name="CountProducts" select="count(/root/Products/Product)" />
			<xsl:param name="CountTabs" select="ceiling($CountProducts div $SliderWidth)" />

			<xsl:template match="/">
				<xsl:if test="$CountProducts &gt; 0">
          <xsl:if test="$CountTabs > 1">
					  <script type="text/javascript">
						  addLoadEvent(function() {
						    new Accordian('<xsl:value-of select="$SliderID" />-accordian', 25, 'slider_highlight', 'horizontal');
              });
              $(function() {
                $("#<xsl:value-of select="$SliderID" />-accordian").swiperight(function() {
                  sliderleft('<xsl:value-of select="$SliderID" />-accordian')
                });
                $("#<xsl:value-of select="$SliderID" />-accordian").swipeleft(function() {
                  sliderright('<xsl:value-of select="$SliderID" />-accordian')
                });
              });
            </script>
          </xsl:if>
					<table class="slidertable">
						<tr>
              <xsl:if test="$CountTabs > 1">
                <td class="sliderarrow">
                  <a href="javascript:sliderleft('{$SliderID}-accordian')" class="sliderleft" data-role="button" data-icon="arrow-l" data-iconpos="notext"></a>
                </td>
              </xsl:if>
							<td style="width:100%;">
								<div id="{$SliderID}-accordian" class="accordion-slider">
                  <xsl:if test="$CountTabs > 1">
                    <xsl:call-template name="Headers">
                      <xsl:with-param name="number" select="1" />
                    </xsl:call-template>
                  </xsl:if>
									<xsl:call-template name="Contents">
										<xsl:with-param name="number" select="1" />
										<xsl:with-param name="StartingProduct" select="/root/Products/Product[position() = 1]" />
									</xsl:call-template>
								</div>
							</td>
              <xsl:if test="$CountTabs > 1">
                <td class="sliderarrow">
                  <a href="javascript:sliderright('{$SliderID}-accordian')" class="sliderright" data-role="button" data-icon="arrow-r" data-iconpos="notext"></a>
                </td>
              </xsl:if>
						</tr>
					</table>
				</xsl:if>
			</xsl:template>

			<xsl:template name="Headers">
				<xsl:param name="number" />
				<xsl:param name="class">
					<xsl:choose>
						<xsl:when test="$number = 1">
							<xsl:text>slider_headings selected</xsl:text>
						</xsl:when>
						<xsl:otherwise>
							<xsl:text>slider_headings</xsl:text>
						</xsl:otherwise>
					</xsl:choose>
				</xsl:param>
				<div id="{$SliderID}{$number}-header" class="{$class}"></div>

				<xsl:if test="$number &lt; $CountTabs">
					<xsl:call-template name="Headers">
						<xsl:with-param name="number" select="$number +1" />
					</xsl:call-template>
				</xsl:if>
			</xsl:template>
			
			<xsl:template name="Contents">
				<xsl:param name="number" />
				<xsl:param name="StartingProduct" />
				<xsl:param name="RowSet" select="$StartingProduct | $StartingProduct/following-sibling::*[position() &lt; $SliderWidth]" />
				<xsl:param name="CellWidth" select="concat(round(100 div number($SliderWidth)) - 1,'%')" />
				


				<div id="{$SliderID}{$number}-content">
					<div class="accordion_child">
						<table style="width:100%;">
							<tr>
								<xsl:for-each select="$RowSet">
									<xsl:variable name="pSEAltText" select="aspdnsf:GetMLValue(SEAltText)"></xsl:variable>
									<xsl:variable name="AltText">
										<xsl:choose>
											<xsl:when test="$pSEAltText=''">
												<xsl:value-of select="aspdnsf:GetMLValue(Name)" />
											</xsl:when>
											<xsl:otherwise>
												<xsl:value-of select="$pSEAltText" />
											</xsl:otherwise>
										</xsl:choose>
									</xsl:variable>
									<xsl:variable name="pImgUrl" select="aspdnsf:ProductImageUrl(ProductID, ImageFileNameOverride, SKU, 'icon', 1)" />
									<td align="center" width="{$CellWidth}">
										<a href="{aspdnsf:ProductLink(ProductID, SEName, 0)}">
											<img width="{$IconWidth}" src="{$pImgUrl}" alt="{$AltText}" />
										</a>
									</td>
								</xsl:for-each>
								<xsl:if test="count($RowSet) &lt; $SliderWidth">
                                    <xsl:call-template name="FillerCells">
										<xsl:with-param name="cellCount" select="$SliderWidth - count($RowSet)" />
										<xsl:with-param name="CellWidth" select="$CellWidth" />
                                    </xsl:call-template>
                                </xsl:if>
							</tr>
						</table>
					</div>
				</div>

				<xsl:if test="$number &lt; $CountTabs">
					<xsl:call-template name="Contents">
						<xsl:with-param name="number" select="$number +1" />
						<xsl:with-param name="StartingProduct" select="$StartingProduct/following-sibling::Product[position() = $SliderWidth]" />
					</xsl:call-template>
				</xsl:if>
			</xsl:template>

			<xsl:template name="FillerCells">
				<xsl:param name="cellCount"/>
				<xsl:param name="CellWidth" />
				<td width="{$CellWidth}">
					<div style="width:{$IconWidth}px;"></div>
				</td>
				<xsl:if test="$cellCount > 1">
					<xsl:call-template name="FillerCells">
						<xsl:with-param name="cellCount" select="$cellCount - 1"/>
						<xsl:with-param name="CellWidth" select="$CellWidth" />
					</xsl:call-template>
				</xsl:if>
			</xsl:template>
			
		</xsl:stylesheet>
	</PackageTransform>
</package>
