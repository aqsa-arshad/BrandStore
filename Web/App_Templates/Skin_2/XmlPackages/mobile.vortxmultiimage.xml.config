<?xml version="1.0" standalone="yes" ?>
<!-- ##################################################################################	-->
<!-- Copyright AspDotNetStorefront.com. All Rights Reserved.							-->
<!-- http://www.aspdotnetstorefront.com													-->
<!-- For details on this license please visit the product homepage at the URL above.	-->
<!-- THE ABOVE NOTICE MUST REMAIN INTACT.												-->
<!-- ##################################################################################	-->
<package version="2.1" displayname="Vortx Multi Image" debug="false" includeentityhelper="true">
  <!-- *********************************************************** -->
  <!-- Vortx Advanced Product Image Viewer Version 2.0M             -->
  <!-- *********************************************************** -->
	<query name="Products" rowElementName="Product">
		<sql>
			<![CDATA[
				exec dbo.aspdnsf_ProductInfo
					@ProductID = @ProductID,
					@CustomerLevelID = 0,
					@DefaultVariantOnly = 0,
					@StoreID = @StoreID
      ]]>
		</sql>
		<queryparam paramname="@ProductID"				paramtype="request"	requestparamname="ProductID"				sqlDataType="int"	defvalue="0"	validationpattern="^\d{1,10}$" />
		<queryparam paramname="@StoreID"					paramtype="runtime"	requestparamname="StoreID"					sqlDataType="int"	defvalue="1"	validationpattern="" />
	</query>

	<PackageTransform>
    <xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:aspdnsf="urn:aspdnsf" xmlns:mobile="urn:mobile" exclude-result-prefixes="aspdnsf mobile">


      <xsl:output method="html" omit-xml-declaration="yes" />
      <xsl:param name="LocaleSetting" select="/root/Runtime/LocaleSetting" />
      <xsl:param name="WebConfigLocaleSetting" select="/root/Runtime/WebConfigLocaleSetting" />
      <xsl:param name="XmlPackageName" select="/root/System/XmlPackageName" />
      <xsl:param name="SecID">
        <xsl:choose>
          <xsl:when test="count(/root/QueryString/sectionid) &gt; 0">
            <xsl:value-of select="/root/QueryString/sectionid" />
          </xsl:when>
          <xsl:otherwise>0</xsl:otherwise>
        </xsl:choose>
      </xsl:param>
      <xsl:param name="defaultVariant">
        <xsl:choose>
          <xsl:when test="count(/root/Products/Product[IsDefault=1]) = 0">
            <xsl:value-of select="/root/Products/Product[1]/VariantID" />
          </xsl:when>
          <xsl:otherwise>
            <xsl:value-of select="/root/Products/Product[IsDefault=1]/VariantID" />
          </xsl:otherwise>
        </xsl:choose>
      </xsl:param>

      <xsl:param name="CatID">
        <xsl:choose>
          <xsl:when test="count(/root/QueryString/categoryid) &gt; 0">
            <xsl:value-of select="/root/QueryString/categoryid" />
          </xsl:when>
          <xsl:otherwise>0</xsl:otherwise>
        </xsl:choose>
      </xsl:param>
      
      <xsl:param name="ProductID" select="/root/Runtime/productid" />

      <xsl:template match="/">
        <style type="text/css">
          <![CDATA[
            /* image viewer */
            #ProductPageTop
            {
              margin-bottom: 10px;
            }
            #imageViewer
            {
              padding: 8px;
              width: 300px;
              margin: 0px 8px 8px 0px;
            }
            #productImageWrap
            {
              background: #fff;
              text-align: left;
              margin-top:-15px !important;
              margin-left:-15px !important;
            }
            #imageViewerTable
            {
            }
            #viewLarger
            {
              float: left;
              height: 50px;
              width: 50px;
            }
            #viewLarger img
            {	
              border: solid 1px #aaa;
            }
            #viewControlsWrap .linkWrap, #showLarger .linkWrap
            {
              float: left;
              border: solid 1px #aaa;
              display: inline;
              margin: 4px 4px 0px 0px;
            }
            #viewControlsWrap img, #showLarger img
            {
              width: 50px;
              height: 50px;
            }
            /* end image viewer */

            #productRightCol
            {
              width: 423px;
              float: right;
            }
            #colorControls .linkWrap, #defaultControl .linkWrap
            {
              float: left;
              border: solid 1px #aaa;
              margin: 0px 4px 4px 0px;
              display: inline;
            }
            #colorControls .linkWrap img, #defaultControl .linkWrap img
            {
              width: 50px;
              height: 50px;
            }
            #colorOptionsLabel
            {
              border: none;
              margin: 0px 0px 5px 0px;
              font-size: 11px;
              font-weight: bold;
            }
            #viewOptionsLabel
            {
              color: #666;
              border: none;
              margin: 4px 0px 0px 2px;
              font-size: 11px;
              font-weight: bold;
            }
                                    
            .ProductHeader
            {
              font-size: 16px;
              font-weight: bold;
            }
            #productPriceWrap
            {
              margin-bottom: 5px;
              font-weight: bold;
            }
            #productOptionsWrap
            {
              margin-bottom: 5px;
            }
          ]]>
        </style>
        <xsl:apply-templates select="/root/Products/Product[isdefault = 1]" />
      </xsl:template>
      
      <xsl:template match="Product">
        <xsl:param name="Colors" select="aspdnsf:GetMLValue(Colors)" />
        <xsl:param name="imageNodes" select="mobile:ProductImageCollectionXML(ProductID, ImageFilenameOverride, SKU, $Colors)" />
        <!--<xsl:value-of select="mobile:ProductImageCollectionString(ProductID, ImageFilenameOverride, SKU, $Colors)" disable-output-escaping="no" />-->
        <xsl:apply-templates select="$imageNodes/ProductImages"/>
      </xsl:template>
      
      
      <xsl:template match="ProductImages">
        <xsl:param name="minImageIndex" select="attribute::minimageindex" />
        <xsl:param name="maxImageIndex" select="attribute::maximageindex" />
        <xsl:param name="selectedView" select="1" />
        <!--it would be cool to be able to pass this in on the querystring-->
        <xsl:param name="selectedColor" select="''" />
        <!--it would be cool to be able to pass this in on the querystring-->

        <xsl:param name="hasMultiColorImages" >
          <!--this is a confusing line, but just tests for the total number of nodes that don't contain the no picture icon.-->
          <xsl:choose>
            <xsl:when test="count(Size[@value = 'Icon']/Color[@value != '']/View[not(contains(node(),'nopicture'))]) &gt; 0">
              <xsl:text>true</xsl:text>
            </xsl:when>
            <xsl:otherwise>
              <xsl:text>false</xsl:text>
            </xsl:otherwise>
          </xsl:choose>
        </xsl:param>
        <xsl:param name="hasMultiViewImages" >
          <xsl:choose>
            <xsl:when test="$maxImageIndex &gt; 1">
              <xsl:text>true</xsl:text>
            </xsl:when>
            <xsl:otherwise>
              <xsl:text>false</xsl:text>
            </xsl:otherwise>
          </xsl:choose>
        </xsl:param>
        <xsl:param name="defaultLargeImage" select="Size[@value='Large']/DefaultImage" />
        <xsl:param name="defaultLargeWidth" select="Size[@value='Large']/DefaultImage/@width" />
        <xsl:param name="defaultLargeHeight" select="Size[@value='Large']/DefaultImage/@height" />
        <script type="text/javascript">
          var productId = '<xsl:value-of select="ProductID" disable-output-escaping="yes" />';
          var color = '<xsl:value-of select="$selectedColor" disable-output-escaping="yes" />';
          var view = '<xsl:value-of select="$selectedView" disable-output-escaping="yes" />';
          var hasMultiColorImages = '<xsl:value-of select="$hasMultiColorImages" disable-output-escaping="yes" />';
          var hasMultiViewImages = '<xsl:value-of select="$hasMultiViewImages" disable-output-escaping="yes" />';
          var defaultLargeImage = new imageInfo('<xsl:value-of select="$defaultLargeImage" disable-output-escaping="yes" />','<xsl:value-of select="$defaultLargeWidth" disable-output-escaping="yes" />','<xsl:value-of select="$defaultLargeHeight" disable-output-escaping="yes" />');

          //an array of each image's src
          var imageSizes = new Array();
          <xsl:for-each select="Size">
            <xsl:value-of select="@value" />Colors = new Array();
            imageSizes['<xsl:value-of select="@value" />'] = <xsl:value-of select="@value" />Colors;
            <xsl:for-each select="Color[@value]">
              <xsl:value-of select="@value" />Views = new Array();
              <xsl:value-of select="parent::node()/@value" />Colors['<xsl:value-of select="@value" />'] = <xsl:value-of select="@value" />Views;
              <xsl:for-each select="View">
                <xsl:value-of select="parent::node()/@value" />Views[<xsl:value-of select="@value" />] = new imageInfo('<xsl:value-of select="." />',<xsl:value-of select="@width" />,<xsl:value-of select="@height" />);

              </xsl:for-each>
            </xsl:for-each>
          </xsl:for-each>

          <![CDATA[
					//create and image object to store each image's attributes
					function imageInfo(SRC, WIDTH, HEIGHT) 
					{
					  this.src = SRC;
					this.width = WIDTH;
					this.height = HEIGHT;
					} 
					function setColor(newColor)
					{
            //don't set the color if the color has no image. This can be done from the color dropdown.
            //if(imageSizes['Icon'][newColor][view].src.match("nopicture"))
            //{
            //  return false;
            //}
          
					//set the global color
					color = newColor;
					
					//get the medium image
					var image = document.getElementById('productImage');
					//set the src attribute
          if(!imageSizes['Medium'][newColor][view].src.match("nopicture"))
					  image.src = imageSizes['Medium'][color][view].src;
          
          //get and set the product image zoom link
					var largeImageLink = document.getElementById('largeImageLink');
					//largeImageLink.href = imageSizes['Large'][color][view].src;
          
          //get and set the zoom button link
					var showLargerLink = document.getElementById('showLargerLink');
          if (showLargerLink)
					  showLargerLink.href = imageSizes['Large'][color][view].src;
					
					//update the view colors if they're there
					if(hasMultiViewImages == 'true')
					{
					  //get all the images in viewcontrols
					  var viewImages = document.getElementById('viewControls').getElementsByTagName('img');
					  
					  //set their src attributes
					  for(i=0; i < viewImages.length; i++)
					  {
						  viewImages[i].src = imageSizes['Icon'][color][i+1].src;
					  }
                      
          }
					//get the add to cart color dropDown
           var colorSelect = document.getElementById('Color');
					  
					  //get the options
					  var dropOptions = colorSelect.getElementsByTagName('option');
					  
					  //loop through the options to find a match and set that match as the selected option.
            for(j=0;j<dropOptions.length;j++)
            {
						//get the color from the optiion's value. It's formatted Color,SkuModifier
						var optionColor = dropOptions[j].value.split(',',1);
            if(optionColor == color)
            {
               dropOptions[j].selected = true;
            }
            }
				}
				function setView(newView)
				{
        
					//set the global view variable
					view = newView;
					
					//get and set the medium image
					var image = document.getElementById('productImage');
					image.src = imageSizes['Medium'][color][view].src;
          
          //get and set the product image zoom link
					var largeImageLink = document.getElementById('largeImageLink');
					//largeImageLink.href = imageSizes['Large'][color][view].src;
          
          //get and set the zoom button link
					var showLargerLink = document.getElementById('showLargerLink');
          if (showLargerLink)
					  showLargerLink.href = imageSizes['Large'][color][view].src;
					
					//set the view of the colors if their there
					if(hasMultiColorImages == 'true')
					{
					  //get all the color controls images
					  var colorImages = document.getElementById('colorControls').getElementsByTagName('img');
					  //set all the color images' src attributes				
					  for(i=0; i < colorImages.length; i++)
					  {	
						  var iconColor = colorImages[i].alt
						  colorImages[i].src = imageSizes['Icon'][iconColor][view].src;
					  }
					}
				}
				function popUpLarge()
				{
				  if((!imageSizes['Large'][color][view].src.match("nopicture")) && (imageSizes['Large'][color][view].src))
				  {
				   window.open('popup.aspx?src=' + imageSizes['Large'][color][view].src,'LargerImage','toolbar=no,location=no,directories=no,status=no,menubar=no,scrollbars=no,resizable=no,copyhistory=no,width=' + imageSizes['Large'][color][view].width + ',height=' + imageSizes['Large'][color][view].height + ',left=0,top=0');
				  } 
          else if(defaultLargeImage.src != '')
          {
				   window.open('popup.aspx?src=' + defaultLargeImage.src,'LargerImage','toolbar=no,location=no,directories=no,status=no,menubar=no,scrollbars=no,resizable=no,copyhistory=no,width=' + defaultLargeImage.width + ',height=' + defaultLargeImage.height + ',left=0,top=0');
          }
          else
          {
          alert('Image Unavailable')
          }
				}
                 
				]]>
        </script>
        <div id="productImageWrap">
          <a id="largeImageLink" rel="ibox">
          <img id="productImage" src="images/product/medium/7.jpg" alt="" >
            <xsl:attribute name="src" >
              <xsl:value-of select="Size[@value = 'Medium']/DefaultImage" />
            </xsl:attribute>
          </img>
        </a>
        </div>
        <ul data-role="listview">
              
          <xsl:if test="$hasMultiViewImages = 'true'" >
            <li class="group" data-role="list-divider">Alternate Views</li>
          </xsl:if>
          <li>
            
            <div id="viewControlsWrap">
              <xsl:if test="$hasMultiViewImages = 'true'" >
                <div id="viewControls">
                  <xsl:apply-templates select="Size[@value = 'Icon']/Color[@value = $selectedColor]/View[@value &lt;= $maxImageIndex]" >
                    <xsl:with-param name="type" select="view" />
                  </xsl:apply-templates>
                </div>
              </xsl:if>
            </div>
            <div style="clear: both;"></div>
          </li>
          <xsl:if test="$hasMultiColorImages = 'true'">
            <li class="group" data-role="list-divider">Color Views</li>
            <li id="colorControls">
              <xsl:apply-templates select="Size[@value = 'Icon']/Color[@value != '']/View[(@value = $selectedView) and (not(contains(node(),'nopicture')))]" >
                <xsl:with-param name="type" select="'color'" />
              </xsl:apply-templates>
              <div style="clear: both;"></div>
            </li>
            <li class="group" data-role="list-divider">Default View</li>
            <xsl:variable name="defaultimage" select="Size[@value = 'Icon']/DefaultImage" />
            <xsl:variable name="defaultmediumimage" select="Size[@value = 'Medium']/DefaultImage" />
            <li id="defaultControl">
              <div class="linkWrap">
                <a href="javascript:try{{setColor('');}}catch(Exception){{}};var image = document.getElementById('productImage');image.src = '{$defaultmediumimage}';">
                  <img>
                    <xsl:attribute name="src">
                      <xsl:value-of select="$defaultimage" />
                    </xsl:attribute>
                    <xsl:attribute name="alt">
                      <xsl:value-of select="parent::node()/@value" />
                    </xsl:attribute>
                  </img>
                </a>
              </div>
              <div style="clear: both;"></div>
            </li>
            

          </xsl:if>
        </ul>



      
          
      </xsl:template>
      <xsl:template match="View">
        <xsl:param name="type" />
        <xsl:choose>
          <xsl:when test="$type = 'color'">
            <div class="linkWrap">
              <xsl:variable name="Color">
                <xsl:text>'</xsl:text>
                <xsl:value-of select="parent::node()/@value" disable-output-escaping="yes" />
                <xsl:text>'</xsl:text>
              </xsl:variable>
              <a href="javascript:setColor({$Color})">
                <img>
                  <xsl:attribute name="src">
                    <xsl:value-of select="." />
                  </xsl:attribute>
                  <xsl:attribute name="alt">
                    <xsl:value-of select="parent::node()/@value" />
                  </xsl:attribute>
                </img>
              </a>
            </div>
          </xsl:when>
          <xsl:otherwise>
            <div class="linkWrap">
              <xsl:variable name="View" select="@value" />
              <a href="javascript:setView({$View})">
                <img>
                  <xsl:attribute name="src">
                    <xsl:value-of select="." />
                  </xsl:attribute>
                </img>
              </a>
            </div>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:template>
    </xsl:stylesheet>
  </PackageTransform>
</package>
