<?xml version="1.0" encoding="utf-8" ?>
<!-- ##################################################################################	-->
<!-- Copyright AspDotNetStorefront.com. All Rights Reserved.							-->
<!-- http://www.aspdotnetstorefront.com													-->
<!-- For details on this license please visit the product homepage at the URL above.	-->
<!-- THE ABOVE NOTICE MUST REMAIN INTACT.												-->
<!-- ##################################################################################	-->
<package displayname="Kit Product" version="2.1" debug="false" includeentityhelper="true">
	<query name="Products" rowElementName="Product">
		<sql>
			<![CDATA[
				SELECT p.*
             , pv.VariantID
             , pv.price
             , isnull(pv.saleprice, 0) saleprice
             , isnull(pv.colors, '') Colors
             , ProductManufacturer.ManufacturerID AS ProductManufacturerId
             , Manufacturer.Name AS ProductManufacturerName
             , Manufacturer.SEName AS ProductManufacturerSEName
             , ISNULL(pv.Dimensions, '') AS Dimensions
             , ISNULL(pv.Weight, '') AS Weight
             , ISNULL(pv.GTIN, '') AS GTIN
             , Condition
             , case when pcl.productid is null then 0 else isnull(e.Price, 0) end ExtendedPrice
				FROM dbo.PRODUCT p  with (nolock)
					join dbo.PRODUCTVARIANT pv with (nolock) on p.ProductID = pv.ProductID 
					left join dbo.ProductCustomerLevel pcl with (nolock) on p.ProductID = pcl.ProductID and pcl.CustomerLevelID=@CustomerLevelID
					left join dbo.ExtendedPrice e with (nolock) on pv.VariantID=e.VariantID and e.CustomerLevelID=@CustomerLevelID
					left join dbo.ProductManufacturer with (nolock) on p.ProductID = ProductManufacturer.ProductID
					left join dbo.Manufacturer with (nolock) on ProductManufacturer.ManufacturerID = Manufacturer.ManufacturerID
				where p.ProductID = @ProductID 
					and pv.isdefault = 1
					and case 
							when @FilterProductsByCustomerLevel = 'false' then 1
							when @CustomerLevelFilteringIsAscending = 'true' and (pcl.CustomerLevelID <= @CustomerLevelID or pcl.CustomerLevelID is null) then 1 
							when @CustomerLevelID=0 and pcl.CustomerLevelID is null then 1
							when pcl.CustomerLevelID = @CustomerLevelID  or pcl.CustomerLevelID is null then 1 
							else 0
						end  = 1
			]]>
		</sql>
		<queryparam paramname="@ProductID" paramtype="request" requestparamname="ProductID" sqlDataType="int" defvalue="0" validationpattern="^\d{1,10}$" />
		<queryparam paramname="@CustomerLevelID" paramtype="runtime" requestparamname="CustomerLevelID" sqlDataType="int" defvalue="0"  validationpattern="" />
		<queryparam paramname="@FilterProductsByCustomerLevel" paramtype="appconfig" requestparamname="FilterProductsByCustomerLevel" sqlDataType="varchar" defvalue="false"  validationpattern="" />
		<queryparam paramname="@CustomerLevelFilteringIsAscending" paramtype="appconfig" requestparamname="CustomerLevelFilteringIsAscending" sqlDataType="varchar" defvalue="false"  validationpattern="" />
	</query>
	<PackageTransform>
		<xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
						xmlns:aspdnsf="urn:aspdnsf"
						xmlns:kit2="urn:kit2"
						exclude-result-prefixes="kit2" >

			<xsl:output method="html" omit-xml-declaration="yes" />

			<xsl:variable name="CatID">
				<xsl:choose>
					<xsl:when test="count(/root/QueryString/categoryid) &gt; 0">
						<xsl:value-of select="/root/QueryString/categoryid" />
					</xsl:when>
					<xsl:otherwise>0</xsl:otherwise>
				</xsl:choose>
			</xsl:variable>
			<xsl:variable name="CartRecID">
				<xsl:choose>
					<xsl:when test="/root/QueryString/cartrecid">
						<xsl:value-of select="/root/QueryString/cartrecid" />
					</xsl:when>
					<xsl:otherwise>0</xsl:otherwise>
				</xsl:choose>
			</xsl:variable>
			<xsl:variable name="ProductIdsOnPage">
				<xsl:for-each select="/root/Products/Product/ProductID">
					<xsl:value-of select="." />
					<xsl:if test="position() != last()">
						<xsl:text>,</xsl:text>
					</xsl:if>
				</xsl:for-each>
			</xsl:variable>
			<xsl:variable name="AvailablePromotions" select="aspdnsf:XmlPackageAsXml('availablePromotions.xml.config', concat('productIdList=', $ProductIdsOnPage))/root/Promotions" />

			<xsl:template match="/">
				<xsl:choose>
					<xsl:when test="/root/Products/Product/IsAKit='0'">
						<b>This XMLPackage is designed to work with Kit products only</b>
					</xsl:when>
					<xsl:otherwise>
						<div class="kit-product-page-top">
							<xsl:apply-templates select="/root/Products/Product"></xsl:apply-templates>
						</div>
					</xsl:otherwise>
				</xsl:choose>
			</xsl:template>

			<xsl:template match="Product">
				<xsl:variable name="Name" select="aspdnsf:GetMLValue(Name)"></xsl:variable>
				<xsl:variable name="Description" select="aspdnsf:GetMLValue(Description)"></xsl:variable>
				<xsl:variable name="HidePriceUntilCart" select="HidePriceUntilCart" />
				<xsl:variable name="ProductID" select="ProductID" />
				<xsl:variable name="EntityID">
					<xsl:value-of select="/root/Runtime/EntityID"/>
				</xsl:variable>
				<xsl:variable name="EntityName">
					<xsl:value-of select="/root/Runtime/EntityName"/>
				</xsl:variable>
				<xsl:variable name="SEAltText" select="aspdnsf:GetMLValue(SEAltText)"></xsl:variable>
				<xsl:variable name="AltText">
					<xsl:choose>
						<xsl:when test="$SEAltText=''">
							<xsl:value-of select="$Name" />
						</xsl:when>
						<xsl:otherwise>
							<xsl:value-of select="$SEAltText" />
						</xsl:otherwise>
					</xsl:choose>
				</xsl:variable>
				<xsl:variable name="ProductSpecsLink" select="aspdnsf:ProductSpecsLink(ProductID, SpecsInline, SpecTitle, SKU, SpecCall)" />
				<xsl:variable name="QuantityDiscountTable" select="aspdnsf:ShowQuantityDiscountTable(ProductID)" />
				<xsl:variable name="pManufacturerName" select="aspdnsf:GetMLValue(ProductManufacturerName)"/>
				<xsl:variable name="productSKU" select="/root/Products/Product/SKU" />
				<xsl:variable name="pImageLarge" select="aspdnsf:ProductImageUrl(ProductID, ImageFileNameOverride, SKU, 'large', 1)"/>
				<xsl:variable name="schemaOrganizationURL" select="concat(aspdnsf:GetCurrentProtocol(), '://schema.org/Organization')"/>
				<xsl:variable name="schemaProductLink" select="aspdnsf:ProductLink(ProductID, SEName, '0', '0', '0', '1')" />
				<xsl:variable name="pManufacturerLink">
					<xsl:choose>
						<xsl:when test="string-length(ProductManufacturerId) &gt; 0 and string-length(ProductManufacturerSEName) &gt; 0">
							<xsl:value-of select="aspdnsf:ManufacturerLink(ProductManufacturerId, ProductManufacturerSEName, '0', '0', '1')" />
						</xsl:when>
					</xsl:choose>
				</xsl:variable>
				<xsl:variable name="fullSku" select="concat($productSKU, SkuSuffix)" />
				<xsl:variable name="productConditionText" select="aspdnsf:RetrieveProductConditionText(Condition)" />
				<xsl:variable name="mpn" select="concat(ManufacturerPartNumber, VariantManufacturerPartNumber)" />
				<xsl:variable name="GTINValue" select="aspdnsf:ValidateGTIN(GTIN)" />
				<xsl:variable name="dimensionUnits" select="aspdnsf:ToLower(aspdnsf:AppConfig('Localization.DimensionUnits'))" />
				<xsl:variable name="weightUnits" select="aspdnsf:ToLower(aspdnsf:AppConfig('Localization.WeightUnits'))" />

				<div class="product-info row">
					<xsl:if test="string-length($GTINValue) &gt; 0">
						<meta itemprop="{substring-before($GTINValue, '|')}" content="{substring-after($GTINValue, '|')}"/>
					</xsl:if>
					<xsl:if test="string-length($mpn) &gt; 0">
						<meta itemprop="mpn" content="{$mpn}"/>
					</xsl:if>
					<xsl:if test="string-length(Dimensions) &gt; 0 and string-length($dimensionUnits) &gt; 0">
						<xsl:variable name="pWidth" select="aspdnsf:RetrieveDimension(Dimensions, 'width')" />
						<xsl:if test="string-length($pWidth) &gt; 0">
							<meta itemprop="width" content="{concat($pWidth, ' ', $dimensionUnits)}"/>
						</xsl:if>
						<xsl:variable name="pHeight" select="aspdnsf:RetrieveDimension(Dimensions, 'height')" />
						<xsl:if test="string-length($pHeight) &gt; 0">
							<meta itemprop="height" content="{concat($pHeight, ' ', $dimensionUnits)}"/>
						</xsl:if>
						<xsl:variable name="pDepth" select="aspdnsf:RetrieveDimension(Dimensions, 'depth')" />
						<xsl:if test="string-length($pDepth) &gt; 0">
							<meta itemprop="depth" content="{concat($pDepth, ' ', $dimensionUnits)}"/>
						</xsl:if>
					</xsl:if>
					<xsl:if test="string-length(Weight) &gt; 0 and string-length($weightUnits) &gt; 0">
						<xsl:variable name="pWeight" select="aspdnsf:ValidateWeight(Weight)" />
						<xsl:if test="string-length($pWeight) &gt; 0">
							<meta itemprop="weight" content="{concat(aspdnsf:FormatDecimal($pWeight, '2'), ' ', $weightUnits)}"/>
						</xsl:if>
					</xsl:if>
					<xsl:if test="string-length($productConditionText) &gt; 0">
						<link itemprop="itemCondition" href="{concat(aspdnsf:GetCurrentProtocol(), '://schema.org/', concat($productConditionText, 'Condition'))}" content="{aspdnsf:ToLower($productConditionText)}"/>
					</xsl:if>
					<xsl:if test="string-length($fullSku) &gt; 0">
						<meta itemprop="sku" content="{$fullSku}"/>
					</xsl:if>
					<xsl:if test="$ProductID &gt; 0">
						<meta itemprop="productID" content="{$ProductID}"/>
					</xsl:if>
					<xsl:if test="((string-length($pImageLarge) &gt; 0) and (contains(substring-after($pImageLarge, 'images/'),'.')) and (not(contains($pImageLarge, 'nopicture.gif'))) and (not(contains($pImageLarge, 'nopictureicon.gif'))))">
						<!--This is necessary to escape ampersands in watermaked urls-->
						<xsl:variable name="BeginningImageMetaTag">
							<xsl:text>&lt;meta itemprop="image" content="</xsl:text>
						</xsl:variable>
						<xsl:variable name="EndImageMetaTag">
							<xsl:text>" /&gt;</xsl:text>
						</xsl:variable>
						<xsl:value-of select="$BeginningImageMetaTag" disable-output-escaping="yes" />
						<xsl:value-of select="$pImageLarge" disable-output-escaping="yes" />
						<xsl:value-of select="$EndImageMetaTag" disable-output-escaping="yes" />
					</xsl:if>
					<xsl:if test="((string-length($pManufacturerName) &gt; 0) or (string-length($pManufacturerLink) &gt; 0))">
						<span itemprop="manufacturer" itemscope="" itemtype="{$schemaOrganizationURL}">
							<xsl:if test="string-length($pManufacturerName) &gt; 0">
								<meta itemprop="name" content="{$pManufacturerName}"/>
							</xsl:if>
							<xsl:if test="string-length($pManufacturerLink) &gt; 0">
								<meta itemprop="url" content="{$pManufacturerLink}"/>
							</xsl:if>
						</span>
					</xsl:if>
					<xsl:if test="string-length($schemaProductLink) &gt; 0">
						<meta itemprop="url" content="{$schemaProductLink}"/>
					</xsl:if>
					<div class="product-image-wrap col-sm-3">
						<xsl:value-of select="aspdnsf:LookupProductImage(ProductID, ImageFilenameOverride, SKU, 'medium', 1, $AltText)" disable-output-escaping="yes"/>
					</div>
					<div class="product-info col-sm-9">

						<h1 class="product-name" itemprop="name">
							<xsl:value-of select="$Name" disable-output-escaping="yes" />
						</h1>
						<xsl:if test="string-length($Description) &gt; 0">
							<div class="product-description" itemprop="description">
								<xsl:value-of select="$Description" disable-output-escaping="yes"/>
							</div>
						</xsl:if>
						<xsl:if test="string-length($ProductSpecsLink) &gt; 0">
							<div class="product-spec-link-wrap">
								<xsl:value-of select="aspdnsf:ProductSpecsLink(ProductID, SpecsInline, SpecTitle, SKU, SpecCall)" disable-output-escaping="yes" />
							</div>
						</xsl:if>
						<div class="email-a-friend-wrap">
							<a href="emailproduct.aspx?productid={ProductID}" class="email-a-friend-link">
								<xsl:value-of select="aspdnsf:StringResource('showproduct.aspx.20')" disable-output-escaping="yes" />
							</a>
						</div>
						<xsl:apply-templates select="$AvailablePromotions/Promotion[ProductId=$ProductID]" />
						<xsl:if test="string-length($QuantityDiscountTable)">
							<div class="quantity-discount-wrap">
								<xsl:value-of select="$QuantityDiscountTable" disable-output-escaping="yes"/>
							</div>
						</xsl:if>
						<xsl:if test="aspdnsf:AppConfigBool('ShowInventoryTable')='true'">
							<div class="inventory-table">
								<xsl:value-of select="aspdnsf:ShowInventoryTable(ProductID)" disable-output-escaping="yes" />
							</div>
						</xsl:if>
					</div>
				</div>

				<!-- End - Product Info Section -->
			</xsl:template>
			<xsl:template match="Promotion">
				<div class="promotion-call-to-action">
					<xsl:value-of select="CallToAction" disable-output-escaping="yes" />
				</div>
			</xsl:template>

		</xsl:stylesheet>
	</PackageTransform>
</package>
