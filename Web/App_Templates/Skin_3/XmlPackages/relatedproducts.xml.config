<?xml version="1.0" standalone="yes" ?>
<!-- ##################################################################################	-->
<!-- Copyright AspDotNetStorefront.com. All Rights Reserved.							-->
<!-- http://www.aspdotnetstorefront.com													-->
<!-- For details on this license please visit the product homepage at the URL above.	-->
<!-- THE ABOVE NOTICE MUST REMAIN INTACT.												-->
<!-- ##################################################################################	-->
<package version="2.1" displayname="Related Products" debug="false" includeentityhelper="false">
	<query name="RelatedItems" rowElementName="Item">
		<sql>
			<![CDATA[
            EXEC aspdnsf_GetCustomersRelatedProducts 
                 @CustomerGUID,
                 @ProductID,
                 @CustomerLevelID,
                 @InvFilter,
                 @affiliateID,
				 @storeID,
                 @FilterProduct
            ]]>
		</sql>
		<queryparam paramname="@ProductID"			paramtype="runtime"		requestparamname="productid"									sqlDataType="int"		defvalue="0"	validationpattern="" />
		<queryparam paramname="@CustomerLevelID"	paramtype="runtime"		requestparamname="CustomerLevelID"								sqlDataType="int"		defvalue="0"	validationpattern="" />
		<queryparam paramname="@InvFilter"			paramtype="appconfig"	requestparamname="HideProductsWithLessThanThisInventoryLevel"	sqlDataType="int"		defvalue="0"	validationpattern="" />
		<queryparam paramname="@CustomerGUID"		paramtype="runtime"		requestparamname="customerGuid"									sqlDataType="nvarchar"	defvalue=""		validationpattern="" />
		<queryparam paramname="@affiliateID"		paramtype="system"		requestparamname="AffiliateID"									sqlDataType="int"		defvalue="0"	validationpattern="" />
		<queryparam paramname="@StoreID"			paramtype="runtime"		requestparamname="StoreID"										sqlDataType="int"		defvalue="1"	validationpattern="" />
		<queryparam paramname="@FilterProduct"		paramtype="runtime"		requestparamname="FilterProduct"								sqlDataType="bit"		defvalue="0"	validationpattern="" />
	</query>


	<PackageTransform>
		<xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:aspdnsf="urn:aspdnsf" exclude-result-prefixes="aspdnsf">
			<xsl:output method="html" omit-xml-declaration="yes" />

			<xsl:variable name="RelatedProductsGridColWidth" select="aspdnsf:AppConfig('RelatedProductsGridColWidth')"></xsl:variable>

			<xsl:variable name="ProductIdsOnPage">
				<xsl:for-each select="/root/RelatedItems/Item/ProductID">
					<xsl:value-of select="." />
					<xsl:if test="position() != last()">
						<xsl:text>,</xsl:text>
					</xsl:if>
				</xsl:for-each>
			</xsl:variable>
			<xsl:variable name="AvailablePromotions" select="aspdnsf:XmlPackageAsXml('availablePromotions.xml.config', concat('productIdList=', $ProductIdsOnPage))/root/Promotions" />
			<xsl:variable name="Teaser" select="/root/Runtime/teaser" />

			<xsl:template match="/">
				<xsl:if test="count(/root/RelatedItems/Item) &gt; 0">
					<div class="related-products other-products-wrap">
						<div class="group-header related-items-header other-products-header">
							<xsl:value-of select="aspdnsf:StringResource('Header.RelatedItemsHeader')" disable-output-escaping="yes" />
						</div>
						<xsl:if test="string-length('$Teaser') &gt; 0">
							<p class="related-teaser">
								<xsl:value-of select="$Teaser" />
							</p>
						</xsl:if>
						<div class="row related-item-row">
							<xsl:apply-templates select="/root/RelatedItems/Item" />
						</div>
					</div>
				</xsl:if>
			</xsl:template>

			<xsl:template match="Item">
				<xsl:variable name="Name" select="aspdnsf:GetMLValue(Name)"></xsl:variable>
				<xsl:variable name="SalesPromptName" select="aspdnsf:GetMLValue(SalesPromptName)"></xsl:variable>
				<xsl:variable name="SEAltText" select="aspdnsf:GetMLValue(SEAltText)"></xsl:variable>
				<xsl:variable name="AltText">
					<xsl:choose>
						<xsl:when test="$SEAltText=''">
							<xsl:value-of select="$Name" />
						</xsl:when>
						<xsl:otherwise>
							<xsl:value-of select="$SEAltText" />
						</xsl:otherwise>
					</xsl:choose>
				</xsl:variable>
				<xsl:variable name="ProductID" select="ProductID" />
				<xsl:variable name="IsRecurring" select="HasRecurring" />
				<xsl:variable name="ProductLink" select="aspdnsf:ProductLink(ProductID, SEName, 0)" />
				<xsl:variable name="ImageUrl" select="aspdnsf:ImageUrl(ProductID, 'product', 'icon', 0)" />
				<xsl:variable name="ProductImageLarge" select="aspdnsf:ProductImageUrl(ProductID, '', '0', 'large', 1)" />
				<xsl:variable name="pManufacturerName" select="aspdnsf:GetMLValue(ProductManufacturerName)"/>
				<xsl:variable name="productSKU" select="aspdnsf:GetMLValue(SKU)" />
				<xsl:variable name="pDescription" select="aspdnsf:GetMLValue(Description)"/>
				<xsl:variable name="schemaProductURL" select="concat(aspdnsf:GetCurrentProtocol(), '://schema.org/Product')"/>
				<xsl:variable name="schemaOrganizationURL" select="concat(aspdnsf:GetCurrentProtocol(), '://schema.org/Organization')"/>
				<xsl:variable name="schemaProductLink" select="aspdnsf:ProductLink(ProductID, SEName, '0', '0', '0', '1')" />
				<xsl:variable name="pManufacturerLink">
					<xsl:choose>
						<xsl:when test="string-length(ProductManufacturerId) &gt; 0 and string-length(ProductManufacturerSEName) &gt; 0">
							<xsl:value-of select="aspdnsf:ManufacturerLink(ProductManufacturerId, ProductManufacturerSEName, '0', '0', '1')" />
						</xsl:when>
					</xsl:choose>
				</xsl:variable>
				<xsl:variable name="fullSku" select="concat($productSKU, SkuSuffix)" />
				<xsl:variable name="productConditionText" select="aspdnsf:RetrieveProductConditionText(Condition)" />
				<xsl:variable name="mpn" select="concat(ManufacturerPartNumber, VariantManufacturerPartNumber)" />
				<xsl:variable name="GTINValue" select="aspdnsf:ValidateGTIN(GTIN)" />
				<xsl:variable name="dimensionUnits" select="aspdnsf:ToLower(aspdnsf:AppConfig('Localization.DimensionUnits'))" />
				<xsl:variable name="weightUnits" select="aspdnsf:ToLower(aspdnsf:AppConfig('Localization.WeightUnits'))" />

				<xsl:if test="position() mod 4 = 1 and position() &gt; 1">
					<xsl:variable name="NewRowHtml">
						<xsl:text>&lt;/div&gt;&lt;div class="row  related-item-row"&gt;</xsl:text>
					</xsl:variable>
					<xsl:value-of select="$NewRowHtml" disable-output-escaping="yes" />
				</xsl:if>
				<div class="related-item grid-item col-xs-6 col-sm-3" itemprop="isSimilarTo" itemscope="" itemtype="{$schemaProductURL}">
					<div class="related-item-image-wrap grid-item-image-wrap">
						<a href="{$ProductLink}">
							<img src="{$ImageUrl}" alt="{$AltText}" class="img-thumbnail img-responsive related-item-image grid-item-image" />
						</a>
						<xsl:if test="string-length($GTINValue) &gt; 0">
							<meta itemprop="{substring-before($GTINValue, '|')}" content="{substring-after($GTINValue, '|')}"/>
						</xsl:if>
						<xsl:if test="string-length($mpn) &gt; 0">
							<meta itemprop="mpn" content="{$mpn}"/>
						</xsl:if>
						<xsl:if test="string-length(Dimensions) &gt; 0 and string-length($dimensionUnits) &gt; 0">
							<xsl:variable name="pWidth" select="aspdnsf:RetrieveDimension(Dimensions, 'width')" />
							<xsl:if test="string-length($pWidth) &gt; 0">
								<meta itemprop="width" content="{concat($pWidth, ' ', $dimensionUnits)}"/>
							</xsl:if>
							<xsl:variable name="pHeight" select="aspdnsf:RetrieveDimension(Dimensions, 'height')" />
							<xsl:if test="string-length($pHeight) &gt; 0">
								<meta itemprop="height" content="{concat($pHeight, ' ', $dimensionUnits)}"/>
							</xsl:if>
							<xsl:variable name="pDepth" select="aspdnsf:RetrieveDimension(Dimensions, 'depth')" />
							<xsl:if test="string-length($pDepth) &gt; 0">
								<meta itemprop="depth" content="{concat($pDepth, ' ', $dimensionUnits)}"/>
							</xsl:if>
						</xsl:if>
						<xsl:if test="string-length(Weight) &gt; 0 and string-length($weightUnits) &gt; 0">
							<xsl:variable name="pWeight" select="aspdnsf:ValidateWeight(Weight)" />
							<xsl:if test="string-length($pWeight) &gt; 0">
								<meta itemprop="weight" content="{concat(aspdnsf:FormatDecimal($pWeight, '2'), ' ', $weightUnits)}"/>
							</xsl:if>
						</xsl:if>
						<xsl:if test="string-length($productConditionText) &gt; 0">
							<link itemprop="itemCondition" href="{concat(aspdnsf:GetCurrentProtocol(), '://schema.org/', concat($productConditionText, 'Condition'))}" content="{aspdnsf:ToLower($productConditionText)}"/>
						</xsl:if>
						<xsl:if test="string-length($fullSku) &gt; 0">
							<meta itemprop="sku" content="{$fullSku}"/>
						</xsl:if>
						<xsl:if test="$ProductID &gt; 0">
							<meta itemprop="productID" content="{$ProductID}"/>
						</xsl:if>
						<xsl:if test="((string-length($ProductImageLarge) &gt; 0) and (contains(substring-after($ProductImageLarge, 'images/'),'.')) and (not(contains($ProductImageLarge, 'nopicture.gif'))) and (not(contains($ProductImageLarge, 'nopictureicon.gif'))))">
							<!--This is necessary to escape ampersands in watermaked urls-->
							<xsl:variable name="BeginningImageMetaTag">
								<xsl:text>&lt;meta itemprop="image" content="</xsl:text>
							</xsl:variable>
							<xsl:variable name="EndImageMetaTag">
								<xsl:text>" /&gt;</xsl:text>
							</xsl:variable>
							<xsl:value-of select="$BeginningImageMetaTag" disable-output-escaping="yes" />
							<xsl:value-of select="$ProductImageLarge" disable-output-escaping="yes" />
							<xsl:value-of select="$EndImageMetaTag" disable-output-escaping="yes" />
						</xsl:if>
						<xsl:if test="((string-length($pManufacturerName) &gt; 0) or (string-length($pManufacturerLink) &gt; 0))">
							<span itemprop="manufacturer" itemscope="" itemtype="{$schemaOrganizationURL}">
								<xsl:if test="string-length($pManufacturerName) &gt; 0">
									<meta itemprop="name" content="{$pManufacturerName}"/>
								</xsl:if>
								<xsl:if test="string-length($pManufacturerLink) &gt; 0">
									<meta itemprop="url" content="{$pManufacturerLink}"/>
								</xsl:if>
							</span>
						</xsl:if>
						<xsl:if test="string-length($Name) &gt; 0">
							<meta itemprop="name" content="{$Name}"/>
						</xsl:if>
						<xsl:if test="string-length($pDescription) &gt; 0">
							<meta itemprop="description" content="{$pDescription}"/>
						</xsl:if>
						<xsl:if test="string-length($schemaProductLink) &gt; 0">
							<meta itemprop="url" content="{$schemaProductLink}"/>
						</xsl:if>
					</div>
					<div class="related-item-name-wrap grid-item-name-wrap">
						<a href="{$ProductLink}">
							<xsl:value-of select="$Name" disable-output-escaping="yes" />
						</a>
					</div>
					<xsl:if test="aspdnsf:AppConfigBool('DisplayOutOfStockProducts') = 'true'">
						<div class="related-item-stock-wrap">
							<xsl:value-of select="aspdnsf:DisplayProductStockHint(ProductID,'Entity')" disable-output-escaping="yes" />
						</div>
					</xsl:if>
					<xsl:if test="$IsRecurring = 'True'">
						<div class="productCallToActionIsRecurring">
							<xsl:value-of select="aspdnsf:StringResource('product.CallToAction.IsRecurring')" disable-output-escaping="yes" />
						</div>
					</xsl:if>
					<xsl:apply-templates select="$AvailablePromotions/Promotion[ProductId=$ProductID]" />
				</div>
				<xsl:if test="position() mod 2 = 0">
					<div class="clearfix visible-xs related-item-extra-small-clear"></div>
				</xsl:if>
			</xsl:template>

			<xsl:template match="Promotion">
				<div class="promotion-call-to-action">
					<xsl:value-of select="CallToAction" disable-output-escaping="yes" />
				</div>
			</xsl:template>

		</xsl:stylesheet>
	</PackageTransform>
</package>
