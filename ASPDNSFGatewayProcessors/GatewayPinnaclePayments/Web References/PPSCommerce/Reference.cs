// --------------------------------------------------------------------------------
// Copyright AspDotNetStorefront.com. All Rights Reserved.
// http://www.aspdotnetstorefront.com
// For details on this license please visit the product homepage at the URL above.
// THE ABOVE NOTICE MUST REMAIN INTACT. 
// --------------------------------------------------------------------------------
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.225
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.225.
// 
#pragma warning disable 1591

namespace GatewayPinnaclePayments.PPSCommerce {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.ComponentModel;
    using System.Xml.Serialization;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="SmartPaymentsSoap", Namespace="http://TPISoft.com/SmartPayments/")]
    public partial class SmartPayments : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback ProcessCreditCardOperationCompleted;
        
        private System.Threading.SendOrPostCallback ProcessDebitCardOperationCompleted;
        
        private System.Threading.SendOrPostCallback ProcessEBTCardOperationCompleted;
        
        private System.Threading.SendOrPostCallback ProcessLoyaltyCardOperationCompleted;
        
        private System.Threading.SendOrPostCallback ProcessGiftCardOperationCompleted;
        
        private System.Threading.SendOrPostCallback ProcessCheckOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetInfoOperationCompleted;
        
        private System.Threading.SendOrPostCallback ProcessSignatureOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public SmartPayments() {
            this.Url = global::GatewayPinnaclePayments.Properties.Settings.Default.GatewayPinnaclePayments_PPSCommerce_SmartPayments;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event ProcessCreditCardCompletedEventHandler ProcessCreditCardCompleted;
        
        /// <remarks/>
        public event ProcessDebitCardCompletedEventHandler ProcessDebitCardCompleted;
        
        /// <remarks/>
        public event ProcessEBTCardCompletedEventHandler ProcessEBTCardCompleted;
        
        /// <remarks/>
        public event ProcessLoyaltyCardCompletedEventHandler ProcessLoyaltyCardCompleted;
        
        /// <remarks/>
        public event ProcessGiftCardCompletedEventHandler ProcessGiftCardCompleted;
        
        /// <remarks/>
        public event ProcessCheckCompletedEventHandler ProcessCheckCompleted;
        
        /// <remarks/>
        public event GetInfoCompletedEventHandler GetInfoCompleted;
        
        /// <remarks/>
        public event ProcessSignatureCompletedEventHandler ProcessSignatureCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://TPISoft.com/SmartPayments/ProcessCreditCard", RequestNamespace="http://TPISoft.com/SmartPayments/", ResponseNamespace="http://TPISoft.com/SmartPayments/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public Response ProcessCreditCard(string UserName, string Password, string TransType, string CardNum, string ExpDate, string MagData, string NameOnCard, string Amount, string InvNum, string PNRef, string Zip, string Street, string CVNum, string ExtData) {
            object[] results = this.Invoke("ProcessCreditCard", new object[] {
                        UserName,
                        Password,
                        TransType,
                        CardNum,
                        ExpDate,
                        MagData,
                        NameOnCard,
                        Amount,
                        InvNum,
                        PNRef,
                        Zip,
                        Street,
                        CVNum,
                        ExtData});
            return ((Response)(results[0]));
        }
        
        /// <remarks/>
        public void ProcessCreditCardAsync(string UserName, string Password, string TransType, string CardNum, string ExpDate, string MagData, string NameOnCard, string Amount, string InvNum, string PNRef, string Zip, string Street, string CVNum, string ExtData) {
            this.ProcessCreditCardAsync(UserName, Password, TransType, CardNum, ExpDate, MagData, NameOnCard, Amount, InvNum, PNRef, Zip, Street, CVNum, ExtData, null);
        }
        
        /// <remarks/>
        public void ProcessCreditCardAsync(string UserName, string Password, string TransType, string CardNum, string ExpDate, string MagData, string NameOnCard, string Amount, string InvNum, string PNRef, string Zip, string Street, string CVNum, string ExtData, object userState) {
            if ((this.ProcessCreditCardOperationCompleted == null)) {
                this.ProcessCreditCardOperationCompleted = new System.Threading.SendOrPostCallback(this.OnProcessCreditCardOperationCompleted);
            }
            this.InvokeAsync("ProcessCreditCard", new object[] {
                        UserName,
                        Password,
                        TransType,
                        CardNum,
                        ExpDate,
                        MagData,
                        NameOnCard,
                        Amount,
                        InvNum,
                        PNRef,
                        Zip,
                        Street,
                        CVNum,
                        ExtData}, this.ProcessCreditCardOperationCompleted, userState);
        }
        
        private void OnProcessCreditCardOperationCompleted(object arg) {
            if ((this.ProcessCreditCardCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ProcessCreditCardCompleted(this, new ProcessCreditCardCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://TPISoft.com/SmartPayments/ProcessDebitCard", RequestNamespace="http://TPISoft.com/SmartPayments/", ResponseNamespace="http://TPISoft.com/SmartPayments/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public Response ProcessDebitCard(string UserName, string Password, string TransType, string CardNum, string ExpDate, string MagData, string NameOnCard, string Amount, string InvNum, string PNRef, string Pin, string RegisterNum, string SureChargeAmt, string CashBackAmt, string ExtData) {
            object[] results = this.Invoke("ProcessDebitCard", new object[] {
                        UserName,
                        Password,
                        TransType,
                        CardNum,
                        ExpDate,
                        MagData,
                        NameOnCard,
                        Amount,
                        InvNum,
                        PNRef,
                        Pin,
                        RegisterNum,
                        SureChargeAmt,
                        CashBackAmt,
                        ExtData});
            return ((Response)(results[0]));
        }
        
        /// <remarks/>
        public void ProcessDebitCardAsync(string UserName, string Password, string TransType, string CardNum, string ExpDate, string MagData, string NameOnCard, string Amount, string InvNum, string PNRef, string Pin, string RegisterNum, string SureChargeAmt, string CashBackAmt, string ExtData) {
            this.ProcessDebitCardAsync(UserName, Password, TransType, CardNum, ExpDate, MagData, NameOnCard, Amount, InvNum, PNRef, Pin, RegisterNum, SureChargeAmt, CashBackAmt, ExtData, null);
        }
        
        /// <remarks/>
        public void ProcessDebitCardAsync(
                    string UserName, 
                    string Password, 
                    string TransType, 
                    string CardNum, 
                    string ExpDate, 
                    string MagData, 
                    string NameOnCard, 
                    string Amount, 
                    string InvNum, 
                    string PNRef, 
                    string Pin, 
                    string RegisterNum, 
                    string SureChargeAmt, 
                    string CashBackAmt, 
                    string ExtData, 
                    object userState) {
            if ((this.ProcessDebitCardOperationCompleted == null)) {
                this.ProcessDebitCardOperationCompleted = new System.Threading.SendOrPostCallback(this.OnProcessDebitCardOperationCompleted);
            }
            this.InvokeAsync("ProcessDebitCard", new object[] {
                        UserName,
                        Password,
                        TransType,
                        CardNum,
                        ExpDate,
                        MagData,
                        NameOnCard,
                        Amount,
                        InvNum,
                        PNRef,
                        Pin,
                        RegisterNum,
                        SureChargeAmt,
                        CashBackAmt,
                        ExtData}, this.ProcessDebitCardOperationCompleted, userState);
        }
        
        private void OnProcessDebitCardOperationCompleted(object arg) {
            if ((this.ProcessDebitCardCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ProcessDebitCardCompleted(this, new ProcessDebitCardCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://TPISoft.com/SmartPayments/ProcessEBTCard", RequestNamespace="http://TPISoft.com/SmartPayments/", ResponseNamespace="http://TPISoft.com/SmartPayments/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public Response ProcessEBTCard(string UserName, string Password, string TransType, string CardNum, string ExpDate, string MagData, string NameOnCard, string Amount, string InvNum, string PNRef, string Pin, string RegisterNum, string SureChargeAmt, string CashBackAmt, string ExtData) {
            object[] results = this.Invoke("ProcessEBTCard", new object[] {
                        UserName,
                        Password,
                        TransType,
                        CardNum,
                        ExpDate,
                        MagData,
                        NameOnCard,
                        Amount,
                        InvNum,
                        PNRef,
                        Pin,
                        RegisterNum,
                        SureChargeAmt,
                        CashBackAmt,
                        ExtData});
            return ((Response)(results[0]));
        }
        
        /// <remarks/>
        public void ProcessEBTCardAsync(string UserName, string Password, string TransType, string CardNum, string ExpDate, string MagData, string NameOnCard, string Amount, string InvNum, string PNRef, string Pin, string RegisterNum, string SureChargeAmt, string CashBackAmt, string ExtData) {
            this.ProcessEBTCardAsync(UserName, Password, TransType, CardNum, ExpDate, MagData, NameOnCard, Amount, InvNum, PNRef, Pin, RegisterNum, SureChargeAmt, CashBackAmt, ExtData, null);
        }
        
        /// <remarks/>
        public void ProcessEBTCardAsync(
                    string UserName, 
                    string Password, 
                    string TransType, 
                    string CardNum, 
                    string ExpDate, 
                    string MagData, 
                    string NameOnCard, 
                    string Amount, 
                    string InvNum, 
                    string PNRef, 
                    string Pin, 
                    string RegisterNum, 
                    string SureChargeAmt, 
                    string CashBackAmt, 
                    string ExtData, 
                    object userState) {
            if ((this.ProcessEBTCardOperationCompleted == null)) {
                this.ProcessEBTCardOperationCompleted = new System.Threading.SendOrPostCallback(this.OnProcessEBTCardOperationCompleted);
            }
            this.InvokeAsync("ProcessEBTCard", new object[] {
                        UserName,
                        Password,
                        TransType,
                        CardNum,
                        ExpDate,
                        MagData,
                        NameOnCard,
                        Amount,
                        InvNum,
                        PNRef,
                        Pin,
                        RegisterNum,
                        SureChargeAmt,
                        CashBackAmt,
                        ExtData}, this.ProcessEBTCardOperationCompleted, userState);
        }
        
        private void OnProcessEBTCardOperationCompleted(object arg) {
            if ((this.ProcessEBTCardCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ProcessEBTCardCompleted(this, new ProcessEBTCardCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://TPISoft.com/SmartPayments/ProcessLoyaltyCard", RequestNamespace="http://TPISoft.com/SmartPayments/", ResponseNamespace="http://TPISoft.com/SmartPayments/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public Response ProcessLoyaltyCard(string UserName, string Password, string TransType, string CardNum, string ExpDate, string MagData, string Amount, string InvNum, string PNRef, string ExtData) {
            object[] results = this.Invoke("ProcessLoyaltyCard", new object[] {
                        UserName,
                        Password,
                        TransType,
                        CardNum,
                        ExpDate,
                        MagData,
                        Amount,
                        InvNum,
                        PNRef,
                        ExtData});
            return ((Response)(results[0]));
        }
        
        /// <remarks/>
        public void ProcessLoyaltyCardAsync(string UserName, string Password, string TransType, string CardNum, string ExpDate, string MagData, string Amount, string InvNum, string PNRef, string ExtData) {
            this.ProcessLoyaltyCardAsync(UserName, Password, TransType, CardNum, ExpDate, MagData, Amount, InvNum, PNRef, ExtData, null);
        }
        
        /// <remarks/>
        public void ProcessLoyaltyCardAsync(string UserName, string Password, string TransType, string CardNum, string ExpDate, string MagData, string Amount, string InvNum, string PNRef, string ExtData, object userState) {
            if ((this.ProcessLoyaltyCardOperationCompleted == null)) {
                this.ProcessLoyaltyCardOperationCompleted = new System.Threading.SendOrPostCallback(this.OnProcessLoyaltyCardOperationCompleted);
            }
            this.InvokeAsync("ProcessLoyaltyCard", new object[] {
                        UserName,
                        Password,
                        TransType,
                        CardNum,
                        ExpDate,
                        MagData,
                        Amount,
                        InvNum,
                        PNRef,
                        ExtData}, this.ProcessLoyaltyCardOperationCompleted, userState);
        }
        
        private void OnProcessLoyaltyCardOperationCompleted(object arg) {
            if ((this.ProcessLoyaltyCardCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ProcessLoyaltyCardCompleted(this, new ProcessLoyaltyCardCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://TPISoft.com/SmartPayments/ProcessGiftCard", RequestNamespace="http://TPISoft.com/SmartPayments/", ResponseNamespace="http://TPISoft.com/SmartPayments/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public Response ProcessGiftCard(string UserName, string Password, string TransType, string CardNum, string ExpDate, string MagData, string Amount, string InvNum, string PNRef, string ExtData) {
            object[] results = this.Invoke("ProcessGiftCard", new object[] {
                        UserName,
                        Password,
                        TransType,
                        CardNum,
                        ExpDate,
                        MagData,
                        Amount,
                        InvNum,
                        PNRef,
                        ExtData});
            return ((Response)(results[0]));
        }
        
        /// <remarks/>
        public void ProcessGiftCardAsync(string UserName, string Password, string TransType, string CardNum, string ExpDate, string MagData, string Amount, string InvNum, string PNRef, string ExtData) {
            this.ProcessGiftCardAsync(UserName, Password, TransType, CardNum, ExpDate, MagData, Amount, InvNum, PNRef, ExtData, null);
        }
        
        /// <remarks/>
        public void ProcessGiftCardAsync(string UserName, string Password, string TransType, string CardNum, string ExpDate, string MagData, string Amount, string InvNum, string PNRef, string ExtData, object userState) {
            if ((this.ProcessGiftCardOperationCompleted == null)) {
                this.ProcessGiftCardOperationCompleted = new System.Threading.SendOrPostCallback(this.OnProcessGiftCardOperationCompleted);
            }
            this.InvokeAsync("ProcessGiftCard", new object[] {
                        UserName,
                        Password,
                        TransType,
                        CardNum,
                        ExpDate,
                        MagData,
                        Amount,
                        InvNum,
                        PNRef,
                        ExtData}, this.ProcessGiftCardOperationCompleted, userState);
        }
        
        private void OnProcessGiftCardOperationCompleted(object arg) {
            if ((this.ProcessGiftCardCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ProcessGiftCardCompleted(this, new ProcessGiftCardCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://TPISoft.com/SmartPayments/ProcessCheck", RequestNamespace="http://TPISoft.com/SmartPayments/", ResponseNamespace="http://TPISoft.com/SmartPayments/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public Response ProcessCheck(string UserName, string Password, string TransType, string CheckNum, string TransitNum, string AccountNum, string Amount, string MICR, string NameOnCheck, string DL, string SS, string DOB, string StateCode, string CheckType, string ExtData) {
            object[] results = this.Invoke("ProcessCheck", new object[] {
                        UserName,
                        Password,
                        TransType,
                        CheckNum,
                        TransitNum,
                        AccountNum,
                        Amount,
                        MICR,
                        NameOnCheck,
                        DL,
                        SS,
                        DOB,
                        StateCode,
                        CheckType,
                        ExtData});
            return ((Response)(results[0]));
        }
        
        /// <remarks/>
        public void ProcessCheckAsync(string UserName, string Password, string TransType, string CheckNum, string TransitNum, string AccountNum, string Amount, string MICR, string NameOnCheck, string DL, string SS, string DOB, string StateCode, string CheckType, string ExtData) {
            this.ProcessCheckAsync(UserName, Password, TransType, CheckNum, TransitNum, AccountNum, Amount, MICR, NameOnCheck, DL, SS, DOB, StateCode, CheckType, ExtData, null);
        }
        
        /// <remarks/>
        public void ProcessCheckAsync(
                    string UserName, 
                    string Password, 
                    string TransType, 
                    string CheckNum, 
                    string TransitNum, 
                    string AccountNum, 
                    string Amount, 
                    string MICR, 
                    string NameOnCheck, 
                    string DL, 
                    string SS, 
                    string DOB, 
                    string StateCode, 
                    string CheckType, 
                    string ExtData, 
                    object userState) {
            if ((this.ProcessCheckOperationCompleted == null)) {
                this.ProcessCheckOperationCompleted = new System.Threading.SendOrPostCallback(this.OnProcessCheckOperationCompleted);
            }
            this.InvokeAsync("ProcessCheck", new object[] {
                        UserName,
                        Password,
                        TransType,
                        CheckNum,
                        TransitNum,
                        AccountNum,
                        Amount,
                        MICR,
                        NameOnCheck,
                        DL,
                        SS,
                        DOB,
                        StateCode,
                        CheckType,
                        ExtData}, this.ProcessCheckOperationCompleted, userState);
        }
        
        private void OnProcessCheckOperationCompleted(object arg) {
            if ((this.ProcessCheckCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ProcessCheckCompleted(this, new ProcessCheckCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://TPISoft.com/SmartPayments/GetInfo", RequestNamespace="http://TPISoft.com/SmartPayments/", ResponseNamespace="http://TPISoft.com/SmartPayments/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public Response GetInfo(string UserName, string Password, string TransType, string ExtData) {
            object[] results = this.Invoke("GetInfo", new object[] {
                        UserName,
                        Password,
                        TransType,
                        ExtData});
            return ((Response)(results[0]));
        }
        
        /// <remarks/>
        public void GetInfoAsync(string UserName, string Password, string TransType, string ExtData) {
            this.GetInfoAsync(UserName, Password, TransType, ExtData, null);
        }
        
        /// <remarks/>
        public void GetInfoAsync(string UserName, string Password, string TransType, string ExtData, object userState) {
            if ((this.GetInfoOperationCompleted == null)) {
                this.GetInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetInfoOperationCompleted);
            }
            this.InvokeAsync("GetInfo", new object[] {
                        UserName,
                        Password,
                        TransType,
                        ExtData}, this.GetInfoOperationCompleted, userState);
        }
        
        private void OnGetInfoOperationCompleted(object arg) {
            if ((this.GetInfoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetInfoCompleted(this, new GetInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://TPISoft.com/SmartPayments/ProcessSignature", RequestNamespace="http://TPISoft.com/SmartPayments/", ResponseNamespace="http://TPISoft.com/SmartPayments/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public Response ProcessSignature(string UserName, string Password, string SignatureType, string SignatureData, string PNRef, string Result, string AuthCode, string ExtData) {
            object[] results = this.Invoke("ProcessSignature", new object[] {
                        UserName,
                        Password,
                        SignatureType,
                        SignatureData,
                        PNRef,
                        Result,
                        AuthCode,
                        ExtData});
            return ((Response)(results[0]));
        }
        
        /// <remarks/>
        public void ProcessSignatureAsync(string UserName, string Password, string SignatureType, string SignatureData, string PNRef, string Result, string AuthCode, string ExtData) {
            this.ProcessSignatureAsync(UserName, Password, SignatureType, SignatureData, PNRef, Result, AuthCode, ExtData, null);
        }
        
        /// <remarks/>
        public void ProcessSignatureAsync(string UserName, string Password, string SignatureType, string SignatureData, string PNRef, string Result, string AuthCode, string ExtData, object userState) {
            if ((this.ProcessSignatureOperationCompleted == null)) {
                this.ProcessSignatureOperationCompleted = new System.Threading.SendOrPostCallback(this.OnProcessSignatureOperationCompleted);
            }
            this.InvokeAsync("ProcessSignature", new object[] {
                        UserName,
                        Password,
                        SignatureType,
                        SignatureData,
                        PNRef,
                        Result,
                        AuthCode,
                        ExtData}, this.ProcessSignatureOperationCompleted, userState);
        }
        
        private void OnProcessSignatureOperationCompleted(object arg) {
            if ((this.ProcessSignatureCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ProcessSignatureCompleted(this, new ProcessSignatureCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.225")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://TPISoft.com/SmartPayments/")]
    public partial class Response {
        
        private int resultField;
        
        private string respMSGField;
        
        private string messageField;
        
        private string message1Field;
        
        private string message2Field;
        
        private string authCodeField;
        
        private string pNRefField;
        
        private string hostCodeField;
        
        private string hostURLField;
        
        private string receiptURLField;
        
        private string getAVSResultField;
        
        private string getAVSResultTXTField;
        
        private string getStreetMatchTXTField;
        
        private string getZipMatchTXTField;
        
        private string getCVResultField;
        
        private string getCVResultTXTField;
        
        private string getGetOrigResultField;
        
        private string getCommercialCardField;
        
        private string workingKeyField;
        
        private string keyPointerField;
        
        private string extDataField;
        
        /// <remarks/>
        public int Result {
            get {
                return this.resultField;
            }
            set {
                this.resultField = value;
            }
        }
        
        /// <remarks/>
        public string RespMSG {
            get {
                return this.respMSGField;
            }
            set {
                this.respMSGField = value;
            }
        }
        
        /// <remarks/>
        public string Message {
            get {
                return this.messageField;
            }
            set {
                this.messageField = value;
            }
        }
        
        /// <remarks/>
        public string Message1 {
            get {
                return this.message1Field;
            }
            set {
                this.message1Field = value;
            }
        }
        
        /// <remarks/>
        public string Message2 {
            get {
                return this.message2Field;
            }
            set {
                this.message2Field = value;
            }
        }
        
        /// <remarks/>
        public string AuthCode {
            get {
                return this.authCodeField;
            }
            set {
                this.authCodeField = value;
            }
        }
        
        /// <remarks/>
        public string PNRef {
            get {
                return this.pNRefField;
            }
            set {
                this.pNRefField = value;
            }
        }
        
        /// <remarks/>
        public string HostCode {
            get {
                return this.hostCodeField;
            }
            set {
                this.hostCodeField = value;
            }
        }
        
        /// <remarks/>
        public string HostURL {
            get {
                return this.hostURLField;
            }
            set {
                this.hostURLField = value;
            }
        }
        
        /// <remarks/>
        public string ReceiptURL {
            get {
                return this.receiptURLField;
            }
            set {
                this.receiptURLField = value;
            }
        }
        
        /// <remarks/>
        public string GetAVSResult {
            get {
                return this.getAVSResultField;
            }
            set {
                this.getAVSResultField = value;
            }
        }
        
        /// <remarks/>
        public string GetAVSResultTXT {
            get {
                return this.getAVSResultTXTField;
            }
            set {
                this.getAVSResultTXTField = value;
            }
        }
        
        /// <remarks/>
        public string GetStreetMatchTXT {
            get {
                return this.getStreetMatchTXTField;
            }
            set {
                this.getStreetMatchTXTField = value;
            }
        }
        
        /// <remarks/>
        public string GetZipMatchTXT {
            get {
                return this.getZipMatchTXTField;
            }
            set {
                this.getZipMatchTXTField = value;
            }
        }
        
        /// <remarks/>
        public string GetCVResult {
            get {
                return this.getCVResultField;
            }
            set {
                this.getCVResultField = value;
            }
        }
        
        /// <remarks/>
        public string GetCVResultTXT {
            get {
                return this.getCVResultTXTField;
            }
            set {
                this.getCVResultTXTField = value;
            }
        }
        
        /// <remarks/>
        public string GetGetOrigResult {
            get {
                return this.getGetOrigResultField;
            }
            set {
                this.getGetOrigResultField = value;
            }
        }
        
        /// <remarks/>
        public string GetCommercialCard {
            get {
                return this.getCommercialCardField;
            }
            set {
                this.getCommercialCardField = value;
            }
        }
        
        /// <remarks/>
        public string WorkingKey {
            get {
                return this.workingKeyField;
            }
            set {
                this.workingKeyField = value;
            }
        }
        
        /// <remarks/>
        public string KeyPointer {
            get {
                return this.keyPointerField;
            }
            set {
                this.keyPointerField = value;
            }
        }
        
        /// <remarks/>
        public string ExtData {
            get {
                return this.extDataField;
            }
            set {
                this.extDataField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void ProcessCreditCardCompletedEventHandler(object sender, ProcessCreditCardCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ProcessCreditCardCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ProcessCreditCardCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Response Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Response)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void ProcessDebitCardCompletedEventHandler(object sender, ProcessDebitCardCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ProcessDebitCardCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ProcessDebitCardCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Response Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Response)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void ProcessEBTCardCompletedEventHandler(object sender, ProcessEBTCardCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ProcessEBTCardCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ProcessEBTCardCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Response Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Response)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void ProcessLoyaltyCardCompletedEventHandler(object sender, ProcessLoyaltyCardCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ProcessLoyaltyCardCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ProcessLoyaltyCardCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Response Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Response)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void ProcessGiftCardCompletedEventHandler(object sender, ProcessGiftCardCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ProcessGiftCardCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ProcessGiftCardCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Response Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Response)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void ProcessCheckCompletedEventHandler(object sender, ProcessCheckCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ProcessCheckCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ProcessCheckCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Response Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Response)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetInfoCompletedEventHandler(object sender, GetInfoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Response Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Response)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void ProcessSignatureCompletedEventHandler(object sender, ProcessSignatureCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ProcessSignatureCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ProcessSignatureCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Response Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Response)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591
